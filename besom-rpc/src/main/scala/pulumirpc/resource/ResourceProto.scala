// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!

package pulumirpc.resource

object ResourceProto extends _root_.scalapb.GeneratedFileObject {
  lazy val dependencies: Seq[_root_.scalapb.GeneratedFileObject] = Seq(
    com.google.protobuf.empty.EmptyProto,
    com.google.protobuf.struct.StructProto,
    pulumirpc.provider.ProviderProto,
    pulumirpc.alias.AliasProto,
    pulumirpc.source.SourceProto,
    pulumirpc.callback.CallbackProto
  )
  lazy val messagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[? <: _root_.scalapb.GeneratedMessage]] =
    Seq[_root_.scalapb.GeneratedMessageCompanion[? <: _root_.scalapb.GeneratedMessage]](
      pulumirpc.resource.SupportsFeatureRequest,
      pulumirpc.resource.SupportsFeatureResponse,
      pulumirpc.resource.ReadResourceRequest,
      pulumirpc.resource.ReadResourceResponse,
      pulumirpc.resource.RegisterResourceRequest,
      pulumirpc.resource.RegisterResourceResponse,
      pulumirpc.resource.RegisterResourceOutputsRequest,
      pulumirpc.resource.ResourceInvokeRequest,
      pulumirpc.resource.ResourceCallRequest,
      pulumirpc.resource.TransformResourceOptions,
      pulumirpc.resource.TransformRequest,
      pulumirpc.resource.TransformResponse,
      pulumirpc.resource.TransformInvokeRequest,
      pulumirpc.resource.TransformInvokeResponse,
      pulumirpc.resource.TransformInvokeOptions,
      pulumirpc.resource.RegisterPackageRequest,
      pulumirpc.resource.RegisterPackageResponse,
      pulumirpc.resource.Parameterization
    )
  private lazy val ProtoBytes: _root_.scala.Array[Byte] =
      scalapb.Encoding.fromBase64(scala.collection.immutable.Seq(
  """ChVwdWx1bWkvcmVzb3VyY2UucHJvdG8SCXB1bHVtaXJwYxobZ29vZ2xlL3Byb3RvYnVmL2VtcHR5LnByb3RvGhxnb29nbGUvc
  HJvdG9idWYvc3RydWN0LnByb3RvGhVwdWx1bWkvcHJvdmlkZXIucHJvdG8aEnB1bHVtaS9hbGlhcy5wcm90bxoTcHVsdW1pL3Nvd
  XJjZS5wcm90bxoVcHVsdW1pL2NhbGxiYWNrLnByb3RvIjEKFlN1cHBvcnRzRmVhdHVyZVJlcXVlc3QSFwoCaWQYASABKAlCB+I/B
  BICaWRSAmlkIkoKF1N1cHBvcnRzRmVhdHVyZVJlc3BvbnNlEi8KCmhhc1N1cHBvcnQYASABKAhCD+I/DBIKaGFzU3VwcG9ydFIKa
  GFzU3VwcG9ydCLkBwoTUmVhZFJlc291cmNlUmVxdWVzdBIXCgJpZBgBIAEoCUIH4j8EEgJpZFICaWQSHQoEdHlwZRgCIAEoCUIJ4
  j8GEgR0eXBlUgR0eXBlEh0KBG5hbWUYAyABKAlCCeI/BhIEbmFtZVIEbmFtZRIjCgZwYXJlbnQYBCABKAlCC+I/CBIGcGFyZW50U
  gZwYXJlbnQSSAoKcHJvcGVydGllcxgFIAEoCzIXLmdvb2dsZS5wcm90b2J1Zi5TdHJ1Y3RCD+I/DBIKcHJvcGVydGllc1IKcHJvc
  GVydGllcxI1CgxkZXBlbmRlbmNpZXMYBiADKAlCEeI/DhIMZGVwZW5kZW5jaWVzUgxkZXBlbmRlbmNpZXMSKQoIcHJvdmlkZXIYB
  yABKAlCDeI/ChIIcHJvdmlkZXJSCHByb3ZpZGVyEiYKB3ZlcnNpb24YCCABKAlCDOI/CRIHdmVyc2lvblIHdmVyc2lvbhI4Cg1hY
  2NlcHRTZWNyZXRzGAkgASgIQhLiPw8SDWFjY2VwdFNlY3JldHNSDWFjY2VwdFNlY3JldHMSVgoXYWRkaXRpb25hbFNlY3JldE91d
  HB1dHMYCiADKAlCHOI/GRIXYWRkaXRpb25hbFNlY3JldE91dHB1dHNSF2FkZGl0aW9uYWxTZWNyZXRPdXRwdXRzEj4KD2FjY2Vwd
  FJlc291cmNlcxgMIAEoCEIU4j8REg9hY2NlcHRSZXNvdXJjZXNSD2FjY2VwdFJlc291cmNlcxJEChFwbHVnaW5Eb3dubG9hZFVST
  BgNIAEoCUIW4j8TEhFwbHVnaW5Eb3dubG9hZFVSTFIRcGx1Z2luRG93bmxvYWRVUkwScwoPcGx1Z2luQ2hlY2tzdW1zGA8gAygLM
  jMucHVsdW1pcnBjLlJlYWRSZXNvdXJjZVJlcXVlc3QuUGx1Z2luQ2hlY2tzdW1zRW50cnlCFOI/ERIPcGx1Z2luQ2hlY2tzdW1zU
  g9wbHVnaW5DaGVja3N1bXMSVgoOc291cmNlUG9zaXRpb24YDiABKAsyGS5wdWx1bWlycGMuU291cmNlUG9zaXRpb25CE+I/EBIOc
  291cmNlUG9zaXRpb25SDnNvdXJjZVBvc2l0aW9uEi8KCnBhY2thZ2VSZWYYECABKAlCD+I/DBIKcGFja2FnZVJlZlIKcGFja2FnZ
  VJlZhpYChRQbHVnaW5DaGVja3N1bXNFbnRyeRIaCgNrZXkYASABKAlCCOI/BRIDa2V5UgNrZXkSIAoFdmFsdWUYAiABKAxCCuI/B
  xIFdmFsdWVSBXZhbHVlOgI4AUoECAsQDFIHYWxpYXNlcyJ8ChRSZWFkUmVzb3VyY2VSZXNwb25zZRIaCgN1cm4YASABKAlCCOI/B
  RIDdXJuUgN1cm4SSAoKcHJvcGVydGllcxgCIAEoCzIXLmdvb2dsZS5wcm90b2J1Zi5TdHJ1Y3RCD+I/DBIKcHJvcGVydGllc1IKc
  HJvcGVydGllcyL9FAoXUmVnaXN0ZXJSZXNvdXJjZVJlcXVlc3QSHQoEdHlwZRgBIAEoCUIJ4j8GEgR0eXBlUgR0eXBlEh0KBG5hb
  WUYAiABKAlCCeI/BhIEbmFtZVIEbmFtZRIjCgZwYXJlbnQYAyABKAlCC+I/CBIGcGFyZW50UgZwYXJlbnQSIwoGY3VzdG9tGAQgA
  SgIQgviPwgSBmN1c3RvbVIGY3VzdG9tEjwKBm9iamVjdBgFIAEoCzIXLmdvb2dsZS5wcm90b2J1Zi5TdHJ1Y3RCC+I/CBIGb2JqZ
  WN0UgZvYmplY3QSJgoHcHJvdGVjdBgGIAEoCEIM4j8JEgdwcm90ZWN0Ugdwcm90ZWN0EjUKDGRlcGVuZGVuY2llcxgHIAMoCUIR4
  j8OEgxkZXBlbmRlbmNpZXNSDGRlcGVuZGVuY2llcxIpCghwcm92aWRlchgIIAEoCUIN4j8KEghwcm92aWRlclIIcHJvdmlkZXISi
  wEKFHByb3BlcnR5RGVwZW5kZW5jaWVzGAkgAygLMjwucHVsdW1pcnBjLlJlZ2lzdGVyUmVzb3VyY2VSZXF1ZXN0LlByb3BlcnR5R
  GVwZW5kZW5jaWVzRW50cnlCGeI/FhIUcHJvcGVydHlEZXBlbmRlbmNpZXNSFHByb3BlcnR5RGVwZW5kZW5jaWVzEkoKE2RlbGV0Z
  UJlZm9yZVJlcGxhY2UYCiABKAhCGOI/FRITZGVsZXRlQmVmb3JlUmVwbGFjZVITZGVsZXRlQmVmb3JlUmVwbGFjZRImCgd2ZXJza
  W9uGAsgASgJQgziPwkSB3ZlcnNpb25SB3ZlcnNpb24SOAoNaWdub3JlQ2hhbmdlcxgMIAMoCUIS4j8PEg1pZ25vcmVDaGFuZ2VzU
  g1pZ25vcmVDaGFuZ2VzEjgKDWFjY2VwdFNlY3JldHMYDSABKAhCEuI/DxINYWNjZXB0U2VjcmV0c1INYWNjZXB0U2VjcmV0cxJWC
  hdhZGRpdGlvbmFsU2VjcmV0T3V0cHV0cxgOIAMoCUIc4j8ZEhdhZGRpdGlvbmFsU2VjcmV0T3V0cHV0c1IXYWRkaXRpb25hbFNlY
  3JldE91dHB1dHMSLAoJYWxpYXNVUk5zGA8gAygJQg7iPwsSCWFsaWFzVVJOc1IJYWxpYXNVUk5zEikKCGltcG9ydElkGBAgASgJQ
  g3iPwoSCGltcG9ydElkUghpbXBvcnRJZBJuCg5jdXN0b21UaW1lb3V0cxgRIAEoCzIxLnB1bHVtaXJwYy5SZWdpc3RlclJlc291c
  mNlUmVxdWVzdC5DdXN0b21UaW1lb3V0c0IT4j8QEg5jdXN0b21UaW1lb3V0c1IOY3VzdG9tVGltZW91dHMSXwoaZGVsZXRlQmVmb
  3JlUmVwbGFjZURlZmluZWQYEiABKAhCH+I/HBIaZGVsZXRlQmVmb3JlUmVwbGFjZURlZmluZWRSGmRlbGV0ZUJlZm9yZVJlcGxhY
  2VEZWZpbmVkElAKFXN1cHBvcnRzUGFydGlhbFZhbHVlcxgTIAEoCEIa4j8XEhVzdXBwb3J0c1BhcnRpYWxWYWx1ZXNSFXN1cHBvc
  nRzUGFydGlhbFZhbHVlcxIjCgZyZW1vdGUYFCABKAhCC+I/CBIGcmVtb3RlUgZyZW1vdGUSPgoPYWNjZXB0UmVzb3VyY2VzGBUgA
  SgIQhTiPxESD2FjY2VwdFJlc291cmNlc1IPYWNjZXB0UmVzb3VyY2VzEl8KCXByb3ZpZGVycxgWIAMoCzIxLnB1bHVtaXJwYy5SZ
  Wdpc3RlclJlc291cmNlUmVxdWVzdC5Qcm92aWRlcnNFbnRyeUIO4j8LEglwcm92aWRlcnNSCXByb3ZpZGVycxJBChByZXBsYWNlT
  25DaGFuZ2VzGBcgAygJQhXiPxISEHJlcGxhY2VPbkNoYW5nZXNSEHJlcGxhY2VPbkNoYW5nZXMSRAoRcGx1Z2luRG93bmxvYWRVU
  kwYGCABKAlCFuI/ExIRcGx1Z2luRG93bmxvYWRVUkxSEXBsdWdpbkRvd25sb2FkVVJMEncKD3BsdWdpbkNoZWNrc3VtcxgeIAMoC
  zI3LnB1bHVtaXJwYy5SZWdpc3RlclJlc291cmNlUmVxdWVzdC5QbHVnaW5DaGVja3N1bXNFbnRyeUIU4j8REg9wbHVnaW5DaGVja
  3N1bXNSD3BsdWdpbkNoZWNrc3VtcxI7Cg5yZXRhaW5PbkRlbGV0ZRgZIAEoCEIT4j8QEg5yZXRhaW5PbkRlbGV0ZVIOcmV0YWluT
  25EZWxldGUSOAoHYWxpYXNlcxgaIAMoCzIQLnB1bHVtaXJwYy5BbGlhc0IM4j8JEgdhbGlhc2VzUgdhbGlhc2VzEjIKC2RlbGV0Z
  WRXaXRoGBsgASgJQhDiPw0SC2RlbGV0ZWRXaXRoUgtkZWxldGVkV2l0aBIvCgphbGlhc1NwZWNzGBwgASgIQg/iPwwSCmFsaWFzU
  3BlY3NSCmFsaWFzU3BlY3MSVgoOc291cmNlUG9zaXRpb24YHSABKAsyGS5wdWx1bWlycGMuU291cmNlUG9zaXRpb25CE+I/EBIOc
  291cmNlUG9zaXRpb25SDnNvdXJjZVBvc2l0aW9uEkQKCnRyYW5zZm9ybXMYHyADKAsyEy5wdWx1bWlycGMuQ2FsbGJhY2tCD+I/D
  BIKdHJhbnNmb3Jtc1IKdHJhbnNmb3JtcxJWChdzdXBwb3J0c1Jlc3VsdFJlcG9ydGluZxggIAEoCEIc4j8ZEhdzdXBwb3J0c1Jlc
  3VsdFJlcG9ydGluZ1IXc3VwcG9ydHNSZXN1bHRSZXBvcnRpbmcSLwoKcGFja2FnZVJlZhghIAEoCUIP4j8MEgpwYWNrYWdlUmVmU
  gpwYWNrYWdlUmVmGjUKFFByb3BlcnR5RGVwZW5kZW5jaWVzEh0KBHVybnMYASADKAlCCeI/BhIEdXJuc1IEdXJucxp/Cg5DdXN0b
  21UaW1lb3V0cxIjCgZjcmVhdGUYASABKAlCC+I/CBIGY3JlYXRlUgZjcmVhdGUSIwoGdXBkYXRlGAIgASgJQgviPwgSBnVwZGF0Z
  VIGdXBkYXRlEiMKBmRlbGV0ZRgDIAEoCUIL4j8IEgZkZWxldGVSBmRlbGV0ZRqWAQoZUHJvcGVydHlEZXBlbmRlbmNpZXNFbnRye
  RIaCgNrZXkYASABKAlCCOI/BRIDa2V5UgNrZXkSWQoFdmFsdWUYAiABKAsyNy5wdWx1bWlycGMuUmVnaXN0ZXJSZXNvdXJjZVJlc
  XVlc3QuUHJvcGVydHlEZXBlbmRlbmNpZXNCCuI/BxIFdmFsdWVSBXZhbHVlOgI4ARpSCg5Qcm92aWRlcnNFbnRyeRIaCgNrZXkYA
  SABKAlCCOI/BRIDa2V5UgNrZXkSIAoFdmFsdWUYAiABKAlCCuI/BxIFdmFsdWVSBXZhbHVlOgI4ARpYChRQbHVnaW5DaGVja3N1b
  XNFbnRyeRIaCgNrZXkYASABKAlCCOI/BRIDa2V5UgNrZXkSIAoFdmFsdWUYAiABKAxCCuI/BxIFdmFsdWVSBXZhbHVlOgI4ASLyB
  AoYUmVnaXN0ZXJSZXNvdXJjZVJlc3BvbnNlEhoKA3VybhgBIAEoCUII4j8FEgN1cm5SA3VybhIXCgJpZBgCIAEoCUIH4j8EEgJpZ
  FICaWQSPAoGb2JqZWN0GAMgASgLMhcuZ29vZ2xlLnByb3RvYnVmLlN0cnVjdEIL4j8IEgZvYmplY3RSBm9iamVjdBIjCgZzdGFib
  GUYBCABKAhCC+I/CBIGc3RhYmxlUgZzdGFibGUSJgoHc3RhYmxlcxgFIAMoCUIM4j8JEgdzdGFibGVzUgdzdGFibGVzEowBChRwc
  m9wZXJ0eURlcGVuZGVuY2llcxgGIAMoCzI9LnB1bHVtaXJwYy5SZWdpc3RlclJlc291cmNlUmVzcG9uc2UuUHJvcGVydHlEZXBlb
  mRlbmNpZXNFbnRyeUIZ4j8WEhRwcm9wZXJ0eURlcGVuZGVuY2llc1IUcHJvcGVydHlEZXBlbmRlbmNpZXMSNgoGcmVzdWx0GAcgA
  SgOMhEucHVsdW1pcnBjLlJlc3VsdEIL4j8IEgZyZXN1bHRSBnJlc3VsdBo1ChRQcm9wZXJ0eURlcGVuZGVuY2llcxIdCgR1cm5zG
  AEgAygJQgniPwYSBHVybnNSBHVybnMalwEKGVByb3BlcnR5RGVwZW5kZW5jaWVzRW50cnkSGgoDa2V5GAEgASgJQgjiPwUSA2tle
  VIDa2V5EloKBXZhbHVlGAIgASgLMjgucHVsdW1pcnBjLlJlZ2lzdGVyUmVzb3VyY2VSZXNwb25zZS5Qcm9wZXJ0eURlcGVuZGVuY
  2llc0IK4j8HEgV2YWx1ZVIFdmFsdWU6AjgBIn0KHlJlZ2lzdGVyUmVzb3VyY2VPdXRwdXRzUmVxdWVzdBIaCgN1cm4YASABKAlCC
  OI/BRIDdXJuUgN1cm4SPwoHb3V0cHV0cxgCIAEoCzIXLmdvb2dsZS5wcm90b2J1Zi5TdHJ1Y3RCDOI/CRIHb3V0cHV0c1IHb3V0c
  HV0cyKeBQoVUmVzb3VyY2VJbnZva2VSZXF1ZXN0EhoKA3RvaxgBIAEoCUII4j8FEgN0b2tSA3RvaxI2CgRhcmdzGAIgASgLMhcuZ
  29vZ2xlLnByb3RvYnVmLlN0cnVjdEIJ4j8GEgRhcmdzUgRhcmdzEikKCHByb3ZpZGVyGAMgASgJQg3iPwoSCHByb3ZpZGVyUghwc
  m92aWRlchImCgd2ZXJzaW9uGAQgASgJQgziPwkSB3ZlcnNpb25SB3ZlcnNpb24SPgoPYWNjZXB0UmVzb3VyY2VzGAUgASgIQhTiP
  xESD2FjY2VwdFJlc291cmNlc1IPYWNjZXB0UmVzb3VyY2VzEkQKEXBsdWdpbkRvd25sb2FkVVJMGAYgASgJQhbiPxMSEXBsdWdpb
  kRvd25sb2FkVVJMUhFwbHVnaW5Eb3dubG9hZFVSTBJ1Cg9wbHVnaW5DaGVja3N1bXMYCCADKAsyNS5wdWx1bWlycGMuUmVzb3VyY
  2VJbnZva2VSZXF1ZXN0LlBsdWdpbkNoZWNrc3Vtc0VudHJ5QhTiPxESD3BsdWdpbkNoZWNrc3Vtc1IPcGx1Z2luQ2hlY2tzdW1zE
  lYKDnNvdXJjZVBvc2l0aW9uGAcgASgLMhkucHVsdW1pcnBjLlNvdXJjZVBvc2l0aW9uQhPiPxASDnNvdXJjZVBvc2l0aW9uUg5zb
  3VyY2VQb3NpdGlvbhIvCgpwYWNrYWdlUmVmGAkgASgJQg/iPwwSCnBhY2thZ2VSZWZSCnBhY2thZ2VSZWYaWAoUUGx1Z2luQ2hlY
  2tzdW1zRW50cnkSGgoDa2V5GAEgASgJQgjiPwUSA2tleVIDa2V5EiAKBXZhbHVlGAIgASgMQgriPwcSBXZhbHVlUgV2YWx1ZToCO
  AEioQgKE1Jlc291cmNlQ2FsbFJlcXVlc3QSGgoDdG9rGAEgASgJQgjiPwUSA3Rva1IDdG9rEjYKBGFyZ3MYAiABKAsyFy5nb29nb
  GUucHJvdG9idWYuU3RydWN0QgniPwYSBGFyZ3NSBGFyZ3MScwoPYXJnRGVwZW5kZW5jaWVzGAMgAygLMjMucHVsdW1pcnBjLlJlc
  291cmNlQ2FsbFJlcXVlc3QuQXJnRGVwZW5kZW5jaWVzRW50cnlCFOI/ERIPYXJnRGVwZW5kZW5jaWVzUg9hcmdEZXBlbmRlbmNpZ
  XMSKQoIcHJvdmlkZXIYBCABKAlCDeI/ChIIcHJvdmlkZXJSCHByb3ZpZGVyEiYKB3ZlcnNpb24YBSABKAlCDOI/CRIHdmVyc2lvb
  lIHdmVyc2lvbhJEChFwbHVnaW5Eb3dubG9hZFVSTBgNIAEoCUIW4j8TEhFwbHVnaW5Eb3dubG9hZFVSTFIRcGx1Z2luRG93bmxvY
  WRVUkwScwoPcGx1Z2luQ2hlY2tzdW1zGBAgAygLMjMucHVsdW1pcnBjLlJlc291cmNlQ2FsbFJlcXVlc3QuUGx1Z2luQ2hlY2tzd
  W1zRW50cnlCFOI/ERIPcGx1Z2luQ2hlY2tzdW1zUg9wbHVnaW5DaGVja3N1bXMSVgoOc291cmNlUG9zaXRpb24YDyABKAsyGS5wd
  Wx1bWlycGMuU291cmNlUG9zaXRpb25CE+I/EBIOc291cmNlUG9zaXRpb25SDnNvdXJjZVBvc2l0aW9uEi8KCnBhY2thZ2VSZWYYE
  SABKAlCD+I/DBIKcGFja2FnZVJlZlIKcGFja2FnZVJlZho1ChRBcmd1bWVudERlcGVuZGVuY2llcxIdCgR1cm5zGAEgAygJQgniP
  wYSBHVybnNSBHVybnMajQEKFEFyZ0RlcGVuZGVuY2llc0VudHJ5EhoKA2tleRgBIAEoCUII4j8FEgNrZXlSA2tleRJVCgV2YWx1Z
  RgCIAEoCzIzLnB1bHVtaXJwYy5SZXNvdXJjZUNhbGxSZXF1ZXN0LkFyZ3VtZW50RGVwZW5kZW5jaWVzQgriPwcSBXZhbHVlUgV2Y
  Wx1ZToCOAEaWAoUUGx1Z2luQ2hlY2tzdW1zRW50cnkSGgoDa2V5GAEgASgJQgjiPwUSA2tleVIDa2V5EiAKBXZhbHVlGAIgASgMQ
  griPwcSBXZhbHVlUgV2YWx1ZToCOAFKBAgGEAdKBAgHEAhKBAgIEAlKBAgJEApKBAgKEAtKBAgLEAxKBAgMEA1KBAgOEA9SB3Byb
  2plY3RSBXN0YWNrUgZjb25maWdSEGNvbmZpZ1NlY3JldEtleXNSBmRyeVJ1blIIcGFyYWxsZWxSD21vbml0b3JFbmRwb2ludFIMb
  3JnYW5pemF0aW9uIv0JChhUcmFuc2Zvcm1SZXNvdXJjZU9wdGlvbnMSLQoKZGVwZW5kc19vbhgBIAMoCUIO4j8LEglkZXBlbmRzT
  25SCWRlcGVuZHNPbhImCgdwcm90ZWN0GAIgASgIQgziPwkSB3Byb3RlY3RSB3Byb3RlY3QSOQoOaWdub3JlX2NoYW5nZXMYAyADK
  AlCEuI/DxINaWdub3JlQ2hhbmdlc1INaWdub3JlQ2hhbmdlcxJDChJyZXBsYWNlX29uX2NoYW5nZXMYBCADKAlCFeI/EhIQcmVwb
  GFjZU9uQ2hhbmdlc1IQcmVwbGFjZU9uQ2hhbmdlcxImCgd2ZXJzaW9uGAUgASgJQgziPwkSB3ZlcnNpb25SB3ZlcnNpb24SOAoHY
  WxpYXNlcxgGIAMoCzIQLnB1bHVtaXJwYy5BbGlhc0IM4j8JEgdhbGlhc2VzUgdhbGlhc2VzEikKCHByb3ZpZGVyGAcgASgJQg3iP
  woSCHByb3ZpZGVyUghwcm92aWRlchJvCg9jdXN0b21fdGltZW91dHMYCCABKAsyMS5wdWx1bWlycGMuUmVnaXN0ZXJSZXNvdXJjZ
  VJlcXVlc3QuQ3VzdG9tVGltZW91dHNCE+I/EBIOY3VzdG9tVGltZW91dHNSDmN1c3RvbVRpbWVvdXRzEkYKE3BsdWdpbl9kb3dub
  G9hZF91cmwYCSABKAlCFuI/ExIRcGx1Z2luRG93bmxvYWRVcmxSEXBsdWdpbkRvd25sb2FkVXJsEj0KEHJldGFpbl9vbl9kZWxld
  GUYCiABKAhCE+I/EBIOcmV0YWluT25EZWxldGVSDnJldGFpbk9uRGVsZXRlEjMKDGRlbGV0ZWRfd2l0aBgLIAEoCUIQ4j8NEgtkZ
  WxldGVkV2l0aFILZGVsZXRlZFdpdGgSUQoVZGVsZXRlX2JlZm9yZV9yZXBsYWNlGAwgASgIQhjiPxUSE2RlbGV0ZUJlZm9yZVJlc
  GxhY2VIAFITZGVsZXRlQmVmb3JlUmVwbGFjZYgBARJYChlhZGRpdGlvbmFsX3NlY3JldF9vdXRwdXRzGA0gAygJQhziPxkSF2FkZ
  Gl0aW9uYWxTZWNyZXRPdXRwdXRzUhdhZGRpdGlvbmFsU2VjcmV0T3V0cHV0cxJgCglwcm92aWRlcnMYDiADKAsyMi5wdWx1bWlyc
  GMuVHJhbnNmb3JtUmVzb3VyY2VPcHRpb25zLlByb3ZpZGVyc0VudHJ5Qg7iPwsSCXByb3ZpZGVyc1IJcHJvdmlkZXJzEnkKEHBsd
  Wdpbl9jaGVja3N1bXMYDyADKAsyOC5wdWx1bWlycGMuVHJhbnNmb3JtUmVzb3VyY2VPcHRpb25zLlBsdWdpbkNoZWNrc3Vtc0Vud
  HJ5QhTiPxESD3BsdWdpbkNoZWNrc3Vtc1IPcGx1Z2luQ2hlY2tzdW1zGlIKDlByb3ZpZGVyc0VudHJ5EhoKA2tleRgBIAEoCUII4
  j8FEgNrZXlSA2tleRIgCgV2YWx1ZRgCIAEoCUIK4j8HEgV2YWx1ZVIFdmFsdWU6AjgBGlgKFFBsdWdpbkNoZWNrc3Vtc0VudHJ5E
  hoKA2tleRgBIAEoCUII4j8FEgNrZXlSA2tleRIgCgV2YWx1ZRgCIAEoDEIK4j8HEgV2YWx1ZVIFdmFsdWU6AjgBQhgKFl9kZWxld
  GVfYmVmb3JlX3JlcGxhY2UisQIKEFRyYW5zZm9ybVJlcXVlc3QSHQoEdHlwZRgBIAEoCUIJ4j8GEgR0eXBlUgR0eXBlEh0KBG5hb
  WUYAiABKAlCCeI/BhIEbmFtZVIEbmFtZRIjCgZjdXN0b20YAyABKAhCC+I/CBIGY3VzdG9tUgZjdXN0b20SIwoGcGFyZW50GAQgA
  SgJQgviPwgSBnBhcmVudFIGcGFyZW50EkgKCnByb3BlcnRpZXMYBSABKAsyFy5nb29nbGUucHJvdG9idWYuU3RydWN0Qg/iPwwSC
  nByb3BlcnRpZXNSCnByb3BlcnRpZXMSSwoHb3B0aW9ucxgGIAEoCzIjLnB1bHVtaXJwYy5UcmFuc2Zvcm1SZXNvdXJjZU9wdGlvb
  nNCDOI/CRIHb3B0aW9uc1IHb3B0aW9ucyKqAQoRVHJhbnNmb3JtUmVzcG9uc2USSAoKcHJvcGVydGllcxgBIAEoCzIXLmdvb2dsZ
  S5wcm90b2J1Zi5TdHJ1Y3RCD+I/DBIKcHJvcGVydGllc1IKcHJvcGVydGllcxJLCgdvcHRpb25zGAIgASgLMiMucHVsdW1pcnBjL
  lRyYW5zZm9ybVJlc291cmNlT3B0aW9uc0IM4j8JEgdvcHRpb25zUgdvcHRpb25zIr0BChZUcmFuc2Zvcm1JbnZva2VSZXF1ZXN0E
  iAKBXRva2VuGAEgASgJQgriPwcSBXRva2VuUgV0b2tlbhI2CgRhcmdzGAIgASgLMhcuZ29vZ2xlLnByb3RvYnVmLlN0cnVjdEIJ4
  j8GEgRhcmdzUgRhcmdzEkkKB29wdGlvbnMYAyABKAsyIS5wdWx1bWlycGMuVHJhbnNmb3JtSW52b2tlT3B0aW9uc0IM4j8JEgdvc
  HRpb25zUgdvcHRpb25zIpwBChdUcmFuc2Zvcm1JbnZva2VSZXNwb25zZRI2CgRhcmdzGAEgASgLMhcuZ29vZ2xlLnByb3RvYnVmL
  lN0cnVjdEIJ4j8GEgRhcmdzUgRhcmdzEkkKB29wdGlvbnMYAiABKAsyIS5wdWx1bWlycGMuVHJhbnNmb3JtSW52b2tlT3B0aW9uc
  0IM4j8JEgdvcHRpb25zUgdvcHRpb25zIoYDChZUcmFuc2Zvcm1JbnZva2VPcHRpb25zEikKCHByb3ZpZGVyGAEgASgJQg3iPwoSC
  HByb3ZpZGVyUghwcm92aWRlchJGChNwbHVnaW5fZG93bmxvYWRfdXJsGAIgASgJQhbiPxMSEXBsdWdpbkRvd25sb2FkVXJsUhFwb
  HVnaW5Eb3dubG9hZFVybBImCgd2ZXJzaW9uGAMgASgJQgziPwkSB3ZlcnNpb25SB3ZlcnNpb24SdwoQcGx1Z2luX2NoZWNrc3Vtc
  xgEIAMoCzI2LnB1bHVtaXJwYy5UcmFuc2Zvcm1JbnZva2VPcHRpb25zLlBsdWdpbkNoZWNrc3Vtc0VudHJ5QhTiPxESD3BsdWdpb
  kNoZWNrc3Vtc1IPcGx1Z2luQ2hlY2tzdW1zGlgKFFBsdWdpbkNoZWNrc3Vtc0VudHJ5EhoKA2tleRgBIAEoCUII4j8FEgNrZXlSA
  2tleRIgCgV2YWx1ZRgCIAEoDEIK4j8HEgV2YWx1ZVIFdmFsdWU6AjgBIqgDChZSZWdpc3RlclBhY2thZ2VSZXF1ZXN0Eh0KBG5hb
  WUYASABKAlCCeI/BhIEbmFtZVIEbmFtZRImCgd2ZXJzaW9uGAIgASgJQgziPwkSB3ZlcnNpb25SB3ZlcnNpb24SMwoMZG93bmxvY
  WRfdXJsGAMgASgJQhDiPw0SC2Rvd25sb2FkVXJsUgtkb3dubG9hZFVybBJeCgljaGVja3N1bXMYBCADKAsyMC5wdWx1bWlycGMuU
  mVnaXN0ZXJQYWNrYWdlUmVxdWVzdC5DaGVja3N1bXNFbnRyeUIO4j8LEgljaGVja3N1bXNSCWNoZWNrc3VtcxJeChBwYXJhbWV0Z
  XJpemF0aW9uGAUgASgLMhsucHVsdW1pcnBjLlBhcmFtZXRlcml6YXRpb25CFeI/EhIQcGFyYW1ldGVyaXphdGlvblIQcGFyYW1ld
  GVyaXphdGlvbhpSCg5DaGVja3N1bXNFbnRyeRIaCgNrZXkYASABKAlCCOI/BRIDa2V5UgNrZXkSIAoFdmFsdWUYAiABKAxCCuI/B
  xIFdmFsdWVSBXZhbHVlOgI4ASI1ChdSZWdpc3RlclBhY2thZ2VSZXNwb25zZRIaCgNyZWYYASABKAlCCOI/BRIDcmVmUgNyZWYie
  woQUGFyYW1ldGVyaXphdGlvbhIdCgRuYW1lGAEgASgJQgniPwYSBG5hbWVSBG5hbWUSJgoHdmVyc2lvbhgCIAEoCUIM4j8JEgd2Z
  XJzaW9uUgd2ZXJzaW9uEiAKBXZhbHVlGAMgASgMQgriPwcSBXZhbHVlUgV2YWx1ZSpNCgZSZXN1bHQSGQoHU1VDQ0VTUxAAGgziP
  wkSB1NVQ0NFU1MSEwoERkFJTBABGgniPwYSBEZBSUwSEwoEU0tJUBACGgniPwYSBFNLSVAy0AYKD1Jlc291cmNlTW9uaXRvchJaC
  g9TdXBwb3J0c0ZlYXR1cmUSIS5wdWx1bWlycGMuU3VwcG9ydHNGZWF0dXJlUmVxdWVzdBoiLnB1bHVtaXJwYy5TdXBwb3J0c0ZlY
  XR1cmVSZXNwb25zZSIAEkcKBkludm9rZRIgLnB1bHVtaXJwYy5SZXNvdXJjZUludm9rZVJlcXVlc3QaGS5wdWx1bWlycGMuSW52b
  2tlUmVzcG9uc2UiABJPCgxTdHJlYW1JbnZva2USIC5wdWx1bWlycGMuUmVzb3VyY2VJbnZva2VSZXF1ZXN0GhkucHVsdW1pcnBjL
  kludm9rZVJlc3BvbnNlIgAwARJBCgRDYWxsEh4ucHVsdW1pcnBjLlJlc291cmNlQ2FsbFJlcXVlc3QaFy5wdWx1bWlycGMuQ2Fsb
  FJlc3BvbnNlIgASUQoMUmVhZFJlc291cmNlEh4ucHVsdW1pcnBjLlJlYWRSZXNvdXJjZVJlcXVlc3QaHy5wdWx1bWlycGMuUmVhZ
  FJlc291cmNlUmVzcG9uc2UiABJdChBSZWdpc3RlclJlc291cmNlEiIucHVsdW1pcnBjLlJlZ2lzdGVyUmVzb3VyY2VSZXF1ZXN0G
  iMucHVsdW1pcnBjLlJlZ2lzdGVyUmVzb3VyY2VSZXNwb25zZSIAEl4KF1JlZ2lzdGVyUmVzb3VyY2VPdXRwdXRzEikucHVsdW1pc
  nBjLlJlZ2lzdGVyUmVzb3VyY2VPdXRwdXRzUmVxdWVzdBoWLmdvb2dsZS5wcm90b2J1Zi5FbXB0eSIAEkcKFlJlZ2lzdGVyU3RhY
  2tUcmFuc2Zvcm0SEy5wdWx1bWlycGMuQ2FsbGJhY2saFi5nb29nbGUucHJvdG9idWYuRW1wdHkiABJNChxSZWdpc3RlclN0YWNrS
  W52b2tlVHJhbnNmb3JtEhMucHVsdW1pcnBjLkNhbGxiYWNrGhYuZ29vZ2xlLnByb3RvYnVmLkVtcHR5IgASWgoPUmVnaXN0ZXJQY
  WNrYWdlEiEucHVsdW1pcnBjLlJlZ2lzdGVyUGFja2FnZVJlcXVlc3QaIi5wdWx1bWlycGMuUmVnaXN0ZXJQYWNrYWdlUmVzcG9uc
  2UiAEI0WjJnaXRodWIuY29tL3B1bHVtaS9wdWx1bWkvc2RrL3YzL3Byb3RvL2dvO3B1bHVtaXJwY2IGcHJvdG8z"""
      ).mkString)
  lazy val scalaDescriptor: _root_.scalapb.descriptors.FileDescriptor = {
    val scalaProto = com.google.protobuf.descriptor.FileDescriptorProto.parseFrom(ProtoBytes)
    _root_.scalapb.descriptors.FileDescriptor.buildFrom(scalaProto, dependencies.map(_.scalaDescriptor))
  }
  lazy val javaDescriptor: com.google.protobuf.Descriptors.FileDescriptor = {
    val javaProto = com.google.protobuf.DescriptorProtos.FileDescriptorProto.parseFrom(ProtoBytes)
    com.google.protobuf.Descriptors.FileDescriptor.buildFrom(javaProto, _root_.scala.Array(
      com.google.protobuf.empty.EmptyProto.javaDescriptor,
      com.google.protobuf.struct.StructProto.javaDescriptor,
      pulumirpc.provider.ProviderProto.javaDescriptor,
      pulumirpc.alias.AliasProto.javaDescriptor,
      pulumirpc.source.SourceProto.javaDescriptor,
      pulumirpc.callback.CallbackProto.javaDescriptor
    ))
  }
  @deprecated("Use javaDescriptor instead. In a future version this will refer to scalaDescriptor.", "ScalaPB 0.5.47")
  def descriptor: com.google.protobuf.Descriptors.FileDescriptor = javaDescriptor
}