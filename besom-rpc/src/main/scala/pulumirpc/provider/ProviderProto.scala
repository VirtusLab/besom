// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!

package pulumirpc.provider

object ProviderProto extends _root_.scalapb.GeneratedFileObject {
  lazy val dependencies: Seq[_root_.scalapb.GeneratedFileObject] = Seq(
    pulumirpc.plugin.PluginProto,
    com.google.protobuf.empty.EmptyProto,
    com.google.protobuf.struct.StructProto
  )
  lazy val messagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[? <: _root_.scalapb.GeneratedMessage]] =
    Seq[_root_.scalapb.GeneratedMessageCompanion[? <: _root_.scalapb.GeneratedMessage]](
      pulumirpc.provider.ParameterizeRequest,
      pulumirpc.provider.ParameterizeResponse,
      pulumirpc.provider.GetSchemaRequest,
      pulumirpc.provider.GetSchemaResponse,
      pulumirpc.provider.ConfigureRequest,
      pulumirpc.provider.ConfigureResponse,
      pulumirpc.provider.ConfigureErrorMissingKeys,
      pulumirpc.provider.InvokeRequest,
      pulumirpc.provider.InvokeResponse,
      pulumirpc.provider.CallRequest,
      pulumirpc.provider.CallResponse,
      pulumirpc.provider.CheckRequest,
      pulumirpc.provider.CheckResponse,
      pulumirpc.provider.CheckFailure,
      pulumirpc.provider.DiffRequest,
      pulumirpc.provider.PropertyDiff,
      pulumirpc.provider.DiffResponse,
      pulumirpc.provider.CreateRequest,
      pulumirpc.provider.CreateResponse,
      pulumirpc.provider.ReadRequest,
      pulumirpc.provider.ReadResponse,
      pulumirpc.provider.UpdateRequest,
      pulumirpc.provider.UpdateResponse,
      pulumirpc.provider.DeleteRequest,
      pulumirpc.provider.ConstructRequest,
      pulumirpc.provider.ConstructResponse,
      pulumirpc.provider.ErrorResourceInitFailed,
      pulumirpc.provider.GetMappingRequest,
      pulumirpc.provider.GetMappingResponse,
      pulumirpc.provider.GetMappingsRequest,
      pulumirpc.provider.GetMappingsResponse
    )
  private lazy val ProtoBytes: _root_.scala.Array[Byte] =
      scalapb.Encoding.fromBase64(scala.collection.immutable.Seq(
  """ChVwdWx1bWkvcHJvdmlkZXIucHJvdG8SCXB1bHVtaXJwYxoTcHVsdW1pL3BsdWdpbi5wcm90bxobZ29vZ2xlL3Byb3RvYnVmL
  2VtcHR5LnByb3RvGhxnb29nbGUvcHJvdG9idWYvc3RydWN0LnByb3RvIvUCChNQYXJhbWV0ZXJpemVSZXF1ZXN0Ek4KBGFyZ3MYA
  SABKAsyLS5wdWx1bWlycGMuUGFyYW1ldGVyaXplUmVxdWVzdC5QYXJhbWV0ZXJzQXJnc0IJ4j8GEgRhcmdzSABSBGFyZ3MSUwoFd
  mFsdWUYAiABKAsyLi5wdWx1bWlycGMuUGFyYW1ldGVyaXplUmVxdWVzdC5QYXJhbWV0ZXJzVmFsdWVCC+I/CBIGX3ZhbHVlSABSB
  XZhbHVlGi8KDlBhcmFtZXRlcnNBcmdzEh0KBGFyZ3MYASADKAlCCeI/BhIEYXJnc1IEYXJncxp6Cg9QYXJhbWV0ZXJzVmFsdWUSH
  QoEbmFtZRgBIAEoCUIJ4j8GEgRuYW1lUgRuYW1lEiYKB3ZlcnNpb24YAiABKAlCDOI/CRIHdmVyc2lvblIHdmVyc2lvbhIgCgV2Y
  Wx1ZRgDIAEoDEIK4j8HEgV2YWx1ZVIFdmFsdWVCDAoKcGFyYW1ldGVycyJdChRQYXJhbWV0ZXJpemVSZXNwb25zZRIdCgRuYW1lG
  AEgASgJQgniPwYSBG5hbWVSBG5hbWUSJgoHdmVyc2lvbhgCIAEoCUIM4j8JEgd2ZXJzaW9uUgd2ZXJzaW9uIr8BChBHZXRTY2hlb
  WFSZXF1ZXN0EiYKB3ZlcnNpb24YASABKAVCDOI/CRIHdmVyc2lvblIHdmVyc2lvbhI8Cg9zdWJwYWNrYWdlX25hbWUYAiABKAlCE
  +I/EBIOc3VicGFja2FnZU5hbWVSDnN1YnBhY2thZ2VOYW1lEkUKEnN1YnBhY2thZ2VfdmVyc2lvbhgDIAEoCUIW4j8TEhFzdWJwY
  WNrYWdlVmVyc2lvblIRc3VicGFja2FnZVZlcnNpb24iOAoRR2V0U2NoZW1hUmVzcG9uc2USIwoGc2NoZW1hGAEgASgJQgviPwgSB
  nNjaGVtYVIGc2NoZW1hIooEChBDb25maWd1cmVSZXF1ZXN0ElgKCXZhcmlhYmxlcxgBIAMoCzIqLnB1bHVtaXJwYy5Db25maWd1c
  mVSZXF1ZXN0LlZhcmlhYmxlc0VudHJ5Qg7iPwsSCXZhcmlhYmxlc1IJdmFyaWFibGVzEjYKBGFyZ3MYAiABKAsyFy5nb29nbGUuc
  HJvdG9idWYuU3RydWN0QgniPwYSBGFyZ3NSBGFyZ3MSOAoNYWNjZXB0U2VjcmV0cxgDIAEoCEIS4j8PEg1hY2NlcHRTZWNyZXRzU
  g1hY2NlcHRTZWNyZXRzEj4KD2FjY2VwdFJlc291cmNlcxgEIAEoCEIU4j8REg9hY2NlcHRSZXNvdXJjZXNSD2FjY2VwdFJlc291c
  mNlcxI9ChBzZW5kc19vbGRfaW5wdXRzGAUgASgIQhPiPxASDnNlbmRzT2xkSW5wdXRzUg5zZW5kc09sZElucHV0cxJXChpzZW5kc
  19vbGRfaW5wdXRzX3RvX2RlbGV0ZRgGIAEoCEIb4j8YEhZzZW5kc09sZElucHV0c1RvRGVsZXRlUhZzZW5kc09sZElucHV0c1RvR
  GVsZXRlGlIKDlZhcmlhYmxlc0VudHJ5EhoKA2tleRgBIAEoCUII4j8FEgNrZXlSA2tleRIgCgV2YWx1ZRgCIAEoCUIK4j8HEgV2Y
  Wx1ZVIFdmFsdWU6AjgBIocCChFDb25maWd1cmVSZXNwb25zZRI4Cg1hY2NlcHRTZWNyZXRzGAEgASgIQhLiPw8SDWFjY2VwdFNlY
  3JldHNSDWFjY2VwdFNlY3JldHMSPgoPc3VwcG9ydHNQcmV2aWV3GAIgASgIQhTiPxESD3N1cHBvcnRzUHJldmlld1IPc3VwcG9yd
  HNQcmV2aWV3Ej4KD2FjY2VwdFJlc291cmNlcxgDIAEoCEIU4j8REg9hY2NlcHRSZXNvdXJjZXNSD2FjY2VwdFJlc291cmNlcxI4C
  g1hY2NlcHRPdXRwdXRzGAQgASgIQhLiPw8SDWFjY2VwdE91dHB1dHNSDWFjY2VwdE91dHB1dHMi4QEKGUNvbmZpZ3VyZUVycm9yT
  Wlzc2luZ0tleXMSYwoLbWlzc2luZ0tleXMYASADKAsyLy5wdWx1bWlycGMuQ29uZmlndXJlRXJyb3JNaXNzaW5nS2V5cy5NaXNza
  W5nS2V5QhDiPw0SC21pc3NpbmdLZXlzUgttaXNzaW5nS2V5cxpfCgpNaXNzaW5nS2V5Eh0KBG5hbWUYASABKAlCCeI/BhIEbmFtZ
  VIEbmFtZRIyCgtkZXNjcmlwdGlvbhgCIAEoCUIQ4j8NEgtkZXNjcmlwdGlvblILZGVzY3JpcHRpb24ioAEKDUludm9rZVJlcXVlc
  3QSGgoDdG9rGAEgASgJQgjiPwUSA3Rva1IDdG9rEjYKBGFyZ3MYAiABKAsyFy5nb29nbGUucHJvdG9idWYuU3RydWN0QgniPwYSB
  GFyZ3NSBGFyZ3NKBAgDEAdSCHByb3ZpZGVyUgd2ZXJzaW9uUg9hY2NlcHRSZXNvdXJjZXNSEXBsdWdpbkRvd25sb2FkVVJMIpIBC
  g5JbnZva2VSZXNwb25zZRI8CgZyZXR1cm4YASABKAsyFy5nb29nbGUucHJvdG9idWYuU3RydWN0QgviPwgSBnJldHVyblIGcmV0d
  XJuEkIKCGZhaWx1cmVzGAIgAygLMhcucHVsdW1pcnBjLkNoZWNrRmFpbHVyZUIN4j8KEghmYWlsdXJlc1IIZmFpbHVyZXMirggKC
  0NhbGxSZXF1ZXN0EhoKA3RvaxgBIAEoCUII4j8FEgN0b2tSA3RvaxI2CgRhcmdzGAIgASgLMhcuZ29vZ2xlLnByb3RvYnVmLlN0c
  nVjdEIJ4j8GEgRhcmdzUgRhcmdzEmsKD2FyZ0RlcGVuZGVuY2llcxgDIAMoCzIrLnB1bHVtaXJwYy5DYWxsUmVxdWVzdC5BcmdEZ
  XBlbmRlbmNpZXNFbnRyeUIU4j8REg9hcmdEZXBlbmRlbmNpZXNSD2FyZ0RlcGVuZGVuY2llcxImCgdwcm9qZWN0GAYgASgJQgziP
  wkSB3Byb2plY3RSB3Byb2plY3QSIAoFc3RhY2sYByABKAlCCuI/BxIFc3RhY2tSBXN0YWNrEkcKBmNvbmZpZxgIIAMoCzIiLnB1b
  HVtaXJwYy5DYWxsUmVxdWVzdC5Db25maWdFbnRyeUIL4j8IEgZjb25maWdSBmNvbmZpZxJBChBjb25maWdTZWNyZXRLZXlzGAkgA
  ygJQhXiPxISEGNvbmZpZ1NlY3JldEtleXNSEGNvbmZpZ1NlY3JldEtleXMSIwoGZHJ5UnVuGAogASgIQgviPwgSBmRyeVJ1blIGZ
  HJ5UnVuEikKCHBhcmFsbGVsGAsgASgFQg3iPwoSCHBhcmFsbGVsUghwYXJhbGxlbBI+Cg9tb25pdG9yRW5kcG9pbnQYDCABKAlCF
  OI/ERIPbW9uaXRvckVuZHBvaW50Ug9tb25pdG9yRW5kcG9pbnQSNQoMb3JnYW5pemF0aW9uGA4gASgJQhHiPw4SDG9yZ2FuaXphd
  GlvblIMb3JnYW5pemF0aW9uEkwKFWFjY2VwdHNfb3V0cHV0X3ZhbHVlcxgRIAEoCEIY4j8VEhNhY2NlcHRzT3V0cHV0VmFsdWVzU
  hNhY2NlcHRzT3V0cHV0VmFsdWVzGjUKFEFyZ3VtZW50RGVwZW5kZW5jaWVzEh0KBHVybnMYASADKAlCCeI/BhIEdXJuc1IEdXJuc
  xqFAQoUQXJnRGVwZW5kZW5jaWVzRW50cnkSGgoDa2V5GAEgASgJQgjiPwUSA2tleVIDa2V5Ek0KBXZhbHVlGAIgASgLMisucHVsd
  W1pcnBjLkNhbGxSZXF1ZXN0LkFyZ3VtZW50RGVwZW5kZW5jaWVzQgriPwcSBXZhbHVlUgV2YWx1ZToCOAEaTwoLQ29uZmlnRW50c
  nkSGgoDa2V5GAEgASgJQgjiPwUSA2tleVIDa2V5EiAKBXZhbHVlGAIgASgJQgriPwcSBXZhbHVlUgV2YWx1ZToCOAFKBAgEEAVKB
  AgFEAZKBAgNEA5KBAgQEBFKBAgPEBBSCHByb3ZpZGVyUgd2ZXJzaW9uUhFwbHVnaW5Eb3dubG9hZFVSTFIPcGx1Z2luQ2hlY2tzd
  W1zUg5zb3VyY2VQb3NpdGlvbiLJAwoMQ2FsbFJlc3BvbnNlEjwKBnJldHVybhgBIAEoCzIXLmdvb2dsZS5wcm90b2J1Zi5TdHJ1Y
  3RCC+I/CBIGcmV0dXJuUgZyZXR1cm4SQgoIZmFpbHVyZXMYAyADKAsyFy5wdWx1bWlycGMuQ2hlY2tGYWlsdXJlQg3iPwoSCGZha
  Wx1cmVzUghmYWlsdXJlcxJ4ChJyZXR1cm5EZXBlbmRlbmNpZXMYAiADKAsyLy5wdWx1bWlycGMuQ2FsbFJlc3BvbnNlLlJldHVyb
  kRlcGVuZGVuY2llc0VudHJ5QhfiPxQSEnJldHVybkRlcGVuZGVuY2llc1IScmV0dXJuRGVwZW5kZW5jaWVzGjMKElJldHVybkRlc
  GVuZGVuY2llcxIdCgR1cm5zGAEgAygJQgniPwYSBHVybnNSBHVybnMahwEKF1JldHVybkRlcGVuZGVuY2llc0VudHJ5EhoKA2tle
  RgBIAEoCUII4j8FEgNrZXlSA2tleRJMCgV2YWx1ZRgCIAEoCzIqLnB1bHVtaXJwYy5DYWxsUmVzcG9uc2UuUmV0dXJuRGVwZW5kZ
  W5jaWVzQgriPwcSBXZhbHVlUgV2YWx1ZToCOAEinwIKDENoZWNrUmVxdWVzdBIaCgN1cm4YASABKAlCCOI/BRIDdXJuUgN1cm4SN
  goEb2xkcxgCIAEoCzIXLmdvb2dsZS5wcm90b2J1Zi5TdHJ1Y3RCCeI/BhIEb2xkc1IEb2xkcxI2CgRuZXdzGAMgASgLMhcuZ29vZ
  2xlLnByb3RvYnVmLlN0cnVjdEIJ4j8GEgRuZXdzUgRuZXdzEi8KCnJhbmRvbVNlZWQYBSABKAxCD+I/DBIKcmFuZG9tU2VlZFIKc
  mFuZG9tU2VlZBIdCgRuYW1lGAYgASgJQgniPwYSBG5hbWVSBG5hbWUSHQoEdHlwZRgHIAEoCUIJ4j8GEgR0eXBlUgR0eXBlSgQIB
  BAFUg5zZXF1ZW5jZU51bWJlciKRAQoNQ2hlY2tSZXNwb25zZRI8CgZpbnB1dHMYASABKAsyFy5nb29nbGUucHJvdG9idWYuU3Ryd
  WN0QgviPwgSBmlucHV0c1IGaW5wdXRzEkIKCGZhaWx1cmVzGAIgAygLMhcucHVsdW1pcnBjLkNoZWNrRmFpbHVyZUIN4j8KEghmY
  WlsdXJlc1IIZmFpbHVyZXMiXgoMQ2hlY2tGYWlsdXJlEikKCHByb3BlcnR5GAEgASgJQg3iPwoSCHByb3BlcnR5Ughwcm9wZXJ0e
  RIjCgZyZWFzb24YAiABKAlCC+I/CBIGcmVhc29uUgZyZWFzb24i8gIKC0RpZmZSZXF1ZXN0EhcKAmlkGAEgASgJQgfiPwQSAmlkU
  gJpZBIaCgN1cm4YAiABKAlCCOI/BRIDdXJuUgN1cm4SNgoEb2xkcxgDIAEoCzIXLmdvb2dsZS5wcm90b2J1Zi5TdHJ1Y3RCCeI/B
  hIEb2xkc1IEb2xkcxI2CgRuZXdzGAQgASgLMhcuZ29vZ2xlLnByb3RvYnVmLlN0cnVjdEIJ4j8GEgRuZXdzUgRuZXdzEjgKDWlnb
  m9yZUNoYW5nZXMYBSADKAlCEuI/DxINaWdub3JlQ2hhbmdlc1INaWdub3JlQ2hhbmdlcxJGCgpvbGRfaW5wdXRzGAYgASgLMhcuZ
  29vZ2xlLnByb3RvYnVmLlN0cnVjdEIO4j8LEglvbGRJbnB1dHNSCW9sZElucHV0cxIdCgRuYW1lGAcgASgJQgniPwYSBG5hbWVSB
  G5hbWUSHQoEdHlwZRgIIAEoCUIJ4j8GEgR0eXBlUgR0eXBlIrwCCgxQcm9wZXJ0eURpZmYSOwoEa2luZBgBIAEoDjIcLnB1bHVta
  XJwYy5Qcm9wZXJ0eURpZmYuS2luZEIJ4j8GEgRraW5kUgRraW5kEiwKCWlucHV0RGlmZhgCIAEoCEIO4j8LEglpbnB1dERpZmZSC
  WlucHV0RGlmZiLAAQoES2luZBIRCgNBREQQABoI4j8FEgNBREQSIQoLQUREX1JFUExBQ0UQARoQ4j8NEgtBRERfUkVQTEFDRRIXC
  gZERUxFVEUQAhoL4j8IEgZERUxFVEUSJwoOREVMRVRFX1JFUExBQ0UQAxoT4j8QEg5ERUxFVEVfUkVQTEFDRRIXCgZVUERBVEUQB
  BoL4j8IEgZVUERBVEUSJwoOVVBEQVRFX1JFUExBQ0UQBRoT4j8QEg5VUERBVEVfUkVQTEFDRSKgBQoMRGlmZlJlc3BvbnNlEikKC
  HJlcGxhY2VzGAEgAygJQg3iPwoSCHJlcGxhY2VzUghyZXBsYWNlcxImCgdzdGFibGVzGAIgAygJQgziPwkSB3N0YWJsZXNSB3N0Y
  WJsZXMSSgoTZGVsZXRlQmVmb3JlUmVwbGFjZRgDIAEoCEIY4j8VEhNkZWxldGVCZWZvcmVSZXBsYWNlUhNkZWxldGVCZWZvcmVSZ
  XBsYWNlEksKB2NoYW5nZXMYBCABKA4yIy5wdWx1bWlycGMuRGlmZlJlc3BvbnNlLkRpZmZDaGFuZ2VzQgziPwkSB2NoYW5nZXNSB
  2NoYW5nZXMSIAoFZGlmZnMYBSADKAlCCuI/BxIFZGlmZnNSBWRpZmZzEmAKDGRldGFpbGVkRGlmZhgGIAMoCzIpLnB1bHVtaXJwY
  y5EaWZmUmVzcG9uc2UuRGV0YWlsZWREaWZmRW50cnlCEeI/DhIMZGV0YWlsZWREaWZmUgxkZXRhaWxlZERpZmYSPgoPaGFzRGV0Y
  WlsZWREaWZmGAcgASgIQhTiPxESD2hhc0RldGFpbGVkRGlmZlIPaGFzRGV0YWlsZWREaWZmGm4KEURldGFpbGVkRGlmZkVudHJ5E
  hoKA2tleRgBIAEoCUII4j8FEgNrZXlSA2tleRI5CgV2YWx1ZRgCIAEoCzIXLnB1bHVtaXJwYy5Qcm9wZXJ0eURpZmZCCuI/BxIFd
  mFsdWVSBXZhbHVlOgI4ASJwCgtEaWZmQ2hhbmdlcxIjCgxESUZGX1VOS05PV04QABoR4j8OEgxESUZGX1VOS05PV04SHQoJRElGR
  l9OT05FEAEaDuI/CxIJRElGRl9OT05FEh0KCURJRkZfU09NRRACGg7iPwsSCURJRkZfU09NRSKDAgoNQ3JlYXRlUmVxdWVzdBIaC
  gN1cm4YASABKAlCCOI/BRIDdXJuUgN1cm4SSAoKcHJvcGVydGllcxgCIAEoCzIXLmdvb2dsZS5wcm90b2J1Zi5TdHJ1Y3RCD+I/D
  BIKcHJvcGVydGllc1IKcHJvcGVydGllcxImCgd0aW1lb3V0GAMgASgBQgziPwkSB3RpbWVvdXRSB3RpbWVvdXQSJgoHcHJldmlld
  xgEIAEoCEIM4j8JEgdwcmV2aWV3UgdwcmV2aWV3Eh0KBG5hbWUYBSABKAlCCeI/BhIEbmFtZVIEbmFtZRIdCgR0eXBlGAYgASgJQ
  gniPwYSBHR5cGVSBHR5cGUicwoOQ3JlYXRlUmVzcG9uc2USFwoCaWQYASABKAlCB+I/BBICaWRSAmlkEkgKCnByb3BlcnRpZXMYA
  iABKAsyFy5nb29nbGUucHJvdG9idWYuU3RydWN0Qg/iPwwSCnByb3BlcnRpZXNSCnByb3BlcnRpZXMiiAIKC1JlYWRSZXF1ZXN0E
  hcKAmlkGAEgASgJQgfiPwQSAmlkUgJpZBIaCgN1cm4YAiABKAlCCOI/BRIDdXJuUgN1cm4SSAoKcHJvcGVydGllcxgDIAEoCzIXL
  mdvb2dsZS5wcm90b2J1Zi5TdHJ1Y3RCD+I/DBIKcHJvcGVydGllc1IKcHJvcGVydGllcxI8CgZpbnB1dHMYBCABKAsyFy5nb29nb
  GUucHJvdG9idWYuU3RydWN0QgviPwgSBmlucHV0c1IGaW5wdXRzEh0KBG5hbWUYBSABKAlCCeI/BhIEbmFtZVIEbmFtZRIdCgR0e
  XBlGAYgASgJQgniPwYSBHR5cGVSBHR5cGUirwEKDFJlYWRSZXNwb25zZRIXCgJpZBgBIAEoCUIH4j8EEgJpZFICaWQSSAoKcHJvc
  GVydGllcxgCIAEoCzIXLmdvb2dsZS5wcm90b2J1Zi5TdHJ1Y3RCD+I/DBIKcHJvcGVydGllc1IKcHJvcGVydGllcxI8CgZpbnB1d
  HMYAyABKAsyFy5nb29nbGUucHJvdG9idWYuU3RydWN0QgviPwgSBmlucHV0c1IGaW5wdXRzIsQDCg1VcGRhdGVSZXF1ZXN0EhcKA
  mlkGAEgASgJQgfiPwQSAmlkUgJpZBIaCgN1cm4YAiABKAlCCOI/BRIDdXJuUgN1cm4SNgoEb2xkcxgDIAEoCzIXLmdvb2dsZS5wc
  m90b2J1Zi5TdHJ1Y3RCCeI/BhIEb2xkc1IEb2xkcxI2CgRuZXdzGAQgASgLMhcuZ29vZ2xlLnByb3RvYnVmLlN0cnVjdEIJ4j8GE
  gRuZXdzUgRuZXdzEiYKB3RpbWVvdXQYBSABKAFCDOI/CRIHdGltZW91dFIHdGltZW91dBI4Cg1pZ25vcmVDaGFuZ2VzGAYgAygJQ
  hLiPw8SDWlnbm9yZUNoYW5nZXNSDWlnbm9yZUNoYW5nZXMSJgoHcHJldmlldxgHIAEoCEIM4j8JEgdwcmV2aWV3UgdwcmV2aWV3E
  kYKCm9sZF9pbnB1dHMYCCABKAsyFy5nb29nbGUucHJvdG9idWYuU3RydWN0Qg7iPwsSCW9sZElucHV0c1IJb2xkSW5wdXRzEh0KB
  G5hbWUYCSABKAlCCeI/BhIEbmFtZVIEbmFtZRIdCgR0eXBlGAogASgJQgniPwYSBHR5cGVSBHR5cGUiWgoOVXBkYXRlUmVzcG9uc
  2USSAoKcHJvcGVydGllcxgBIAEoCzIXLmdvb2dsZS5wcm90b2J1Zi5TdHJ1Y3RCD+I/DBIKcHJvcGVydGllc1IKcHJvcGVydGllc
  yK8AgoNRGVsZXRlUmVxdWVzdBIXCgJpZBgBIAEoCUIH4j8EEgJpZFICaWQSGgoDdXJuGAIgASgJQgjiPwUSA3VyblIDdXJuEkgKC
  nByb3BlcnRpZXMYAyABKAsyFy5nb29nbGUucHJvdG9idWYuU3RydWN0Qg/iPwwSCnByb3BlcnRpZXNSCnByb3BlcnRpZXMSJgoHd
  GltZW91dBgEIAEoAUIM4j8JEgd0aW1lb3V0Ugd0aW1lb3V0EkYKCm9sZF9pbnB1dHMYBSABKAsyFy5nb29nbGUucHJvdG9idWYuU
  3RydWN0Qg7iPwsSCW9sZElucHV0c1IJb2xkSW5wdXRzEh0KBG5hbWUYBiABKAlCCeI/BhIEbmFtZVIEbmFtZRIdCgR0eXBlGAcgA
  SgJQgniPwYSBHR5cGVSBHR5cGUi5Q8KEENvbnN0cnVjdFJlcXVlc3QSJgoHcHJvamVjdBgBIAEoCUIM4j8JEgdwcm9qZWN0Ugdwc
  m9qZWN0EiAKBXN0YWNrGAIgASgJQgriPwcSBXN0YWNrUgVzdGFjaxJMCgZjb25maWcYAyADKAsyJy5wdWx1bWlycGMuQ29uc3Ryd
  WN0UmVxdWVzdC5Db25maWdFbnRyeUIL4j8IEgZjb25maWdSBmNvbmZpZxIjCgZkcnlSdW4YBCABKAhCC+I/CBIGZHJ5UnVuUgZkc
  nlSdW4SKQoIcGFyYWxsZWwYBSABKAVCDeI/ChIIcGFyYWxsZWxSCHBhcmFsbGVsEj4KD21vbml0b3JFbmRwb2ludBgGIAEoCUIU4
  j8REg9tb25pdG9yRW5kcG9pbnRSD21vbml0b3JFbmRwb2ludBIdCgR0eXBlGAcgASgJQgniPwYSBHR5cGVSBHR5cGUSHQoEbmFtZ
  RgIIAEoCUIJ4j8GEgRuYW1lUgRuYW1lEiMKBnBhcmVudBgJIAEoCUIL4j8IEgZwYXJlbnRSBnBhcmVudBI8CgZpbnB1dHMYCiABK
  AsyFy5nb29nbGUucHJvdG9idWYuU3RydWN0QgviPwgSBmlucHV0c1IGaW5wdXRzEngKEWlucHV0RGVwZW5kZW5jaWVzGAsgAygLM
  jIucHVsdW1pcnBjLkNvbnN0cnVjdFJlcXVlc3QuSW5wdXREZXBlbmRlbmNpZXNFbnRyeUIW4j8TEhFpbnB1dERlcGVuZGVuY2llc
  1IRaW5wdXREZXBlbmRlbmNpZXMSWAoJcHJvdmlkZXJzGA0gAygLMioucHVsdW1pcnBjLkNvbnN0cnVjdFJlcXVlc3QuUHJvdmlkZ
  XJzRW50cnlCDuI/CxIJcHJvdmlkZXJzUglwcm92aWRlcnMSNQoMZGVwZW5kZW5jaWVzGA8gAygJQhHiPw4SDGRlcGVuZGVuY2llc
  1IMZGVwZW5kZW5jaWVzEkEKEGNvbmZpZ1NlY3JldEtleXMYECADKAlCFeI/EhIQY29uZmlnU2VjcmV0S2V5c1IQY29uZmlnU2Vjc
  mV0S2V5cxI1Cgxvcmdhbml6YXRpb24YESABKAlCEeI/DhIMb3JnYW5pemF0aW9uUgxvcmdhbml6YXRpb24SJgoHcHJvdGVjdBgMI
  AEoCEIM4j8JEgdwcm90ZWN0Ugdwcm90ZWN0EiYKB2FsaWFzZXMYDiADKAlCDOI/CRIHYWxpYXNlc1IHYWxpYXNlcxJWChdhZGRpd
  GlvbmFsU2VjcmV0T3V0cHV0cxgSIAMoCUIc4j8ZEhdhZGRpdGlvbmFsU2VjcmV0T3V0cHV0c1IXYWRkaXRpb25hbFNlY3JldE91d
  HB1dHMSZwoOY3VzdG9tVGltZW91dHMYEyABKAsyKi5wdWx1bWlycGMuQ29uc3RydWN0UmVxdWVzdC5DdXN0b21UaW1lb3V0c0IT4
  j8QEg5jdXN0b21UaW1lb3V0c1IOY3VzdG9tVGltZW91dHMSMgoLZGVsZXRlZFdpdGgYFCABKAlCEOI/DRILZGVsZXRlZFdpdGhSC
  2RlbGV0ZWRXaXRoEkoKE2RlbGV0ZUJlZm9yZVJlcGxhY2UYFSABKAhCGOI/FRITZGVsZXRlQmVmb3JlUmVwbGFjZVITZGVsZXRlQ
  mVmb3JlUmVwbGFjZRI4Cg1pZ25vcmVDaGFuZ2VzGBYgAygJQhLiPw8SDWlnbm9yZUNoYW5nZXNSDWlnbm9yZUNoYW5nZXMSQQoQc
  mVwbGFjZU9uQ2hhbmdlcxgXIAMoCUIV4j8SEhByZXBsYWNlT25DaGFuZ2VzUhByZXBsYWNlT25DaGFuZ2VzEjsKDnJldGFpbk9uR
  GVsZXRlGBggASgIQhPiPxASDnJldGFpbk9uRGVsZXRlUg5yZXRhaW5PbkRlbGV0ZRJMChVhY2NlcHRzX291dHB1dF92YWx1ZXMYG
  SABKAhCGOI/FRITYWNjZXB0c091dHB1dFZhbHVlc1ITYWNjZXB0c091dHB1dFZhbHVlcxo1ChRQcm9wZXJ0eURlcGVuZGVuY2llc
  xIdCgR1cm5zGAEgAygJQgniPwYSBHVybnNSBHVybnMafwoOQ3VzdG9tVGltZW91dHMSIwoGY3JlYXRlGAEgASgJQgviPwgSBmNyZ
  WF0ZVIGY3JlYXRlEiMKBnVwZGF0ZRgCIAEoCUIL4j8IEgZ1cGRhdGVSBnVwZGF0ZRIjCgZkZWxldGUYAyABKAlCC+I/CBIGZGVsZ
  XRlUgZkZWxldGUaTwoLQ29uZmlnRW50cnkSGgoDa2V5GAEgASgJQgjiPwUSA2tleVIDa2V5EiAKBXZhbHVlGAIgASgJQgriPwcSB
  XZhbHVlUgV2YWx1ZToCOAEajAEKFklucHV0RGVwZW5kZW5jaWVzRW50cnkSGgoDa2V5GAEgASgJQgjiPwUSA2tleVIDa2V5ElIKB
  XZhbHVlGAIgASgLMjAucHVsdW1pcnBjLkNvbnN0cnVjdFJlcXVlc3QuUHJvcGVydHlEZXBlbmRlbmNpZXNCCuI/BxIFdmFsdWVSB
  XZhbHVlOgI4ARpSCg5Qcm92aWRlcnNFbnRyeRIaCgNrZXkYASABKAlCCOI/BRIDa2V5UgNrZXkSIAoFdmFsdWUYAiABKAlCCuI/B
  xIFdmFsdWVSBXZhbHVlOgI4ASKsAwoRQ29uc3RydWN0UmVzcG9uc2USGgoDdXJuGAEgASgJQgjiPwUSA3VyblIDdXJuEjkKBXN0Y
  XRlGAIgASgLMhcuZ29vZ2xlLnByb3RvYnVmLlN0cnVjdEIK4j8HEgVzdGF0ZVIFc3RhdGUSeQoRc3RhdGVEZXBlbmRlbmNpZXMYA
  yADKAsyMy5wdWx1bWlycGMuQ29uc3RydWN0UmVzcG9uc2UuU3RhdGVEZXBlbmRlbmNpZXNFbnRyeUIW4j8TEhFzdGF0ZURlcGVuZ
  GVuY2llc1IRc3RhdGVEZXBlbmRlbmNpZXMaNQoUUHJvcGVydHlEZXBlbmRlbmNpZXMSHQoEdXJucxgBIAMoCUIJ4j8GEgR1cm5zU
  gR1cm5zGo0BChZTdGF0ZURlcGVuZGVuY2llc0VudHJ5EhoKA2tleRgBIAEoCUII4j8FEgNrZXlSA2tleRJTCgV2YWx1ZRgCIAEoC
  zIxLnB1bHVtaXJwYy5Db25zdHJ1Y3RSZXNwb25zZS5Qcm9wZXJ0eURlcGVuZGVuY2llc0IK4j8HEgV2YWx1ZVIFdmFsdWU6AjgBI
  uIBChdFcnJvclJlc291cmNlSW5pdEZhaWxlZBIXCgJpZBgBIAEoCUIH4j8EEgJpZFICaWQSSAoKcHJvcGVydGllcxgCIAEoCzIXL
  mdvb2dsZS5wcm90b2J1Zi5TdHJ1Y3RCD+I/DBIKcHJvcGVydGllc1IKcHJvcGVydGllcxImCgdyZWFzb25zGAMgAygJQgziPwkSB
  3JlYXNvbnNSB3JlYXNvbnMSPAoGaW5wdXRzGAQgASgLMhcuZ29vZ2xlLnByb3RvYnVmLlN0cnVjdEIL4j8IEgZpbnB1dHNSBmluc
  HV0cyJaChFHZXRNYXBwaW5nUmVxdWVzdBIaCgNrZXkYASABKAlCCOI/BRIDa2V5UgNrZXkSKQoIcHJvdmlkZXIYAiABKAlCDeI/C
  hIIcHJvdmlkZXJSCHByb3ZpZGVyIl4KEkdldE1hcHBpbmdSZXNwb25zZRIpCghwcm92aWRlchgBIAEoCUIN4j8KEghwcm92aWRlc
  lIIcHJvdmlkZXISHQoEZGF0YRgCIAEoDEIJ4j8GEgRkYXRhUgRkYXRhIjAKEkdldE1hcHBpbmdzUmVxdWVzdBIaCgNrZXkYASABK
  AlCCOI/BRIDa2V5UgNrZXkiQwoTR2V0TWFwcGluZ3NSZXNwb25zZRIsCglwcm92aWRlcnMYASADKAlCDuI/CxIJcHJvdmlkZXJzU
  glwcm92aWRlcnMy2QoKEFJlc291cmNlUHJvdmlkZXISUQoMUGFyYW1ldGVyaXplEh4ucHVsdW1pcnBjLlBhcmFtZXRlcml6ZVJlc
  XVlc3QaHy5wdWx1bWlycGMuUGFyYW1ldGVyaXplUmVzcG9uc2UiABJICglHZXRTY2hlbWESGy5wdWx1bWlycGMuR2V0U2NoZW1hU
  mVxdWVzdBocLnB1bHVtaXJwYy5HZXRTY2hlbWFSZXNwb25zZSIAEkIKC0NoZWNrQ29uZmlnEhcucHVsdW1pcnBjLkNoZWNrUmVxd
  WVzdBoYLnB1bHVtaXJwYy5DaGVja1Jlc3BvbnNlIgASPwoKRGlmZkNvbmZpZxIWLnB1bHVtaXJwYy5EaWZmUmVxdWVzdBoXLnB1b
  HVtaXJwYy5EaWZmUmVzcG9uc2UiABJICglDb25maWd1cmUSGy5wdWx1bWlycGMuQ29uZmlndXJlUmVxdWVzdBocLnB1bHVtaXJwY
  y5Db25maWd1cmVSZXNwb25zZSIAEj8KBkludm9rZRIYLnB1bHVtaXJwYy5JbnZva2VSZXF1ZXN0GhkucHVsdW1pcnBjLkludm9rZ
  VJlc3BvbnNlIgASRwoMU3RyZWFtSW52b2tlEhgucHVsdW1pcnBjLkludm9rZVJlcXVlc3QaGS5wdWx1bWlycGMuSW52b2tlUmVzc
  G9uc2UiADABEjkKBENhbGwSFi5wdWx1bWlycGMuQ2FsbFJlcXVlc3QaFy5wdWx1bWlycGMuQ2FsbFJlc3BvbnNlIgASPAoFQ2hlY
  2sSFy5wdWx1bWlycGMuQ2hlY2tSZXF1ZXN0GhgucHVsdW1pcnBjLkNoZWNrUmVzcG9uc2UiABI5CgREaWZmEhYucHVsdW1pcnBjL
  kRpZmZSZXF1ZXN0GhcucHVsdW1pcnBjLkRpZmZSZXNwb25zZSIAEj8KBkNyZWF0ZRIYLnB1bHVtaXJwYy5DcmVhdGVSZXF1ZXN0G
  hkucHVsdW1pcnBjLkNyZWF0ZVJlc3BvbnNlIgASOQoEUmVhZBIWLnB1bHVtaXJwYy5SZWFkUmVxdWVzdBoXLnB1bHVtaXJwYy5SZ
  WFkUmVzcG9uc2UiABI/CgZVcGRhdGUSGC5wdWx1bWlycGMuVXBkYXRlUmVxdWVzdBoZLnB1bHVtaXJwYy5VcGRhdGVSZXNwb25zZ
  SIAEjwKBkRlbGV0ZRIYLnB1bHVtaXJwYy5EZWxldGVSZXF1ZXN0GhYuZ29vZ2xlLnByb3RvYnVmLkVtcHR5IgASSAoJQ29uc3Ryd
  WN0EhsucHVsdW1pcnBjLkNvbnN0cnVjdFJlcXVlc3QaHC5wdWx1bWlycGMuQ29uc3RydWN0UmVzcG9uc2UiABI6CgZDYW5jZWwSF
  i5nb29nbGUucHJvdG9idWYuRW1wdHkaFi5nb29nbGUucHJvdG9idWYuRW1wdHkiABJACg1HZXRQbHVnaW5JbmZvEhYuZ29vZ2xlL
  nByb3RvYnVmLkVtcHR5GhUucHVsdW1pcnBjLlBsdWdpbkluZm8iABI7CgZBdHRhY2gSFy5wdWx1bWlycGMuUGx1Z2luQXR0YWNoG
  hYuZ29vZ2xlLnByb3RvYnVmLkVtcHR5IgASSwoKR2V0TWFwcGluZxIcLnB1bHVtaXJwYy5HZXRNYXBwaW5nUmVxdWVzdBodLnB1b
  HVtaXJwYy5HZXRNYXBwaW5nUmVzcG9uc2UiABJOCgtHZXRNYXBwaW5ncxIdLnB1bHVtaXJwYy5HZXRNYXBwaW5nc1JlcXVlc3QaH
  i5wdWx1bWlycGMuR2V0TWFwcGluZ3NSZXNwb25zZSIAQjRaMmdpdGh1Yi5jb20vcHVsdW1pL3B1bHVtaS9zZGsvdjMvcHJvdG8vZ
  287cHVsdW1pcnBjYgZwcm90bzM="""
      ).mkString)
  lazy val scalaDescriptor: _root_.scalapb.descriptors.FileDescriptor = {
    val scalaProto = com.google.protobuf.descriptor.FileDescriptorProto.parseFrom(ProtoBytes)
    _root_.scalapb.descriptors.FileDescriptor.buildFrom(scalaProto, dependencies.map(_.scalaDescriptor))
  }
  lazy val javaDescriptor: com.google.protobuf.Descriptors.FileDescriptor = {
    val javaProto = com.google.protobuf.DescriptorProtos.FileDescriptorProto.parseFrom(ProtoBytes)
    com.google.protobuf.Descriptors.FileDescriptor.buildFrom(javaProto, _root_.scala.Array(
      pulumirpc.plugin.PluginProto.javaDescriptor,
      com.google.protobuf.empty.EmptyProto.javaDescriptor,
      com.google.protobuf.struct.StructProto.javaDescriptor
    ))
  }
  @deprecated("Use javaDescriptor instead. In a future version this will refer to scalaDescriptor.", "ScalaPB 0.5.47")
  def descriptor: com.google.protobuf.Descriptors.FileDescriptor = javaDescriptor
}