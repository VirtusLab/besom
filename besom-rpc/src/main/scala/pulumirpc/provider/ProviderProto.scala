// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package pulumirpc.provider

object ProviderProto extends _root_.scalapb.GeneratedFileObject {
  lazy val dependencies: Seq[_root_.scalapb.GeneratedFileObject] = Seq(
    pulumirpc.plugin.PluginProto,
    com.google.protobuf.empty.EmptyProto,
    com.google.protobuf.struct.StructProto
  )
  lazy val messagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[? <: _root_.scalapb.GeneratedMessage]] =
    Seq[_root_.scalapb.GeneratedMessageCompanion[? <: _root_.scalapb.GeneratedMessage]](
      pulumirpc.provider.GetSchemaRequest,
      pulumirpc.provider.GetSchemaResponse,
      pulumirpc.provider.ConfigureRequest,
      pulumirpc.provider.ConfigureResponse,
      pulumirpc.provider.ConfigureErrorMissingKeys,
      pulumirpc.provider.InvokeRequest,
      pulumirpc.provider.InvokeResponse,
      pulumirpc.provider.CallRequest,
      pulumirpc.provider.CallResponse,
      pulumirpc.provider.CheckRequest,
      pulumirpc.provider.CheckResponse,
      pulumirpc.provider.CheckFailure,
      pulumirpc.provider.DiffRequest,
      pulumirpc.provider.PropertyDiff,
      pulumirpc.provider.DiffResponse,
      pulumirpc.provider.CreateRequest,
      pulumirpc.provider.CreateResponse,
      pulumirpc.provider.ReadRequest,
      pulumirpc.provider.ReadResponse,
      pulumirpc.provider.UpdateRequest,
      pulumirpc.provider.UpdateResponse,
      pulumirpc.provider.DeleteRequest,
      pulumirpc.provider.ConstructRequest,
      pulumirpc.provider.ConstructResponse,
      pulumirpc.provider.ErrorResourceInitFailed,
      pulumirpc.provider.GetMappingRequest,
      pulumirpc.provider.GetMappingResponse,
      pulumirpc.provider.GetMappingsRequest,
      pulumirpc.provider.GetMappingsResponse
    )
  private lazy val ProtoBytes: _root_.scala.Array[Byte] =
      scalapb.Encoding.fromBase64(scala.collection.immutable.Seq(
  """ChVwdWx1bWkvcHJvdmlkZXIucHJvdG8SCXB1bHVtaXJwYxoTcHVsdW1pL3BsdWdpbi5wcm90bxobZ29vZ2xlL3Byb3RvYnVmL
  2VtcHR5LnByb3RvGhxnb29nbGUvcHJvdG9idWYvc3RydWN0LnByb3RvIjoKEEdldFNjaGVtYVJlcXVlc3QSJgoHdmVyc2lvbhgBI
  AEoBUIM4j8JEgd2ZXJzaW9uUgd2ZXJzaW9uIjgKEUdldFNjaGVtYVJlc3BvbnNlEiMKBnNjaGVtYRgBIAEoCUIL4j8IEgZzY2hlb
  WFSBnNjaGVtYSKKBAoQQ29uZmlndXJlUmVxdWVzdBJYCgl2YXJpYWJsZXMYASADKAsyKi5wdWx1bWlycGMuQ29uZmlndXJlUmVxd
  WVzdC5WYXJpYWJsZXNFbnRyeUIO4j8LEgl2YXJpYWJsZXNSCXZhcmlhYmxlcxI2CgRhcmdzGAIgASgLMhcuZ29vZ2xlLnByb3RvY
  nVmLlN0cnVjdEIJ4j8GEgRhcmdzUgRhcmdzEjgKDWFjY2VwdFNlY3JldHMYAyABKAhCEuI/DxINYWNjZXB0U2VjcmV0c1INYWNjZ
  XB0U2VjcmV0cxI+Cg9hY2NlcHRSZXNvdXJjZXMYBCABKAhCFOI/ERIPYWNjZXB0UmVzb3VyY2VzUg9hY2NlcHRSZXNvdXJjZXMSP
  QoQc2VuZHNfb2xkX2lucHV0cxgFIAEoCEIT4j8QEg5zZW5kc09sZElucHV0c1IOc2VuZHNPbGRJbnB1dHMSVwoac2VuZHNfb2xkX
  2lucHV0c190b19kZWxldGUYBiABKAhCG+I/GBIWc2VuZHNPbGRJbnB1dHNUb0RlbGV0ZVIWc2VuZHNPbGRJbnB1dHNUb0RlbGV0Z
  RpSCg5WYXJpYWJsZXNFbnRyeRIaCgNrZXkYASABKAlCCOI/BRIDa2V5UgNrZXkSIAoFdmFsdWUYAiABKAlCCuI/BxIFdmFsdWVSB
  XZhbHVlOgI4ASKHAgoRQ29uZmlndXJlUmVzcG9uc2USOAoNYWNjZXB0U2VjcmV0cxgBIAEoCEIS4j8PEg1hY2NlcHRTZWNyZXRzU
  g1hY2NlcHRTZWNyZXRzEj4KD3N1cHBvcnRzUHJldmlldxgCIAEoCEIU4j8REg9zdXBwb3J0c1ByZXZpZXdSD3N1cHBvcnRzUHJld
  mlldxI+Cg9hY2NlcHRSZXNvdXJjZXMYAyABKAhCFOI/ERIPYWNjZXB0UmVzb3VyY2VzUg9hY2NlcHRSZXNvdXJjZXMSOAoNYWNjZ
  XB0T3V0cHV0cxgEIAEoCEIS4j8PEg1hY2NlcHRPdXRwdXRzUg1hY2NlcHRPdXRwdXRzIuEBChlDb25maWd1cmVFcnJvck1pc3Npb
  mdLZXlzEmMKC21pc3NpbmdLZXlzGAEgAygLMi8ucHVsdW1pcnBjLkNvbmZpZ3VyZUVycm9yTWlzc2luZ0tleXMuTWlzc2luZ0tle
  UIQ4j8NEgttaXNzaW5nS2V5c1ILbWlzc2luZ0tleXMaXwoKTWlzc2luZ0tleRIdCgRuYW1lGAEgASgJQgniPwYSBG5hbWVSBG5hb
  WUSMgoLZGVzY3JpcHRpb24YAiABKAlCEOI/DRILZGVzY3JpcHRpb25SC2Rlc2NyaXB0aW9uIqABCg1JbnZva2VSZXF1ZXN0EhoKA
  3RvaxgBIAEoCUII4j8FEgN0b2tSA3RvaxI2CgRhcmdzGAIgASgLMhcuZ29vZ2xlLnByb3RvYnVmLlN0cnVjdEIJ4j8GEgRhcmdzU
  gRhcmdzSgQIAxAHUghwcm92aWRlclIHdmVyc2lvblIPYWNjZXB0UmVzb3VyY2VzUhFwbHVnaW5Eb3dubG9hZFVSTCKSAQoOSW52b
  2tlUmVzcG9uc2USPAoGcmV0dXJuGAEgASgLMhcuZ29vZ2xlLnByb3RvYnVmLlN0cnVjdEIL4j8IEgZyZXR1cm5SBnJldHVybhJCC
  ghmYWlsdXJlcxgCIAMoCzIXLnB1bHVtaXJwYy5DaGVja0ZhaWx1cmVCDeI/ChIIZmFpbHVyZXNSCGZhaWx1cmVzIq4ICgtDYWxsU
  mVxdWVzdBIaCgN0b2sYASABKAlCCOI/BRIDdG9rUgN0b2sSNgoEYXJncxgCIAEoCzIXLmdvb2dsZS5wcm90b2J1Zi5TdHJ1Y3RCC
  eI/BhIEYXJnc1IEYXJncxJrCg9hcmdEZXBlbmRlbmNpZXMYAyADKAsyKy5wdWx1bWlycGMuQ2FsbFJlcXVlc3QuQXJnRGVwZW5kZ
  W5jaWVzRW50cnlCFOI/ERIPYXJnRGVwZW5kZW5jaWVzUg9hcmdEZXBlbmRlbmNpZXMSJgoHcHJvamVjdBgGIAEoCUIM4j8JEgdwc
  m9qZWN0Ugdwcm9qZWN0EiAKBXN0YWNrGAcgASgJQgriPwcSBXN0YWNrUgVzdGFjaxJHCgZjb25maWcYCCADKAsyIi5wdWx1bWlyc
  GMuQ2FsbFJlcXVlc3QuQ29uZmlnRW50cnlCC+I/CBIGY29uZmlnUgZjb25maWcSQQoQY29uZmlnU2VjcmV0S2V5cxgJIAMoCUIV4
  j8SEhBjb25maWdTZWNyZXRLZXlzUhBjb25maWdTZWNyZXRLZXlzEiMKBmRyeVJ1bhgKIAEoCEIL4j8IEgZkcnlSdW5SBmRyeVJ1b
  hIpCghwYXJhbGxlbBgLIAEoBUIN4j8KEghwYXJhbGxlbFIIcGFyYWxsZWwSPgoPbW9uaXRvckVuZHBvaW50GAwgASgJQhTiPxESD
  21vbml0b3JFbmRwb2ludFIPbW9uaXRvckVuZHBvaW50EjUKDG9yZ2FuaXphdGlvbhgOIAEoCUIR4j8OEgxvcmdhbml6YXRpb25SD
  G9yZ2FuaXphdGlvbhJMChVhY2NlcHRzX291dHB1dF92YWx1ZXMYESABKAhCGOI/FRITYWNjZXB0c091dHB1dFZhbHVlc1ITYWNjZ
  XB0c091dHB1dFZhbHVlcxo1ChRBcmd1bWVudERlcGVuZGVuY2llcxIdCgR1cm5zGAEgAygJQgniPwYSBHVybnNSBHVybnMahQEKF
  EFyZ0RlcGVuZGVuY2llc0VudHJ5EhoKA2tleRgBIAEoCUII4j8FEgNrZXlSA2tleRJNCgV2YWx1ZRgCIAEoCzIrLnB1bHVtaXJwY
  y5DYWxsUmVxdWVzdC5Bcmd1bWVudERlcGVuZGVuY2llc0IK4j8HEgV2YWx1ZVIFdmFsdWU6AjgBGk8KC0NvbmZpZ0VudHJ5EhoKA
  2tleRgBIAEoCUII4j8FEgNrZXlSA2tleRIgCgV2YWx1ZRgCIAEoCUIK4j8HEgV2YWx1ZVIFdmFsdWU6AjgBSgQIBBAFSgQIBRAGS
  gQIDRAOSgQIEBARSgQIDxAQUghwcm92aWRlclIHdmVyc2lvblIRcGx1Z2luRG93bmxvYWRVUkxSD3BsdWdpbkNoZWNrc3Vtc1IOc
  291cmNlUG9zaXRpb24iyQMKDENhbGxSZXNwb25zZRI8CgZyZXR1cm4YASABKAsyFy5nb29nbGUucHJvdG9idWYuU3RydWN0QgviP
  wgSBnJldHVyblIGcmV0dXJuEngKEnJldHVybkRlcGVuZGVuY2llcxgCIAMoCzIvLnB1bHVtaXJwYy5DYWxsUmVzcG9uc2UuUmV0d
  XJuRGVwZW5kZW5jaWVzRW50cnlCF+I/FBIScmV0dXJuRGVwZW5kZW5jaWVzUhJyZXR1cm5EZXBlbmRlbmNpZXMSQgoIZmFpbHVyZ
  XMYAyADKAsyFy5wdWx1bWlycGMuQ2hlY2tGYWlsdXJlQg3iPwoSCGZhaWx1cmVzUghmYWlsdXJlcxozChJSZXR1cm5EZXBlbmRlb
  mNpZXMSHQoEdXJucxgBIAMoCUIJ4j8GEgR1cm5zUgR1cm5zGocBChdSZXR1cm5EZXBlbmRlbmNpZXNFbnRyeRIaCgNrZXkYASABK
  AlCCOI/BRIDa2V5UgNrZXkSTAoFdmFsdWUYAiABKAsyKi5wdWx1bWlycGMuQ2FsbFJlc3BvbnNlLlJldHVybkRlcGVuZGVuY2llc
  0IK4j8HEgV2YWx1ZVIFdmFsdWU6AjgBIuEBCgxDaGVja1JlcXVlc3QSGgoDdXJuGAEgASgJQgjiPwUSA3VyblIDdXJuEjYKBG9sZ
  HMYAiABKAsyFy5nb29nbGUucHJvdG9idWYuU3RydWN0QgniPwYSBG9sZHNSBG9sZHMSNgoEbmV3cxgDIAEoCzIXLmdvb2dsZS5wc
  m90b2J1Zi5TdHJ1Y3RCCeI/BhIEbmV3c1IEbmV3cxIvCgpyYW5kb21TZWVkGAUgASgMQg/iPwwSCnJhbmRvbVNlZWRSCnJhbmRvb
  VNlZWRKBAgEEAVSDnNlcXVlbmNlTnVtYmVyIpEBCg1DaGVja1Jlc3BvbnNlEjwKBmlucHV0cxgBIAEoCzIXLmdvb2dsZS5wcm90b
  2J1Zi5TdHJ1Y3RCC+I/CBIGaW5wdXRzUgZpbnB1dHMSQgoIZmFpbHVyZXMYAiADKAsyFy5wdWx1bWlycGMuQ2hlY2tGYWlsdXJlQ
  g3iPwoSCGZhaWx1cmVzUghmYWlsdXJlcyJeCgxDaGVja0ZhaWx1cmUSKQoIcHJvcGVydHkYASABKAlCDeI/ChIIcHJvcGVydHlSC
  HByb3BlcnR5EiMKBnJlYXNvbhgCIAEoCUIL4j8IEgZyZWFzb25SBnJlYXNvbiK0AgoLRGlmZlJlcXVlc3QSFwoCaWQYASABKAlCB
  +I/BBICaWRSAmlkEhoKA3VybhgCIAEoCUII4j8FEgN1cm5SA3VybhI2CgRvbGRzGAMgASgLMhcuZ29vZ2xlLnByb3RvYnVmLlN0c
  nVjdEIJ4j8GEgRvbGRzUgRvbGRzEjYKBG5ld3MYBCABKAsyFy5nb29nbGUucHJvdG9idWYuU3RydWN0QgniPwYSBG5ld3NSBG5ld
  3MSOAoNaWdub3JlQ2hhbmdlcxgFIAMoCUIS4j8PEg1pZ25vcmVDaGFuZ2VzUg1pZ25vcmVDaGFuZ2VzEkYKCm9sZF9pbnB1dHMYB
  iABKAsyFy5nb29nbGUucHJvdG9idWYuU3RydWN0Qg7iPwsSCW9sZElucHV0c1IJb2xkSW5wdXRzIrwCCgxQcm9wZXJ0eURpZmYSO
  woEa2luZBgBIAEoDjIcLnB1bHVtaXJwYy5Qcm9wZXJ0eURpZmYuS2luZEIJ4j8GEgRraW5kUgRraW5kEiwKCWlucHV0RGlmZhgCI
  AEoCEIO4j8LEglpbnB1dERpZmZSCWlucHV0RGlmZiLAAQoES2luZBIRCgNBREQQABoI4j8FEgNBREQSIQoLQUREX1JFUExBQ0UQA
  RoQ4j8NEgtBRERfUkVQTEFDRRIXCgZERUxFVEUQAhoL4j8IEgZERUxFVEUSJwoOREVMRVRFX1JFUExBQ0UQAxoT4j8QEg5ERUxFV
  EVfUkVQTEFDRRIXCgZVUERBVEUQBBoL4j8IEgZVUERBVEUSJwoOVVBEQVRFX1JFUExBQ0UQBRoT4j8QEg5VUERBVEVfUkVQTEFDR
  SKgBQoMRGlmZlJlc3BvbnNlEikKCHJlcGxhY2VzGAEgAygJQg3iPwoSCHJlcGxhY2VzUghyZXBsYWNlcxImCgdzdGFibGVzGAIgA
  ygJQgziPwkSB3N0YWJsZXNSB3N0YWJsZXMSSgoTZGVsZXRlQmVmb3JlUmVwbGFjZRgDIAEoCEIY4j8VEhNkZWxldGVCZWZvcmVSZ
  XBsYWNlUhNkZWxldGVCZWZvcmVSZXBsYWNlEksKB2NoYW5nZXMYBCABKA4yIy5wdWx1bWlycGMuRGlmZlJlc3BvbnNlLkRpZmZDa
  GFuZ2VzQgziPwkSB2NoYW5nZXNSB2NoYW5nZXMSIAoFZGlmZnMYBSADKAlCCuI/BxIFZGlmZnNSBWRpZmZzEmAKDGRldGFpbGVkR
  GlmZhgGIAMoCzIpLnB1bHVtaXJwYy5EaWZmUmVzcG9uc2UuRGV0YWlsZWREaWZmRW50cnlCEeI/DhIMZGV0YWlsZWREaWZmUgxkZ
  XRhaWxlZERpZmYSPgoPaGFzRGV0YWlsZWREaWZmGAcgASgIQhTiPxESD2hhc0RldGFpbGVkRGlmZlIPaGFzRGV0YWlsZWREaWZmG
  m4KEURldGFpbGVkRGlmZkVudHJ5EhoKA2tleRgBIAEoCUII4j8FEgNrZXlSA2tleRI5CgV2YWx1ZRgCIAEoCzIXLnB1bHVtaXJwY
  y5Qcm9wZXJ0eURpZmZCCuI/BxIFdmFsdWVSBXZhbHVlOgI4ASJwCgtEaWZmQ2hhbmdlcxIjCgxESUZGX1VOS05PV04QABoR4j8OE
  gxESUZGX1VOS05PV04SHQoJRElGRl9OT05FEAEaDuI/CxIJRElGRl9OT05FEh0KCURJRkZfU09NRRACGg7iPwsSCURJRkZfU09NR
  SLFAQoNQ3JlYXRlUmVxdWVzdBIaCgN1cm4YASABKAlCCOI/BRIDdXJuUgN1cm4SSAoKcHJvcGVydGllcxgCIAEoCzIXLmdvb2dsZ
  S5wcm90b2J1Zi5TdHJ1Y3RCD+I/DBIKcHJvcGVydGllc1IKcHJvcGVydGllcxImCgd0aW1lb3V0GAMgASgBQgziPwkSB3RpbWVvd
  XRSB3RpbWVvdXQSJgoHcHJldmlldxgEIAEoCEIM4j8JEgdwcmV2aWV3UgdwcmV2aWV3InMKDkNyZWF0ZVJlc3BvbnNlEhcKAmlkG
  AEgASgJQgfiPwQSAmlkUgJpZBJICgpwcm9wZXJ0aWVzGAIgASgLMhcuZ29vZ2xlLnByb3RvYnVmLlN0cnVjdEIP4j8MEgpwcm9wZ
  XJ0aWVzUgpwcm9wZXJ0aWVzIsoBCgtSZWFkUmVxdWVzdBIXCgJpZBgBIAEoCUIH4j8EEgJpZFICaWQSGgoDdXJuGAIgASgJQgjiP
  wUSA3VyblIDdXJuEkgKCnByb3BlcnRpZXMYAyABKAsyFy5nb29nbGUucHJvdG9idWYuU3RydWN0Qg/iPwwSCnByb3BlcnRpZXNSC
  nByb3BlcnRpZXMSPAoGaW5wdXRzGAQgASgLMhcuZ29vZ2xlLnByb3RvYnVmLlN0cnVjdEIL4j8IEgZpbnB1dHNSBmlucHV0cyKvA
  QoMUmVhZFJlc3BvbnNlEhcKAmlkGAEgASgJQgfiPwQSAmlkUgJpZBJICgpwcm9wZXJ0aWVzGAIgASgLMhcuZ29vZ2xlLnByb3RvY
  nVmLlN0cnVjdEIP4j8MEgpwcm9wZXJ0aWVzUgpwcm9wZXJ0aWVzEjwKBmlucHV0cxgDIAEoCzIXLmdvb2dsZS5wcm90b2J1Zi5Td
  HJ1Y3RCC+I/CBIGaW5wdXRzUgZpbnB1dHMihgMKDVVwZGF0ZVJlcXVlc3QSFwoCaWQYASABKAlCB+I/BBICaWRSAmlkEhoKA3Vyb
  hgCIAEoCUII4j8FEgN1cm5SA3VybhI2CgRvbGRzGAMgASgLMhcuZ29vZ2xlLnByb3RvYnVmLlN0cnVjdEIJ4j8GEgRvbGRzUgRvb
  GRzEjYKBG5ld3MYBCABKAsyFy5nb29nbGUucHJvdG9idWYuU3RydWN0QgniPwYSBG5ld3NSBG5ld3MSJgoHdGltZW91dBgFIAEoA
  UIM4j8JEgd0aW1lb3V0Ugd0aW1lb3V0EjgKDWlnbm9yZUNoYW5nZXMYBiADKAlCEuI/DxINaWdub3JlQ2hhbmdlc1INaWdub3JlQ
  2hhbmdlcxImCgdwcmV2aWV3GAcgASgIQgziPwkSB3ByZXZpZXdSB3ByZXZpZXcSRgoKb2xkX2lucHV0cxgIIAEoCzIXLmdvb2dsZ
  S5wcm90b2J1Zi5TdHJ1Y3RCDuI/CxIJb2xkSW5wdXRzUglvbGRJbnB1dHMiWgoOVXBkYXRlUmVzcG9uc2USSAoKcHJvcGVydGllc
  xgBIAEoCzIXLmdvb2dsZS5wcm90b2J1Zi5TdHJ1Y3RCD+I/DBIKcHJvcGVydGllc1IKcHJvcGVydGllcyL+AQoNRGVsZXRlUmVxd
  WVzdBIXCgJpZBgBIAEoCUIH4j8EEgJpZFICaWQSGgoDdXJuGAIgASgJQgjiPwUSA3VyblIDdXJuEkgKCnByb3BlcnRpZXMYAyABK
  AsyFy5nb29nbGUucHJvdG9idWYuU3RydWN0Qg/iPwwSCnByb3BlcnRpZXNSCnByb3BlcnRpZXMSJgoHdGltZW91dBgEIAEoAUIM4
  j8JEgd0aW1lb3V0Ugd0aW1lb3V0EkYKCm9sZF9pbnB1dHMYBSABKAsyFy5nb29nbGUucHJvdG9idWYuU3RydWN0Qg7iPwsSCW9sZ
  ElucHV0c1IJb2xkSW5wdXRzIuUPChBDb25zdHJ1Y3RSZXF1ZXN0EiYKB3Byb2plY3QYASABKAlCDOI/CRIHcHJvamVjdFIHcHJva
  mVjdBIgCgVzdGFjaxgCIAEoCUIK4j8HEgVzdGFja1IFc3RhY2sSTAoGY29uZmlnGAMgAygLMicucHVsdW1pcnBjLkNvbnN0cnVjd
  FJlcXVlc3QuQ29uZmlnRW50cnlCC+I/CBIGY29uZmlnUgZjb25maWcSIwoGZHJ5UnVuGAQgASgIQgviPwgSBmRyeVJ1blIGZHJ5U
  nVuEikKCHBhcmFsbGVsGAUgASgFQg3iPwoSCHBhcmFsbGVsUghwYXJhbGxlbBI+Cg9tb25pdG9yRW5kcG9pbnQYBiABKAlCFOI/E
  RIPbW9uaXRvckVuZHBvaW50Ug9tb25pdG9yRW5kcG9pbnQSHQoEdHlwZRgHIAEoCUIJ4j8GEgR0eXBlUgR0eXBlEh0KBG5hbWUYC
  CABKAlCCeI/BhIEbmFtZVIEbmFtZRIjCgZwYXJlbnQYCSABKAlCC+I/CBIGcGFyZW50UgZwYXJlbnQSPAoGaW5wdXRzGAogASgLM
  hcuZ29vZ2xlLnByb3RvYnVmLlN0cnVjdEIL4j8IEgZpbnB1dHNSBmlucHV0cxJ4ChFpbnB1dERlcGVuZGVuY2llcxgLIAMoCzIyL
  nB1bHVtaXJwYy5Db25zdHJ1Y3RSZXF1ZXN0LklucHV0RGVwZW5kZW5jaWVzRW50cnlCFuI/ExIRaW5wdXREZXBlbmRlbmNpZXNSE
  WlucHV0RGVwZW5kZW5jaWVzElgKCXByb3ZpZGVycxgNIAMoCzIqLnB1bHVtaXJwYy5Db25zdHJ1Y3RSZXF1ZXN0LlByb3ZpZGVyc
  0VudHJ5Qg7iPwsSCXByb3ZpZGVyc1IJcHJvdmlkZXJzEjUKDGRlcGVuZGVuY2llcxgPIAMoCUIR4j8OEgxkZXBlbmRlbmNpZXNSD
  GRlcGVuZGVuY2llcxJBChBjb25maWdTZWNyZXRLZXlzGBAgAygJQhXiPxISEGNvbmZpZ1NlY3JldEtleXNSEGNvbmZpZ1NlY3Jld
  EtleXMSNQoMb3JnYW5pemF0aW9uGBEgASgJQhHiPw4SDG9yZ2FuaXphdGlvblIMb3JnYW5pemF0aW9uEiYKB3Byb3RlY3QYDCABK
  AhCDOI/CRIHcHJvdGVjdFIHcHJvdGVjdBImCgdhbGlhc2VzGA4gAygJQgziPwkSB2FsaWFzZXNSB2FsaWFzZXMSVgoXYWRkaXRpb
  25hbFNlY3JldE91dHB1dHMYEiADKAlCHOI/GRIXYWRkaXRpb25hbFNlY3JldE91dHB1dHNSF2FkZGl0aW9uYWxTZWNyZXRPdXRwd
  XRzEmcKDmN1c3RvbVRpbWVvdXRzGBMgASgLMioucHVsdW1pcnBjLkNvbnN0cnVjdFJlcXVlc3QuQ3VzdG9tVGltZW91dHNCE+I/E
  BIOY3VzdG9tVGltZW91dHNSDmN1c3RvbVRpbWVvdXRzEjIKC2RlbGV0ZWRXaXRoGBQgASgJQhDiPw0SC2RlbGV0ZWRXaXRoUgtkZ
  WxldGVkV2l0aBJKChNkZWxldGVCZWZvcmVSZXBsYWNlGBUgASgIQhjiPxUSE2RlbGV0ZUJlZm9yZVJlcGxhY2VSE2RlbGV0ZUJlZ
  m9yZVJlcGxhY2USOAoNaWdub3JlQ2hhbmdlcxgWIAMoCUIS4j8PEg1pZ25vcmVDaGFuZ2VzUg1pZ25vcmVDaGFuZ2VzEkEKEHJlc
  GxhY2VPbkNoYW5nZXMYFyADKAlCFeI/EhIQcmVwbGFjZU9uQ2hhbmdlc1IQcmVwbGFjZU9uQ2hhbmdlcxI7Cg5yZXRhaW5PbkRlb
  GV0ZRgYIAEoCEIT4j8QEg5yZXRhaW5PbkRlbGV0ZVIOcmV0YWluT25EZWxldGUSTAoVYWNjZXB0c19vdXRwdXRfdmFsdWVzGBkgA
  SgIQhjiPxUSE2FjY2VwdHNPdXRwdXRWYWx1ZXNSE2FjY2VwdHNPdXRwdXRWYWx1ZXMaNQoUUHJvcGVydHlEZXBlbmRlbmNpZXMSH
  QoEdXJucxgBIAMoCUIJ4j8GEgR1cm5zUgR1cm5zGn8KDkN1c3RvbVRpbWVvdXRzEiMKBmNyZWF0ZRgBIAEoCUIL4j8IEgZjcmVhd
  GVSBmNyZWF0ZRIjCgZ1cGRhdGUYAiABKAlCC+I/CBIGdXBkYXRlUgZ1cGRhdGUSIwoGZGVsZXRlGAMgASgJQgviPwgSBmRlbGV0Z
  VIGZGVsZXRlGk8KC0NvbmZpZ0VudHJ5EhoKA2tleRgBIAEoCUII4j8FEgNrZXlSA2tleRIgCgV2YWx1ZRgCIAEoCUIK4j8HEgV2Y
  Wx1ZVIFdmFsdWU6AjgBGowBChZJbnB1dERlcGVuZGVuY2llc0VudHJ5EhoKA2tleRgBIAEoCUII4j8FEgNrZXlSA2tleRJSCgV2Y
  Wx1ZRgCIAEoCzIwLnB1bHVtaXJwYy5Db25zdHJ1Y3RSZXF1ZXN0LlByb3BlcnR5RGVwZW5kZW5jaWVzQgriPwcSBXZhbHVlUgV2Y
  Wx1ZToCOAEaUgoOUHJvdmlkZXJzRW50cnkSGgoDa2V5GAEgASgJQgjiPwUSA2tleVIDa2V5EiAKBXZhbHVlGAIgASgJQgriPwcSB
  XZhbHVlUgV2YWx1ZToCOAEirAMKEUNvbnN0cnVjdFJlc3BvbnNlEhoKA3VybhgBIAEoCUII4j8FEgN1cm5SA3VybhI5CgVzdGF0Z
  RgCIAEoCzIXLmdvb2dsZS5wcm90b2J1Zi5TdHJ1Y3RCCuI/BxIFc3RhdGVSBXN0YXRlEnkKEXN0YXRlRGVwZW5kZW5jaWVzGAMgA
  ygLMjMucHVsdW1pcnBjLkNvbnN0cnVjdFJlc3BvbnNlLlN0YXRlRGVwZW5kZW5jaWVzRW50cnlCFuI/ExIRc3RhdGVEZXBlbmRlb
  mNpZXNSEXN0YXRlRGVwZW5kZW5jaWVzGjUKFFByb3BlcnR5RGVwZW5kZW5jaWVzEh0KBHVybnMYASADKAlCCeI/BhIEdXJuc1IEd
  XJucxqNAQoWU3RhdGVEZXBlbmRlbmNpZXNFbnRyeRIaCgNrZXkYASABKAlCCOI/BRIDa2V5UgNrZXkSUwoFdmFsdWUYAiABKAsyM
  S5wdWx1bWlycGMuQ29uc3RydWN0UmVzcG9uc2UuUHJvcGVydHlEZXBlbmRlbmNpZXNCCuI/BxIFdmFsdWVSBXZhbHVlOgI4ASLiA
  QoXRXJyb3JSZXNvdXJjZUluaXRGYWlsZWQSFwoCaWQYASABKAlCB+I/BBICaWRSAmlkEkgKCnByb3BlcnRpZXMYAiABKAsyFy5nb
  29nbGUucHJvdG9idWYuU3RydWN0Qg/iPwwSCnByb3BlcnRpZXNSCnByb3BlcnRpZXMSJgoHcmVhc29ucxgDIAMoCUIM4j8JEgdyZ
  WFzb25zUgdyZWFzb25zEjwKBmlucHV0cxgEIAEoCzIXLmdvb2dsZS5wcm90b2J1Zi5TdHJ1Y3RCC+I/CBIGaW5wdXRzUgZpbnB1d
  HMiWgoRR2V0TWFwcGluZ1JlcXVlc3QSGgoDa2V5GAEgASgJQgjiPwUSA2tleVIDa2V5EikKCHByb3ZpZGVyGAIgASgJQg3iPwoSC
  HByb3ZpZGVyUghwcm92aWRlciJeChJHZXRNYXBwaW5nUmVzcG9uc2USKQoIcHJvdmlkZXIYASABKAlCDeI/ChIIcHJvdmlkZXJSC
  HByb3ZpZGVyEh0KBGRhdGEYAiABKAxCCeI/BhIEZGF0YVIEZGF0YSIwChJHZXRNYXBwaW5nc1JlcXVlc3QSGgoDa2V5GAEgASgJQ
  gjiPwUSA2tleVIDa2V5IkMKE0dldE1hcHBpbmdzUmVzcG9uc2USLAoJcHJvdmlkZXJzGAEgAygJQg7iPwsSCXByb3ZpZGVyc1IJc
  HJvdmlkZXJzMoYKChBSZXNvdXJjZVByb3ZpZGVyEkgKCUdldFNjaGVtYRIbLnB1bHVtaXJwYy5HZXRTY2hlbWFSZXF1ZXN0Ghwuc
  HVsdW1pcnBjLkdldFNjaGVtYVJlc3BvbnNlIgASQgoLQ2hlY2tDb25maWcSFy5wdWx1bWlycGMuQ2hlY2tSZXF1ZXN0GhgucHVsd
  W1pcnBjLkNoZWNrUmVzcG9uc2UiABI/CgpEaWZmQ29uZmlnEhYucHVsdW1pcnBjLkRpZmZSZXF1ZXN0GhcucHVsdW1pcnBjLkRpZ
  mZSZXNwb25zZSIAEkgKCUNvbmZpZ3VyZRIbLnB1bHVtaXJwYy5Db25maWd1cmVSZXF1ZXN0GhwucHVsdW1pcnBjLkNvbmZpZ3VyZ
  VJlc3BvbnNlIgASPwoGSW52b2tlEhgucHVsdW1pcnBjLkludm9rZVJlcXVlc3QaGS5wdWx1bWlycGMuSW52b2tlUmVzcG9uc2UiA
  BJHCgxTdHJlYW1JbnZva2USGC5wdWx1bWlycGMuSW52b2tlUmVxdWVzdBoZLnB1bHVtaXJwYy5JbnZva2VSZXNwb25zZSIAMAESO
  QoEQ2FsbBIWLnB1bHVtaXJwYy5DYWxsUmVxdWVzdBoXLnB1bHVtaXJwYy5DYWxsUmVzcG9uc2UiABI8CgVDaGVjaxIXLnB1bHVta
  XJwYy5DaGVja1JlcXVlc3QaGC5wdWx1bWlycGMuQ2hlY2tSZXNwb25zZSIAEjkKBERpZmYSFi5wdWx1bWlycGMuRGlmZlJlcXVlc
  3QaFy5wdWx1bWlycGMuRGlmZlJlc3BvbnNlIgASPwoGQ3JlYXRlEhgucHVsdW1pcnBjLkNyZWF0ZVJlcXVlc3QaGS5wdWx1bWlyc
  GMuQ3JlYXRlUmVzcG9uc2UiABI5CgRSZWFkEhYucHVsdW1pcnBjLlJlYWRSZXF1ZXN0GhcucHVsdW1pcnBjLlJlYWRSZXNwb25zZ
  SIAEj8KBlVwZGF0ZRIYLnB1bHVtaXJwYy5VcGRhdGVSZXF1ZXN0GhkucHVsdW1pcnBjLlVwZGF0ZVJlc3BvbnNlIgASPAoGRGVsZ
  XRlEhgucHVsdW1pcnBjLkRlbGV0ZVJlcXVlc3QaFi5nb29nbGUucHJvdG9idWYuRW1wdHkiABJICglDb25zdHJ1Y3QSGy5wdWx1b
  WlycGMuQ29uc3RydWN0UmVxdWVzdBocLnB1bHVtaXJwYy5Db25zdHJ1Y3RSZXNwb25zZSIAEjoKBkNhbmNlbBIWLmdvb2dsZS5wc
  m90b2J1Zi5FbXB0eRoWLmdvb2dsZS5wcm90b2J1Zi5FbXB0eSIAEkAKDUdldFBsdWdpbkluZm8SFi5nb29nbGUucHJvdG9idWYuR
  W1wdHkaFS5wdWx1bWlycGMuUGx1Z2luSW5mbyIAEjsKBkF0dGFjaBIXLnB1bHVtaXJwYy5QbHVnaW5BdHRhY2gaFi5nb29nbGUuc
  HJvdG9idWYuRW1wdHkiABJLCgpHZXRNYXBwaW5nEhwucHVsdW1pcnBjLkdldE1hcHBpbmdSZXF1ZXN0Gh0ucHVsdW1pcnBjLkdld
  E1hcHBpbmdSZXNwb25zZSIAEk4KC0dldE1hcHBpbmdzEh0ucHVsdW1pcnBjLkdldE1hcHBpbmdzUmVxdWVzdBoeLnB1bHVtaXJwY
  y5HZXRNYXBwaW5nc1Jlc3BvbnNlIgBCNFoyZ2l0aHViLmNvbS9wdWx1bWkvcHVsdW1pL3Nkay92My9wcm90by9nbztwdWx1bWlyc
  GNiBnByb3RvMw=="""
      ).mkString)
  lazy val scalaDescriptor: _root_.scalapb.descriptors.FileDescriptor = {
    val scalaProto = com.google.protobuf.descriptor.FileDescriptorProto.parseFrom(ProtoBytes)
    _root_.scalapb.descriptors.FileDescriptor.buildFrom(scalaProto, dependencies.map(_.scalaDescriptor))
  }
  lazy val javaDescriptor: com.google.protobuf.Descriptors.FileDescriptor = {
    val javaProto = com.google.protobuf.DescriptorProtos.FileDescriptorProto.parseFrom(ProtoBytes)
    com.google.protobuf.Descriptors.FileDescriptor.buildFrom(javaProto, _root_.scala.Array(
      pulumirpc.plugin.PluginProto.javaDescriptor,
      com.google.protobuf.empty.EmptyProto.javaDescriptor,
      com.google.protobuf.struct.StructProto.javaDescriptor
    ))
  }
  @deprecated("Use javaDescriptor instead. In a future version this will refer to scalaDescriptor.", "ScalaPB 0.5.47")
  def descriptor: com.google.protobuf.Descriptors.FileDescriptor = javaDescriptor
}