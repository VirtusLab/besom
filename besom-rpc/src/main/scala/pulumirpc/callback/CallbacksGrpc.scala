// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!

package pulumirpc.callback


object CallbacksGrpc {
  val METHOD_INVOKE: _root_.io.grpc.MethodDescriptor[pulumirpc.callback.CallbackInvokeRequest, pulumirpc.callback.CallbackInvokeResponse] =
    _root_.io.grpc.MethodDescriptor.newBuilder()
      .setType(_root_.io.grpc.MethodDescriptor.MethodType.UNARY)
      .setFullMethodName(_root_.io.grpc.MethodDescriptor.generateFullMethodName("pulumirpc.Callbacks", "Invoke"))
      .setSampledToLocalTracing(true)
      .setRequestMarshaller(_root_.scalapb.grpc.Marshaller.forMessage[pulumirpc.callback.CallbackInvokeRequest])
      .setResponseMarshaller(_root_.scalapb.grpc.Marshaller.forMessage[pulumirpc.callback.CallbackInvokeResponse])
      .setSchemaDescriptor(_root_.scalapb.grpc.ConcreteProtoMethodDescriptorSupplier.fromMethodDescriptor(pulumirpc.callback.CallbackProto.javaDescriptor.getServices().get(0).getMethods().get(0)))
      .build()
  
  val SERVICE: _root_.io.grpc.ServiceDescriptor =
    _root_.io.grpc.ServiceDescriptor.newBuilder("pulumirpc.Callbacks")
      .setSchemaDescriptor(new _root_.scalapb.grpc.ConcreteProtoFileDescriptorSupplier(pulumirpc.callback.CallbackProto.javaDescriptor))
      .addMethod(METHOD_INVOKE)
      .build()
  
  /** Callbacks is a service for invoking functions in one runtime from other processes.
    */
  trait Callbacks extends _root_.scalapb.grpc.AbstractService {
    override def serviceCompanion: _root_.scalapb.grpc.ServiceCompanion[Callbacks] = Callbacks
    /** Invoke invokes a given callback, identified by its token.
      */
    def invoke(request: pulumirpc.callback.CallbackInvokeRequest): scala.concurrent.Future[pulumirpc.callback.CallbackInvokeResponse]
  }
  
  object Callbacks extends _root_.scalapb.grpc.ServiceCompanion[Callbacks] {
    implicit def serviceCompanion: _root_.scalapb.grpc.ServiceCompanion[Callbacks] = this
    def javaDescriptor: _root_.com.google.protobuf.Descriptors.ServiceDescriptor = pulumirpc.callback.CallbackProto.javaDescriptor.getServices().get(0)
    def scalaDescriptor: _root_.scalapb.descriptors.ServiceDescriptor = pulumirpc.callback.CallbackProto.scalaDescriptor.services(0)
    def bindService(serviceImpl: Callbacks, executionContext: scala.concurrent.ExecutionContext): _root_.io.grpc.ServerServiceDefinition =
      _root_.io.grpc.ServerServiceDefinition.builder(SERVICE)
      .addMethod(
        METHOD_INVOKE,
        _root_.io.grpc.stub.ServerCalls.asyncUnaryCall((request: pulumirpc.callback.CallbackInvokeRequest, observer: _root_.io.grpc.stub.StreamObserver[pulumirpc.callback.CallbackInvokeResponse]) => {
          serviceImpl.invoke(request).onComplete(scalapb.grpc.Grpc.completeObserver(observer))(
            executionContext)
        }))
      .build()
  }
  
  /** Callbacks is a service for invoking functions in one runtime from other processes.
    */
  trait CallbacksBlockingClient {
    def serviceCompanion: _root_.scalapb.grpc.ServiceCompanion[Callbacks] = Callbacks
    /** Invoke invokes a given callback, identified by its token.
      */
    def invoke(request: pulumirpc.callback.CallbackInvokeRequest): pulumirpc.callback.CallbackInvokeResponse
  }
  
  class CallbacksBlockingStub(channel: _root_.io.grpc.Channel, options: _root_.io.grpc.CallOptions = _root_.io.grpc.CallOptions.DEFAULT) extends _root_.io.grpc.stub.AbstractStub[CallbacksBlockingStub](channel, options) with CallbacksBlockingClient {
    /** Invoke invokes a given callback, identified by its token.
      */
    override def invoke(request: pulumirpc.callback.CallbackInvokeRequest): pulumirpc.callback.CallbackInvokeResponse = {
      _root_.scalapb.grpc.ClientCalls.blockingUnaryCall(channel, METHOD_INVOKE, options, request)
    }
    
    override def build(channel: _root_.io.grpc.Channel, options: _root_.io.grpc.CallOptions): CallbacksBlockingStub = new CallbacksBlockingStub(channel, options)
  }
  
  class CallbacksStub(channel: _root_.io.grpc.Channel, options: _root_.io.grpc.CallOptions = _root_.io.grpc.CallOptions.DEFAULT) extends _root_.io.grpc.stub.AbstractStub[CallbacksStub](channel, options) with Callbacks {
    /** Invoke invokes a given callback, identified by its token.
      */
    override def invoke(request: pulumirpc.callback.CallbackInvokeRequest): scala.concurrent.Future[pulumirpc.callback.CallbackInvokeResponse] = {
      _root_.scalapb.grpc.ClientCalls.asyncUnaryCall(channel, METHOD_INVOKE, options, request)
    }
    
    override def build(channel: _root_.io.grpc.Channel, options: _root_.io.grpc.CallOptions): CallbacksStub = new CallbacksStub(channel, options)
  }
  
  object CallbacksStub extends _root_.io.grpc.stub.AbstractStub.StubFactory[CallbacksStub] {
    override def newStub(channel: _root_.io.grpc.Channel, options: _root_.io.grpc.CallOptions): CallbacksStub = new CallbacksStub(channel, options)
    
    implicit val stubFactory: _root_.io.grpc.stub.AbstractStub.StubFactory[CallbacksStub] = this
  }
  
  def bindService(serviceImpl: Callbacks, executionContext: scala.concurrent.ExecutionContext): _root_.io.grpc.ServerServiceDefinition = Callbacks.bindService(serviceImpl, executionContext)
  
  def blockingStub(channel: _root_.io.grpc.Channel): CallbacksBlockingStub = new CallbacksBlockingStub(channel)
  
  def stub(channel: _root_.io.grpc.Channel): CallbacksStub = new CallbacksStub(channel)
  
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.ServiceDescriptor = pulumirpc.callback.CallbackProto.javaDescriptor.getServices().get(0)
  
}