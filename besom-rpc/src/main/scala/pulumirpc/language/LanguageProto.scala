// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!

package pulumirpc.language

object LanguageProto extends _root_.scalapb.GeneratedFileObject {
  lazy val dependencies: Seq[_root_.scalapb.GeneratedFileObject] = Seq(
    pulumirpc.codegen.hcl.HclProto,
    pulumirpc.plugin.PluginProto,
    com.google.protobuf.empty.EmptyProto,
    com.google.protobuf.struct.StructProto
  )
  lazy val messagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[? <: _root_.scalapb.GeneratedMessage]] =
    Seq[_root_.scalapb.GeneratedMessageCompanion[? <: _root_.scalapb.GeneratedMessage]](
      pulumirpc.language.ProgramInfo,
      pulumirpc.language.AboutRequest,
      pulumirpc.language.AboutResponse,
      pulumirpc.language.GetProgramDependenciesRequest,
      pulumirpc.language.DependencyInfo,
      pulumirpc.language.GetProgramDependenciesResponse,
      pulumirpc.language.GetRequiredPluginsRequest,
      pulumirpc.language.GetRequiredPluginsResponse,
      pulumirpc.language.RunRequest,
      pulumirpc.language.RunResponse,
      pulumirpc.language.InstallDependenciesRequest,
      pulumirpc.language.InstallDependenciesResponse,
      pulumirpc.language.RuntimeOptionsRequest,
      pulumirpc.language.RuntimeOptionPrompt,
      pulumirpc.language.RuntimeOptionsResponse,
      pulumirpc.language.RunPluginRequest,
      pulumirpc.language.RunPluginResponse,
      pulumirpc.language.GenerateProgramRequest,
      pulumirpc.language.GenerateProgramResponse,
      pulumirpc.language.GenerateProjectRequest,
      pulumirpc.language.GenerateProjectResponse,
      pulumirpc.language.GeneratePackageRequest,
      pulumirpc.language.GeneratePackageResponse,
      pulumirpc.language.PackRequest,
      pulumirpc.language.PackResponse
    )
  private lazy val ProtoBytes: _root_.scala.Array[Byte] =
      scalapb.Encoding.fromBase64(scala.collection.immutable.Seq(
  """ChVwdWx1bWkvbGFuZ3VhZ2UucHJvdG8SCXB1bHVtaXJwYxoYcHVsdW1pL2NvZGVnZW4vaGNsLnByb3RvGhNwdWx1bWkvcGx1Z
  2luLnByb3RvGhtnb29nbGUvcHJvdG9idWYvZW1wdHkucHJvdG8aHGdvb2dsZS9wcm90b2J1Zi9zdHJ1Y3QucHJvdG8i/wEKC1Byb
  2dyYW1JbmZvEjkKDnJvb3RfZGlyZWN0b3J5GAEgASgJQhLiPw8SDXJvb3REaXJlY3RvcnlSDXJvb3REaXJlY3RvcnkSQgoRcHJvZ
  3JhbV9kaXJlY3RvcnkYAiABKAlCFeI/EhIQcHJvZ3JhbURpcmVjdG9yeVIQcHJvZ3JhbURpcmVjdG9yeRIwCgtlbnRyeV9wb2lud
  BgDIAEoCUIP4j8MEgplbnRyeVBvaW50UgplbnRyeVBvaW50Ej8KB29wdGlvbnMYBCABKAsyFy5nb29nbGUucHJvdG9idWYuU3Ryd
  WN0QgziPwkSB29wdGlvbnNSB29wdGlvbnMiRQoMQWJvdXRSZXF1ZXN0EjUKBGluZm8YASABKAsyFi5wdWx1bWlycGMuUHJvZ3Jhb
  UluZm9CCeI/BhIEaW5mb1IEaW5mbyKOAgoNQWJvdXRSZXNwb25zZRIvCgpleGVjdXRhYmxlGAEgASgJQg/iPwwSCmV4ZWN1dGFib
  GVSCmV4ZWN1dGFibGUSJgoHdmVyc2lvbhgCIAEoCUIM4j8JEgd2ZXJzaW9uUgd2ZXJzaW9uElEKCG1ldGFkYXRhGAMgAygLMiYuc
  HVsdW1pcnBjLkFib3V0UmVzcG9uc2UuTWV0YWRhdGFFbnRyeUIN4j8KEghtZXRhZGF0YVIIbWV0YWRhdGEaUQoNTWV0YWRhdGFFb
  nRyeRIaCgNrZXkYASABKAlCCOI/BRIDa2V5UgNrZXkSIAoFdmFsdWUYAiABKAlCCuI/BxIFdmFsdWVSBXZhbHVlOgI4ASKdAgodR
  2V0UHJvZ3JhbURlcGVuZGVuY2llc1JlcXVlc3QSKAoHcHJvamVjdBgBIAEoCUIOGAHiPwkSB3Byb2plY3RSB3Byb2plY3QSHAoDc
  HdkGAIgASgJQgoYAeI/BRIDcHdkUgNwd2QSKAoHcHJvZ3JhbRgDIAEoCUIOGAHiPwkSB3Byb2dyYW1SB3Byb2dyYW0SUwoWdHJhb
  nNpdGl2ZURlcGVuZGVuY2llcxgEIAEoCEIb4j8YEhZ0cmFuc2l0aXZlRGVwZW5kZW5jaWVzUhZ0cmFuc2l0aXZlRGVwZW5kZW5ja
  WVzEjUKBGluZm8YBSABKAsyFi5wdWx1bWlycGMuUHJvZ3JhbUluZm9CCeI/BhIEaW5mb1IEaW5mbyJXCg5EZXBlbmRlbmN5SW5mb
  xIdCgRuYW1lGAEgASgJQgniPwYSBG5hbWVSBG5hbWUSJgoHdmVyc2lvbhgCIAEoCUIM4j8JEgd2ZXJzaW9uUgd2ZXJzaW9uInIKH
  kdldFByb2dyYW1EZXBlbmRlbmNpZXNSZXNwb25zZRJQCgxkZXBlbmRlbmNpZXMYASADKAsyGS5wdWx1bWlycGMuRGVwZW5kZW5je
  UluZm9CEeI/DhIMZGVwZW5kZW5jaWVzUgxkZXBlbmRlbmNpZXMixAEKGUdldFJlcXVpcmVkUGx1Z2luc1JlcXVlc3QSKAoHcHJva
  mVjdBgBIAEoCUIOGAHiPwkSB3Byb2plY3RSB3Byb2plY3QSHAoDcHdkGAIgASgJQgoYAeI/BRIDcHdkUgNwd2QSKAoHcHJvZ3Jhb
  RgDIAEoCUIOGAHiPwkSB3Byb2dyYW1SB3Byb2dyYW0SNQoEaW5mbxgEIAEoCzIWLnB1bHVtaXJwYy5Qcm9ncmFtSW5mb0IJ4j8GE
  gRpbmZvUgRpbmZvImEKGkdldFJlcXVpcmVkUGx1Z2luc1Jlc3BvbnNlEkMKB3BsdWdpbnMYASADKAsyGy5wdWx1bWlycGMuUGx1Z
  2luRGVwZW5kZW5jeUIM4j8JEgdwbHVnaW5zUgdwbHVnaW5zIpYHCgpSdW5SZXF1ZXN0EiYKB3Byb2plY3QYASABKAlCDOI/CRIHc
  HJvamVjdFIHcHJvamVjdBIgCgVzdGFjaxgCIAEoCUIK4j8HEgVzdGFja1IFc3RhY2sSGgoDcHdkGAMgASgJQgjiPwUSA3B3ZFIDc
  HdkEigKB3Byb2dyYW0YBCABKAlCDhgB4j8JEgdwcm9ncmFtUgdwcm9ncmFtEh0KBGFyZ3MYBSADKAlCCeI/BhIEYXJnc1IEYXJnc
  xJGCgZjb25maWcYBiADKAsyIS5wdWx1bWlycGMuUnVuUmVxdWVzdC5Db25maWdFbnRyeUIL4j8IEgZjb25maWdSBmNvbmZpZxIjC
  gZkcnlSdW4YByABKAhCC+I/CBIGZHJ5UnVuUgZkcnlSdW4SKQoIcGFyYWxsZWwYCCABKAVCDeI/ChIIcGFyYWxsZWxSCHBhcmFsb
  GVsEjwKD21vbml0b3JfYWRkcmVzcxgJIAEoCUIT4j8QEg5tb25pdG9yQWRkcmVzc1IObW9uaXRvckFkZHJlc3MSLAoJcXVlcnlNb
  2RlGAogASgIQg7iPwsSCXF1ZXJ5TW9kZVIJcXVlcnlNb2RlEkEKEGNvbmZpZ1NlY3JldEtleXMYCyADKAlCFeI/EhIQY29uZmlnU
  2VjcmV0S2V5c1IQY29uZmlnU2VjcmV0S2V5cxI1Cgxvcmdhbml6YXRpb24YDCABKAlCEeI/DhIMb3JnYW5pemF0aW9uUgxvcmdhb
  ml6YXRpb24SXQoRY29uZmlnUHJvcGVydHlNYXAYDSABKAsyFy5nb29nbGUucHJvdG9idWYuU3RydWN0QhbiPxMSEWNvbmZpZ1Byb
  3BlcnR5TWFwUhFjb25maWdQcm9wZXJ0eU1hcBI1CgRpbmZvGA4gASgLMhYucHVsdW1pcnBjLlByb2dyYW1JbmZvQgniPwYSBGluZ
  m9SBGluZm8SNgoNbG9hZGVyX3RhcmdldBgPIAEoCUIR4j8OEgxsb2FkZXJUYXJnZXRSDGxvYWRlclRhcmdldBI8Cg9hdHRhY2hfZ
  GVidWdnZXIYECABKAhCE+I/EBIOYXR0YWNoRGVidWdnZXJSDmF0dGFjaERlYnVnZ2VyGk8KC0NvbmZpZ0VudHJ5EhoKA2tleRgBI
  AEoCUII4j8FEgNrZXlSA2tleRIgCgV2YWx1ZRgCIAEoCUIK4j8HEgV2YWx1ZVIFdmFsdWU6AjgBIk4KC1J1blJlc3BvbnNlEiAKB
  WVycm9yGAEgASgJQgriPwcSBWVycm9yUgVlcnJvchIdCgRiYWlsGAIgASgIQgniPwYSBGJhaWxSBGJhaWwikAIKGkluc3RhbGxEZ
  XBlbmRlbmNpZXNSZXF1ZXN0Ei4KCWRpcmVjdG9yeRgBIAEoCUIQGAHiPwsSCWRpcmVjdG9yeVIJZGlyZWN0b3J5EjAKC2lzX3Rlc
  m1pbmFsGAIgASgIQg/iPwwSCmlzVGVybWluYWxSCmlzVGVybWluYWwSNQoEaW5mbxgDIAEoCzIWLnB1bHVtaXJwYy5Qcm9ncmFtS
  W5mb0IJ4j8GEgRpbmZvUgRpbmZvElkKGnVzZV9sYW5ndWFnZV92ZXJzaW9uX3Rvb2xzGAQgASgIQhziPxkSF3VzZUxhbmd1YWdlV
  mVyc2lvblRvb2xzUhd1c2VMYW5ndWFnZVZlcnNpb25Ub29scyJnChtJbnN0YWxsRGVwZW5kZW5jaWVzUmVzcG9uc2USIwoGc3Rkb
  3V0GAEgASgMQgviPwgSBnN0ZG91dFIGc3Rkb3V0EiMKBnN0ZGVychgCIAEoDEIL4j8IEgZzdGRlcnJSBnN0ZGVyciJOChVSdW50a
  W1lT3B0aW9uc1JlcXVlc3QSNQoEaW5mbxgBIAEoCzIWLnB1bHVtaXJwYy5Qcm9ncmFtSW5mb0IJ4j8GEgRpbmZvUgRpbmZvItYFC
  hNSdW50aW1lT3B0aW9uUHJvbXB0EhoKA2tleRgBIAEoCUII4j8FEgNrZXlSA2tleRIyCgtkZXNjcmlwdGlvbhgCIAEoCUIQ4j8NE
  gtkZXNjcmlwdGlvblILZGVzY3JpcHRpb24SYQoKcHJvbXB0VHlwZRgDIAEoDjIwLnB1bHVtaXJwYy5SdW50aW1lT3B0aW9uUHJvb
  XB0LlJ1bnRpbWVPcHRpb25UeXBlQg/iPwwSCnByb21wdFR5cGVSCnByb21wdFR5cGUSWQoHY2hvaWNlcxgEIAMoCzIxLnB1bHVta
  XJwYy5SdW50aW1lT3B0aW9uUHJvbXB0LlJ1bnRpbWVPcHRpb25WYWx1ZUIM4j8JEgdjaG9pY2VzUgdjaG9pY2VzElkKB2RlZmF1b
  HQYBSABKAsyMS5wdWx1bWlycGMuUnVudGltZU9wdGlvblByb21wdC5SdW50aW1lT3B0aW9uVmFsdWVCDOI/CRIHZGVmYXVsdFIHZ
  GVmYXVsdBqQAgoSUnVudGltZU9wdGlvblZhbHVlEmEKCnByb21wdFR5cGUYASABKA4yMC5wdWx1bWlycGMuUnVudGltZU9wdGlvb
  lByb21wdC5SdW50aW1lT3B0aW9uVHlwZUIP4j8MEgpwcm9tcHRUeXBlUgpwcm9tcHRUeXBlEjIKC3N0cmluZ1ZhbHVlGAIgASgJQ
  hDiPw0SC3N0cmluZ1ZhbHVlUgtzdHJpbmdWYWx1ZRIvCgppbnQzMlZhbHVlGAMgASgFQg/iPwwSCmludDMyVmFsdWVSCmludDMyV
  mFsdWUSMgoLZGlzcGxheU5hbWUYBCABKAlCEOI/DRILZGlzcGxheU5hbWVSC2Rpc3BsYXlOYW1lIkMKEVJ1bnRpbWVPcHRpb25Ue
  XBlEhcKBlNUUklORxAAGgviPwgSBlNUUklORxIVCgVJTlQzMhABGgriPwcSBUlOVDMyImAKFlJ1bnRpbWVPcHRpb25zUmVzcG9uc
  2USRgoHcHJvbXB0cxgBIAMoCzIeLnB1bHVtaXJwYy5SdW50aW1lT3B0aW9uUHJvbXB0QgziPwkSB3Byb21wdHNSB3Byb21wdHMiy
  gEKEFJ1blBsdWdpblJlcXVlc3QSGgoDcHdkGAEgASgJQgjiPwUSA3B3ZFIDcHdkEigKB3Byb2dyYW0YAiABKAlCDhgB4j8JEgdwc
  m9ncmFtUgdwcm9ncmFtEh0KBGFyZ3MYAyADKAlCCeI/BhIEYXJnc1IEYXJncxIaCgNlbnYYBCADKAlCCOI/BRIDZW52UgNlbnYSN
  QoEaW5mbxgFIAEoCzIWLnB1bHVtaXJwYy5Qcm9ncmFtSW5mb0IJ4j8GEgRpbmZvUgRpbmZvIpgBChFSdW5QbHVnaW5SZXNwb25zZ
  RIlCgZzdGRvdXQYASABKAxCC+I/CBIGc3Rkb3V0SABSBnN0ZG91dBIlCgZzdGRlcnIYAiABKAxCC+I/CBIGc3RkZXJySABSBnN0Z
  GVychIrCghleGl0Y29kZRgDIAEoBUIN4j8KEghleGl0Y29kZUgAUghleGl0Y29kZUIICgZvdXRwdXQimgIKFkdlbmVyYXRlUHJvZ
  3JhbVJlcXVlc3QSUgoGc291cmNlGAEgAygLMi0ucHVsdW1pcnBjLkdlbmVyYXRlUHJvZ3JhbVJlcXVlc3QuU291cmNlRW50cnlCC
  +I/CBIGc291cmNlUgZzb3VyY2USNgoNbG9hZGVyX3RhcmdldBgCIAEoCUIR4j8OEgxsb2FkZXJUYXJnZXRSDGxvYWRlclRhcmdld
  BIjCgZzdHJpY3QYAyABKAhCC+I/CBIGc3RyaWN0UgZzdHJpY3QaTwoLU291cmNlRW50cnkSGgoDa2V5GAEgASgJQgjiPwUSA2tle
  VIDa2V5EiAKBXZhbHVlGAIgASgJQgriPwcSBXZhbHVlUgV2YWx1ZToCOAEikgIKF0dlbmVyYXRlUHJvZ3JhbVJlc3BvbnNlElEKC
  2RpYWdub3N0aWNzGAEgAygLMh0ucHVsdW1pcnBjLmNvZGVnZW4uRGlhZ25vc3RpY0IQ4j8NEgtkaWFnbm9zdGljc1ILZGlhZ25vc
  3RpY3MSUwoGc291cmNlGAIgAygLMi4ucHVsdW1pcnBjLkdlbmVyYXRlUHJvZ3JhbVJlc3BvbnNlLlNvdXJjZUVudHJ5QgviPwgSB
  nNvdXJjZVIGc291cmNlGk8KC1NvdXJjZUVudHJ5EhoKA2tleRgBIAEoCUII4j8FEgNrZXlSA2tleRIgCgV2YWx1ZRgCIAEoDEIK4
  j8HEgV2YWx1ZVIFdmFsdWU6AjgBIvwDChZHZW5lcmF0ZVByb2plY3RSZXF1ZXN0Ej8KEHNvdXJjZV9kaXJlY3RvcnkYASABKAlCF
  OI/ERIPc291cmNlRGlyZWN0b3J5Ug9zb3VyY2VEaXJlY3RvcnkSPwoQdGFyZ2V0X2RpcmVjdG9yeRgCIAEoCUIU4j8REg90YXJnZ
  XREaXJlY3RvcnlSD3RhcmdldERpcmVjdG9yeRImCgdwcm9qZWN0GAMgASgJQgziPwkSB3Byb2plY3RSB3Byb2plY3QSIwoGc3Rya
  WN0GAQgASgIQgviPwgSBnN0cmljdFIGc3RyaWN0EjYKDWxvYWRlcl90YXJnZXQYBSABKAlCEeI/DhIMbG9hZGVyVGFyZ2V0Ugxsb
  2FkZXJUYXJnZXQSfwoSbG9jYWxfZGVwZW5kZW5jaWVzGAYgAygLMjgucHVsdW1pcnBjLkdlbmVyYXRlUHJvamVjdFJlcXVlc3QuT
  G9jYWxEZXBlbmRlbmNpZXNFbnRyeUIW4j8TEhFsb2NhbERlcGVuZGVuY2llc1IRbG9jYWxEZXBlbmRlbmNpZXMaWgoWTG9jYWxEZ
  XBlbmRlbmNpZXNFbnRyeRIaCgNrZXkYASABKAlCCOI/BRIDa2V5UgNrZXkSIAoFdmFsdWUYAiABKAlCCuI/BxIFdmFsdWVSBXZhb
  HVlOgI4ASJsChdHZW5lcmF0ZVByb2plY3RSZXNwb25zZRJRCgtkaWFnbm9zdGljcxgBIAMoCzIdLnB1bHVtaXJwYy5jb2RlZ2VuL
  kRpYWdub3N0aWNCEOI/DRILZGlhZ25vc3RpY3NSC2RpYWdub3N0aWNzItwEChZHZW5lcmF0ZVBhY2thZ2VSZXF1ZXN0EiwKCWRpc
  mVjdG9yeRgBIAEoCUIO4j8LEglkaXJlY3RvcnlSCWRpcmVjdG9yeRIjCgZzY2hlbWEYAiABKAlCC+I/CBIGc2NoZW1hUgZzY2hlb
  WESYwoLZXh0cmFfZmlsZXMYAyADKAsyMS5wdWx1bWlycGMuR2VuZXJhdGVQYWNrYWdlUmVxdWVzdC5FeHRyYUZpbGVzRW50cnlCD
  +I/DBIKZXh0cmFGaWxlc1IKZXh0cmFGaWxlcxI2Cg1sb2FkZXJfdGFyZ2V0GAQgASgJQhHiPw4SDGxvYWRlclRhcmdldFIMbG9hZ
  GVyVGFyZ2V0En8KEmxvY2FsX2RlcGVuZGVuY2llcxgFIAMoCzI4LnB1bHVtaXJwYy5HZW5lcmF0ZVBhY2thZ2VSZXF1ZXN0LkxvY
  2FsRGVwZW5kZW5jaWVzRW50cnlCFuI/ExIRbG9jYWxEZXBlbmRlbmNpZXNSEWxvY2FsRGVwZW5kZW5jaWVzEiAKBWxvY2FsGAYgA
  SgIQgriPwcSBWxvY2FsUgVsb2NhbBpTCg9FeHRyYUZpbGVzRW50cnkSGgoDa2V5GAEgASgJQgjiPwUSA2tleVIDa2V5EiAKBXZhb
  HVlGAIgASgMQgriPwcSBXZhbHVlUgV2YWx1ZToCOAEaWgoWTG9jYWxEZXBlbmRlbmNpZXNFbnRyeRIaCgNrZXkYASABKAlCCOI/B
  RIDa2V5UgNrZXkSIAoFdmFsdWUYAiABKAlCCuI/BxIFdmFsdWVSBXZhbHVlOgI4ASJsChdHZW5lcmF0ZVBhY2thZ2VSZXNwb25zZ
  RJRCgtkaWFnbm9zdGljcxgBIAMoCzIdLnB1bHVtaXJwYy5jb2RlZ2VuLkRpYWdub3N0aWNCEOI/DRILZGlhZ25vc3RpY3NSC2RpY
  Wdub3N0aWNzIqEBCgtQYWNrUmVxdWVzdBJCChFwYWNrYWdlX2RpcmVjdG9yeRgBIAEoCUIV4j8SEhBwYWNrYWdlRGlyZWN0b3J5U
  hBwYWNrYWdlRGlyZWN0b3J5Ek4KFWRlc3RpbmF0aW9uX2RpcmVjdG9yeRgCIAEoCUIZ4j8WEhRkZXN0aW5hdGlvbkRpcmVjdG9ye
  VIUZGVzdGluYXRpb25EaXJlY3RvcnkiRgoMUGFja1Jlc3BvbnNlEjYKDWFydGlmYWN0X3BhdGgYASABKAlCEeI/DhIMYXJ0aWZhY
  3RQYXRoUgxhcnRpZmFjdFBhdGgyhAgKD0xhbmd1YWdlUnVudGltZRJjChJHZXRSZXF1aXJlZFBsdWdpbnMSJC5wdWx1bWlycGMuR
  2V0UmVxdWlyZWRQbHVnaW5zUmVxdWVzdBolLnB1bHVtaXJwYy5HZXRSZXF1aXJlZFBsdWdpbnNSZXNwb25zZSIAEjYKA1J1bhIVL
  nB1bHVtaXJwYy5SdW5SZXF1ZXN0GhYucHVsdW1pcnBjLlJ1blJlc3BvbnNlIgASQAoNR2V0UGx1Z2luSW5mbxIWLmdvb2dsZS5wc
  m90b2J1Zi5FbXB0eRoVLnB1bHVtaXJwYy5QbHVnaW5JbmZvIgASaAoTSW5zdGFsbERlcGVuZGVuY2llcxIlLnB1bHVtaXJwYy5Jb
  nN0YWxsRGVwZW5kZW5jaWVzUmVxdWVzdBomLnB1bHVtaXJwYy5JbnN0YWxsRGVwZW5kZW5jaWVzUmVzcG9uc2UiADABEl4KFVJ1b
  nRpbWVPcHRpb25zUHJvbXB0cxIgLnB1bHVtaXJwYy5SdW50aW1lT3B0aW9uc1JlcXVlc3QaIS5wdWx1bWlycGMuUnVudGltZU9wd
  GlvbnNSZXNwb25zZSIAEjwKBUFib3V0EhcucHVsdW1pcnBjLkFib3V0UmVxdWVzdBoYLnB1bHVtaXJwYy5BYm91dFJlc3BvbnNlI
  gASbwoWR2V0UHJvZ3JhbURlcGVuZGVuY2llcxIoLnB1bHVtaXJwYy5HZXRQcm9ncmFtRGVwZW5kZW5jaWVzUmVxdWVzdBopLnB1b
  HVtaXJwYy5HZXRQcm9ncmFtRGVwZW5kZW5jaWVzUmVzcG9uc2UiABJKCglSdW5QbHVnaW4SGy5wdWx1bWlycGMuUnVuUGx1Z2luU
  mVxdWVzdBocLnB1bHVtaXJwYy5SdW5QbHVnaW5SZXNwb25zZSIAMAESWgoPR2VuZXJhdGVQcm9ncmFtEiEucHVsdW1pcnBjLkdlb
  mVyYXRlUHJvZ3JhbVJlcXVlc3QaIi5wdWx1bWlycGMuR2VuZXJhdGVQcm9ncmFtUmVzcG9uc2UiABJaCg9HZW5lcmF0ZVByb2plY
  3QSIS5wdWx1bWlycGMuR2VuZXJhdGVQcm9qZWN0UmVxdWVzdBoiLnB1bHVtaXJwYy5HZW5lcmF0ZVByb2plY3RSZXNwb25zZSIAE
  loKD0dlbmVyYXRlUGFja2FnZRIhLnB1bHVtaXJwYy5HZW5lcmF0ZVBhY2thZ2VSZXF1ZXN0GiIucHVsdW1pcnBjLkdlbmVyYXRlU
  GFja2FnZVJlc3BvbnNlIgASOQoEUGFjaxIWLnB1bHVtaXJwYy5QYWNrUmVxdWVzdBoXLnB1bHVtaXJwYy5QYWNrUmVzcG9uc2UiA
  EI0WjJnaXRodWIuY29tL3B1bHVtaS9wdWx1bWkvc2RrL3YzL3Byb3RvL2dvO3B1bHVtaXJwY2IGcHJvdG8z"""
      ).mkString)
  lazy val scalaDescriptor: _root_.scalapb.descriptors.FileDescriptor = {
    val scalaProto = com.google.protobuf.descriptor.FileDescriptorProto.parseFrom(ProtoBytes)
    _root_.scalapb.descriptors.FileDescriptor.buildFrom(scalaProto, dependencies.map(_.scalaDescriptor))
  }
  lazy val javaDescriptor: com.google.protobuf.Descriptors.FileDescriptor = {
    val javaProto = com.google.protobuf.DescriptorProtos.FileDescriptorProto.parseFrom(ProtoBytes)
    com.google.protobuf.Descriptors.FileDescriptor.buildFrom(javaProto, _root_.scala.Array(
      pulumirpc.codegen.hcl.HclProto.javaDescriptor,
      pulumirpc.plugin.PluginProto.javaDescriptor,
      com.google.protobuf.empty.EmptyProto.javaDescriptor,
      com.google.protobuf.struct.StructProto.javaDescriptor
    ))
  }
  @deprecated("Use javaDescriptor instead. In a future version this will refer to scalaDescriptor.", "ScalaPB 0.5.47")
  def descriptor: com.google.protobuf.Descriptors.FileDescriptor = javaDescriptor
}