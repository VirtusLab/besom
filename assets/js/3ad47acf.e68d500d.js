"use strict";(self.webpackChunkbesom_website=self.webpackChunkbesom_website||[]).push([[40],{5680:(e,n,t)=>{t.d(n,{xA:()=>c,yg:()=>y});var r=t(6540);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var l=r.createContext({}),p=function(e){var n=r.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},c=function(e){var n=p(e.components);return r.createElement(l.Provider,{value:n},e.children)},m="mdxType",u={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},d=r.forwardRef((function(e,n){var t=e.components,o=e.mdxType,a=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),m=p(t),d=o,y=m["".concat(l,".").concat(d)]||m[d]||u[d]||a;return t?r.createElement(y,i(i({ref:n},c),{},{components:t})):r.createElement(y,i({ref:n},c))}));function y(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var a=t.length,i=new Array(a);i[0]=d;var s={};for(var l in n)hasOwnProperty.call(n,l)&&(s[l]=n[l]);s.originalType=e,s[m]="string"==typeof e?e:o,i[1]=s;for(var p=2;p<a;p++)i[p]=t[p];return r.createElement.apply(null,i)}return r.createElement.apply(null,t)}d.displayName="MDXCreateElement"},8482:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>i,default:()=>u,frontMatter:()=>a,metadata:()=>s,toc:()=>p});var r=t(8168),o=(t(6540),t(5680));const a={title:"JSON API"},i=void 0,s={unversionedId:"json",id:"json",title:"JSON API",description:"Besom comes with it's own JSON library to avoid any issues with classpath clashes with mainstream JSON libraries when embedding",source:"@site/docs/json.md",sourceDirName:".",slug:"/json",permalink:"/besom/docs/json",draft:!1,editUrl:"https://github.com/VirtusLab/besom/tree/main/website/docs/json.md",tags:[],version:"current",frontMatter:{title:"JSON API"},sidebar:"docsSidebar",previous:{title:"Components",permalink:"/besom/docs/components"},next:{title:"Compiler plugin",permalink:"/besom/docs/compiler_plugin"}},l={},p=[{value:"JSON Interpolator",id:"json-interpolator",level:4}],c={toc:p},m="wrapper";function u(e){let{components:n,...t}=e;return(0,o.yg)(m,(0,r.A)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,o.yg)("p",null,"Besom comes with it's own JSON library to avoid any issues with classpath clashes with mainstream JSON libraries when embedding\nBesom infrastructural programs in Scala applications via AutomationAPI. "),(0,o.yg)("p",null,"Package ",(0,o.yg)("inlineCode",{parentName:"p"},"besom.json")," is a fork of well-known, battle-tested\n",(0,o.yg)("a",{parentName:"p",href:"https://github.com/spray/spray-json"},"spray-json")," library. Specifically, the ",(0,o.yg)("inlineCode",{parentName:"p"},"spray-json")," has been ported to Scala 3 with some\nbreaking changes and received support for ",(0,o.yg)("inlineCode",{parentName:"p"},"derives")," keyword. Another change is that import of ",(0,o.yg)("inlineCode",{parentName:"p"},"besom.json.*")," brings all the\n",(0,o.yg)("inlineCode",{parentName:"p"},"JsonFormat")," instances from ",(0,o.yg)("inlineCode",{parentName:"p"},"DefaultJsonProtocol")," into scope and to get the old experience to how ",(0,o.yg)("inlineCode",{parentName:"p"},"spray-json")," operated one needs\nto import ",(0,o.yg)("inlineCode",{parentName:"p"},"besom.json.custom.*"),". "),(0,o.yg)("p",null,"A sample use of the package:"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-scala"},'import besom.json.*\n\ncase class Color(name: String, red: Int, green: Int, blue: Int = 160) derives JsonFormat\nval color = Color("CadetBlue", 95, 158)\n\nval json = """{"name":"CadetBlue","red":95,"green":158}"""\n\nassert(color.toJson.convertTo[Color] == color)\nassert(json.parseJson.convertTo[Color] == color)\n')),(0,o.yg)("h4",{id:"json-interpolator"},"JSON Interpolator"),(0,o.yg)("p",null,"The ",(0,o.yg)("inlineCode",{parentName:"p"},"besom-json")," package has also a convenient JSON interpolator that allows one to rewrite snippets like this\nwhere a cloud provider API expects a JSON string:"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-scala"},'s3.BucketPolicyArgs(\n  bucket = feedBucket.id,\n  policy = JsObject(\n    "Version" -> JsString("2012-10-17"),\n    "Statement" -> JsArray(\n      JsObject(\n        "Sid" -> JsString("PublicReadGetObject"),\n        "Effect" -> JsString("Allow"),\n        "Principal" -> JsObject(\n          "AWS" -> JsString("*")\n        ),\n        "Action" -> JsArray(JsString("s3:GetObject")),\n        "Resource" -> JsArray(JsString(s"arn:aws:s3:::${name}/*"))\n      )\n    )\n  ).prettyPrint\n)\n')),(0,o.yg)("p",null,"into simpler and less clunky interpolated variant like this: "),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-scala"},'s3.BucketPolicyArgs(\n  bucket = feedBucket.id,\n  policy = json"""{\n    "Version": "2012-10-17",\n    "Statement": [{\n      "Sid": "PublicReadGetObject",\n      "Effect": "Allow",\n      "Principal": {\n        "AWS": "*"\n      },\n      "Action": ["s3:GetObject"],\n      "Resource": ["arn:aws:s3::${name}/*"]\n    }]\n  }""".map(_.prettyPrint)\n)\n')),(0,o.yg)("p",null,"For ease of use with Besom ",(0,o.yg)("inlineCode",{parentName:"p"},"Input"),"s in provider packages interpolator returns an ",(0,o.yg)("inlineCode",{parentName:"p"},"Output[JsValue]"),"."),(0,o.yg)("p",null,"The JSON interpolator is available when using ",(0,o.yg)("inlineCode",{parentName:"p"},"import besom.json.*")," or ",(0,o.yg)("inlineCode",{parentName:"p"},"import besom.util.JsonInterpolator.*")," imports. Interpolator is\ncompletely ",(0,o.yg)("strong",{parentName:"p"},"compile-time type safe")," and verifies JSON string for correctness by substituting. The only types that can be interpolated are\n",(0,o.yg)("inlineCode",{parentName:"p"},"String"),", ",(0,o.yg)("inlineCode",{parentName:"p"},"Int"),", ",(0,o.yg)("inlineCode",{parentName:"p"},"Short"),", ",(0,o.yg)("inlineCode",{parentName:"p"},"Long"),", ",(0,o.yg)("inlineCode",{parentName:"p"},"Float"),", ",(0,o.yg)("inlineCode",{parentName:"p"},"Double"),", ",(0,o.yg)("inlineCode",{parentName:"p"},"JsValue")," and ",(0,o.yg)("inlineCode",{parentName:"p"},"Option")," and ",(0,o.yg)("inlineCode",{parentName:"p"},"Output")," of the former (in whatever amount of nesting).\nIf you need to interpolate a more complex type it's advised to derive a ",(0,o.yg)("inlineCode",{parentName:"p"},"JsonFormat")," for it and convert it to ",(0,o.yg)("inlineCode",{parentName:"p"},"JsValue"),"."))}u.isMDXComponent=!0}}]);