"use strict";(self.webpackChunkbesom_website=self.webpackChunkbesom_website||[]).push([[40],{1701:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>a,contentTitle:()=>c,default:()=>p,frontMatter:()=>i,metadata:()=>o,toc:()=>l});const o=JSON.parse('{"id":"json","title":"JSON API","description":"Besom comes with it\'s own JSON library to avoid any issues with classpath clashes with mainstream JSON libraries when embedding","source":"@site/docs/json.md","sourceDirName":".","slug":"/json","permalink":"/besom/docs/json","draft":false,"unlisted":false,"editUrl":"https://github.com/VirtusLab/besom/tree/main/website/docs/json.md","tags":[],"version":"current","frontMatter":{"title":"JSON API"},"sidebar":"docsSidebar","previous":{"title":"Components","permalink":"/besom/docs/components"},"next":{"title":"Compiler plugin","permalink":"/besom/docs/compiler_plugin"}}');var t=s(4848),r=s(8453);const i={title:"JSON API"},c=void 0,a={},l=[{value:"JSON Interpolator",id:"json-interpolator",level:4}];function d(e){const n={a:"a",code:"code",h4:"h4",p:"p",pre:"pre",strong:"strong",...(0,r.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.p,{children:"Besom comes with it's own JSON library to avoid any issues with classpath clashes with mainstream JSON libraries when embedding\nBesom infrastructural programs in Scala applications via AutomationAPI."}),"\n",(0,t.jsxs)(n.p,{children:["Package ",(0,t.jsx)(n.code,{children:"besom.json"})," is a fork of well-known, battle-tested\n",(0,t.jsx)(n.a,{href:"https://github.com/spray/spray-json",children:"spray-json"})," library. Specifically, the ",(0,t.jsx)(n.code,{children:"spray-json"})," has been ported to Scala 3 with some\nbreaking changes and received support for ",(0,t.jsx)(n.code,{children:"derives"})," keyword. Another change is that import of ",(0,t.jsx)(n.code,{children:"besom.json.*"})," brings all the\n",(0,t.jsx)(n.code,{children:"JsonFormat"})," instances from ",(0,t.jsx)(n.code,{children:"DefaultJsonProtocol"})," into scope and to get the old experience to how ",(0,t.jsx)(n.code,{children:"spray-json"})," operated one needs\nto import ",(0,t.jsx)(n.code,{children:"besom.json.custom.*"}),"."]}),"\n",(0,t.jsx)(n.p,{children:"A sample use of the package:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-scala",children:'import besom.json.*\n\ncase class Color(name: String, red: Int, green: Int, blue: Int = 160) derives JsonFormat\nval color = Color("CadetBlue", 95, 158)\n\nval json = """{"name":"CadetBlue","red":95,"green":158}"""\n\nassert(color.toJson.convertTo[Color] == color)\nassert(json.parseJson.convertTo[Color] == color)\n'})}),"\n",(0,t.jsx)(n.h4,{id:"json-interpolator",children:"JSON Interpolator"}),"\n",(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.code,{children:"besom-json"})," package has also a convenient JSON interpolator that allows one to rewrite snippets like this\nwhere a cloud provider API expects a JSON string:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-scala",children:'s3.BucketPolicyArgs(\n  bucket = feedBucket.id,\n  policy = JsObject(\n    "Version" -> JsString("2012-10-17"),\n    "Statement" -> JsArray(\n      JsObject(\n        "Sid" -> JsString("PublicReadGetObject"),\n        "Effect" -> JsString("Allow"),\n        "Principal" -> JsObject(\n          "AWS" -> JsString("*")\n        ),\n        "Action" -> JsArray(JsString("s3:GetObject")),\n        "Resource" -> JsArray(JsString(s"arn:aws:s3:::${name}/*"))\n      )\n    )\n  ).prettyPrint\n)\n'})}),"\n",(0,t.jsx)(n.p,{children:"into simpler and less clunky interpolated variant like this:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-scala",children:'s3.BucketPolicyArgs(\n  bucket = feedBucket.id,\n  policy = json"""{\n    "Version": "2012-10-17",\n    "Statement": [{\n      "Sid": "PublicReadGetObject",\n      "Effect": "Allow",\n      "Principal": {\n        "AWS": "*"\n      },\n      "Action": ["s3:GetObject"],\n      "Resource": ["arn:aws:s3::${name}/*"]\n    }]\n  }""".map(_.prettyPrint)\n)\n'})}),"\n",(0,t.jsxs)(n.p,{children:["For ease of use with Besom ",(0,t.jsx)(n.code,{children:"Input"}),"s in provider packages interpolator returns an ",(0,t.jsx)(n.code,{children:"Output[JsValue]"}),"."]}),"\n",(0,t.jsxs)(n.p,{children:["The JSON interpolator is available when using ",(0,t.jsx)(n.code,{children:"import besom.json.*"})," or ",(0,t.jsx)(n.code,{children:"import besom.util.JsonInterpolator.*"})," imports. Interpolator is\ncompletely ",(0,t.jsx)(n.strong,{children:"compile-time type safe"})," and verifies JSON string for correctness by substituting. The only types that can be interpolated are\n",(0,t.jsx)(n.code,{children:"String"}),", ",(0,t.jsx)(n.code,{children:"Int"}),", ",(0,t.jsx)(n.code,{children:"Short"}),", ",(0,t.jsx)(n.code,{children:"Long"}),", ",(0,t.jsx)(n.code,{children:"Float"}),", ",(0,t.jsx)(n.code,{children:"Double"}),", ",(0,t.jsx)(n.code,{children:"JsValue"})," and ",(0,t.jsx)(n.code,{children:"Option"})," and ",(0,t.jsx)(n.code,{children:"Output"})," of the former (in whatever amount of nesting).\nIf you need to interpolate a more complex type it's advised to derive a ",(0,t.jsx)(n.code,{children:"JsonFormat"})," for it and convert it to ",(0,t.jsx)(n.code,{children:"JsValue"}),"."]})]})}function p(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>i,x:()=>c});var o=s(6540);const t={},r=o.createContext(t);function i(e){const n=o.useContext(r);return o.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:i(e.components),o.createElement(r.Provider,{value:n},e.children)}}}]);