"use strict";(self.webpackChunkbesom_website=self.webpackChunkbesom_website||[]).push([[53],{1109:e=>{e.exports=JSON.parse('{"pluginId":"default","version":"current","label":"Next","banner":null,"badge":false,"noIndex":false,"className":"docs-version-current","isLast":true,"docsSidebars":{"docsSidebar":[{"type":"link","label":"Introduction","href":"/besom/docs/intro","docId":"intro"},{"type":"link","label":"Getting started","href":"/besom/docs/getting_started","docId":"getting_started"},{"type":"link","label":"Tutorial","href":"/besom/docs/tutorial","docId":"tutorial"},{"type":"category","label":"Architecture","collapsible":true,"collapsed":false,"items":[{"type":"link","label":"Overview","href":"/besom/docs/architecture","docId":"architecture"},{"type":"link","label":"Context and imports","href":"/besom/docs/context","docId":"context"},{"type":"link","label":"Exports","href":"/besom/docs/exports","docId":"exports"},{"type":"link","label":"Resource constructors, outputs and asychronicity","href":"/besom/docs/constructors","docId":"constructors"},{"type":"link","label":"Laziness","href":"/besom/docs/laziness","docId":"laziness"},{"type":"link","label":"Apply methods","href":"/besom/docs/apply_methods","docId":"apply_methods"},{"type":"link","label":"Logging","href":"/besom/docs/logging","docId":"logging"},{"type":"link","label":"Lifting","href":"/besom/docs/lifting","docId":"lifting"},{"type":"link","label":"String interpolation","href":"/besom/docs/interpolator","docId":"interpolator"},{"type":"link","label":"Components","href":"/besom/docs/components","docId":"components"},{"type":"link","label":"Compiler plugin","href":"/besom/docs/compiler_plugin","docId":"compiler_plugin"},{"type":"link","label":"Missing features","href":"/besom/docs/missing","docId":"missing"}]},{"type":"link","label":"API Reference","href":"/besom/docs/api_reference","docId":"api_reference"},{"type":"link","label":"Packages","href":"/besom/docs/packages","docId":"packages"},{"type":"link","label":"Examples","href":"/besom/docs/examples","docId":"examples"},{"type":"link","label":"Pulumi templates","href":"/besom/docs/templates","docId":"templates"}]},"docs":{"api_reference":{"id":"api_reference","title":"API Reference","description":"Coming soon!","sidebar":"docsSidebar"},"apply_methods":{"id":"apply_methods","title":"Apply methods","description":"In Scala apply is a well known syntax that turns any class or object into a function and allows user to invoke it. Pulumi uses apply method in place of functionalities usually covered by map and flatMap duo in Scala. To preserve idiomatic feeling of Besom code Pulumi\'s apply method family is represented by map and flatMap allowing Outputs to be used in for comprehensions.","sidebar":"docsSidebar"},"architecture":{"id":"architecture","title":"Overview","description":"Pulumi runtime is asynchronous by design. The goal is to allow the user\'s program to declare all the necessary resources as fast as possible so that Pulumi engine can make informed decisions about which parts of the deployment plan can be executed in parallel and therefore yield good performance. Each of the Pulumi SDKs reflects this reality by leveraging the language\'s asynchronous datatype to implement the internals of the SDK that communicate with Pulumi engine via gRPC. For Python it\'s asyncio, for JavaScript and TypeScript it\'s Promise, for C# it\'s Task and for Java it\'s CompletableFuture.","sidebar":"docsSidebar"},"compiler_plugin":{"id":"compiler_plugin","title":"Compiler plugin","description":"Besom compiler plugin is a tool that helps to avoid common mistakes when writing Pulumi programs in Scala. It is recommended to use it in all Pulumi programs written in Scala.","sidebar":"docsSidebar"},"components":{"id":"components","title":"Components","description":"Pulumi allows users to define their own logical aggregations of resources called components and so does Besom. The API is a bit different in comparison to other Pulumi SDKs. User is expected to define a case class that will contain all of the Output properties one wants to expose from the internals of the component. The case class has to:","sidebar":"docsSidebar"},"constructors":{"id":"constructors","title":"Resource constructors, outputs and asychronicity","description":"Resource constructor syntax","sidebar":"docsSidebar"},"context":{"id":"context","title":"Context and imports","description":"Pulumi\'s Context is passed around implicitly via Scala\'s Context Function and only used by user-facing functions. The Pulumi.run block exposes Context implicitly. All functions that belong to Besom program but are defined outside of the Pulumi.run block should have the following using clause: (using Context) (or besom.Context using a fully qualified name of the type).","sidebar":"docsSidebar"},"examples":{"id":"examples","title":"Examples","description":"Coming soon!","sidebar":"docsSidebar"},"exports":{"id":"exports","title":"Exports","description":"In other SDKs you are free to call an export method on the Pulumi Context object whenever you want in a program. Besom\'s functional design disallows this - since your program is a function exported keys and values have to be the last value your main function returns:","sidebar":"docsSidebar"},"getting_started":{"id":"getting_started","title":"Getting started","description":"To start your adventure with infrastructure-as-code with Scala follow these steps:","sidebar":"docsSidebar"},"interpolator":{"id":"interpolator","title":"String interpolation","description":"One of the very common use case in Pulumi programs is the need to interpolate a syntax. Given that the most interesting values arrive asynchronously as Outputs of resources that user creates this usually interpolation would require a map call or even a flatMap + map chain for more than one Output (or a for comprehension, alternatively). To make this common pattern easier Besom implements a type-safe interpolator that works with Outputs seamlessly:","sidebar":"docsSidebar"},"intro":{"id":"intro","title":"Introduction","description":"Welcome to Besom, a Pulumi SDK for Scala 3!","sidebar":"docsSidebar"},"laziness":{"id":"laziness","title":"Laziness","description":"Due to Besom\'s lazy semantics it\'s possible to declare resources in code and never actually execute that code. Let\'s expand on the s3Bucket example above:","sidebar":"docsSidebar"},"lifting":{"id":"lifting","title":"Lifting","description":"Besom supports a feature called lifting which allows the user to access properties of data structures held by an Output","sidebar":"docsSidebar"},"logging":{"id":"logging","title":"Logging","description":"In every scope where Pulumi Context is available and global Besom import was included user has the capability to summon logger by writing log with a following severity level used as a logging method\'s name, e.g.:","sidebar":"docsSidebar"},"missing":{"id":"missing","title":"Missing features","description":"Some Pulumi features are not yet implemented. The most notable ones are:","sidebar":"docsSidebar"},"packages":{"id":"packages","title":"Packages","description":"Currently the fastest way to find our published packages is to visit Maven Central Repository search.","sidebar":"docsSidebar"},"templates":{"id":"templates","title":"Pulumi templates","description":"","sidebar":"docsSidebar"},"tutorial":{"id":"tutorial","title":"Tutorial","description":"Introduction","sidebar":"docsSidebar"}}}')}}]);