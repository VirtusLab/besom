// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package pulumirpc.resource

object ResourceProto extends _root_.scalapb.GeneratedFileObject {
  lazy val dependencies: Seq[_root_.scalapb.GeneratedFileObject] = Seq(
    com.google.protobuf.empty.EmptyProto,
    com.google.protobuf.struct.StructProto,
    pulumirpc.provider.ProviderProto,
    pulumirpc.alias.AliasProto,
    pulumirpc.source.SourceProto,
    pulumirpc.callback.CallbackProto
  )
  lazy val messagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] =
    Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]](
      pulumirpc.resource.SupportsFeatureRequest,
      pulumirpc.resource.SupportsFeatureResponse,
      pulumirpc.resource.ReadResourceRequest,
      pulumirpc.resource.ReadResourceResponse,
      pulumirpc.resource.RegisterResourceRequest,
      pulumirpc.resource.RegisterResourceResponse,
      pulumirpc.resource.RegisterResourceOutputsRequest,
      pulumirpc.resource.ResourceInvokeRequest,
      pulumirpc.resource.ResourceCallRequest,
      pulumirpc.resource.TransformResourceOptions,
      pulumirpc.resource.TransformRequest,
      pulumirpc.resource.TransformResponse
    )
  private lazy val ProtoBytes: _root_.scala.Array[Byte] =
      scalapb.Encoding.fromBase64(scala.collection.immutable.Seq(
  """ChVwdWx1bWkvcmVzb3VyY2UucHJvdG8SCXB1bHVtaXJwYxobZ29vZ2xlL3Byb3RvYnVmL2VtcHR5LnByb3RvGhxnb29nbGUvc
  HJvdG9idWYvc3RydWN0LnByb3RvGhVwdWx1bWkvcHJvdmlkZXIucHJvdG8aEnB1bHVtaS9hbGlhcy5wcm90bxoTcHVsdW1pL3Nvd
  XJjZS5wcm90bxoVcHVsdW1pL2NhbGxiYWNrLnByb3RvIjEKFlN1cHBvcnRzRmVhdHVyZVJlcXVlc3QSFwoCaWQYASABKAlCB+I/B
  BICaWRSAmlkIkoKF1N1cHBvcnRzRmVhdHVyZVJlc3BvbnNlEi8KCmhhc1N1cHBvcnQYASABKAhCD+I/DBIKaGFzU3VwcG9ydFIKa
  GFzU3VwcG9ydCKzBwoTUmVhZFJlc291cmNlUmVxdWVzdBIXCgJpZBgBIAEoCUIH4j8EEgJpZFICaWQSHQoEdHlwZRgCIAEoCUIJ4
  j8GEgR0eXBlUgR0eXBlEh0KBG5hbWUYAyABKAlCCeI/BhIEbmFtZVIEbmFtZRIjCgZwYXJlbnQYBCABKAlCC+I/CBIGcGFyZW50U
  gZwYXJlbnQSSAoKcHJvcGVydGllcxgFIAEoCzIXLmdvb2dsZS5wcm90b2J1Zi5TdHJ1Y3RCD+I/DBIKcHJvcGVydGllc1IKcHJvc
  GVydGllcxI1CgxkZXBlbmRlbmNpZXMYBiADKAlCEeI/DhIMZGVwZW5kZW5jaWVzUgxkZXBlbmRlbmNpZXMSKQoIcHJvdmlkZXIYB
  yABKAlCDeI/ChIIcHJvdmlkZXJSCHByb3ZpZGVyEiYKB3ZlcnNpb24YCCABKAlCDOI/CRIHdmVyc2lvblIHdmVyc2lvbhI4Cg1hY
  2NlcHRTZWNyZXRzGAkgASgIQhLiPw8SDWFjY2VwdFNlY3JldHNSDWFjY2VwdFNlY3JldHMSVgoXYWRkaXRpb25hbFNlY3JldE91d
  HB1dHMYCiADKAlCHOI/GRIXYWRkaXRpb25hbFNlY3JldE91dHB1dHNSF2FkZGl0aW9uYWxTZWNyZXRPdXRwdXRzEj4KD2FjY2Vwd
  FJlc291cmNlcxgMIAEoCEIU4j8REg9hY2NlcHRSZXNvdXJjZXNSD2FjY2VwdFJlc291cmNlcxJEChFwbHVnaW5Eb3dubG9hZFVST
  BgNIAEoCUIW4j8TEhFwbHVnaW5Eb3dubG9hZFVSTFIRcGx1Z2luRG93bmxvYWRVUkwScwoPcGx1Z2luQ2hlY2tzdW1zGA8gAygLM
  jMucHVsdW1pcnBjLlJlYWRSZXNvdXJjZVJlcXVlc3QuUGx1Z2luQ2hlY2tzdW1zRW50cnlCFOI/ERIPcGx1Z2luQ2hlY2tzdW1zU
  g9wbHVnaW5DaGVja3N1bXMSVgoOc291cmNlUG9zaXRpb24YDiABKAsyGS5wdWx1bWlycGMuU291cmNlUG9zaXRpb25CE+I/EBIOc
  291cmNlUG9zaXRpb25SDnNvdXJjZVBvc2l0aW9uGlgKFFBsdWdpbkNoZWNrc3Vtc0VudHJ5EhoKA2tleRgBIAEoCUII4j8FEgNrZ
  XlSA2tleRIgCgV2YWx1ZRgCIAEoDEIK4j8HEgV2YWx1ZVIFdmFsdWU6AjgBSgQICxAMUgdhbGlhc2VzInwKFFJlYWRSZXNvdXJjZ
  VJlc3BvbnNlEhoKA3VybhgBIAEoCUII4j8FEgN1cm5SA3VybhJICgpwcm9wZXJ0aWVzGAIgASgLMhcuZ29vZ2xlLnByb3RvYnVmL
  lN0cnVjdEIP4j8MEgpwcm9wZXJ0aWVzUgpwcm9wZXJ0aWVzIswUChdSZWdpc3RlclJlc291cmNlUmVxdWVzdBIdCgR0eXBlGAEgA
  SgJQgniPwYSBHR5cGVSBHR5cGUSHQoEbmFtZRgCIAEoCUIJ4j8GEgRuYW1lUgRuYW1lEiMKBnBhcmVudBgDIAEoCUIL4j8IEgZwY
  XJlbnRSBnBhcmVudBIjCgZjdXN0b20YBCABKAhCC+I/CBIGY3VzdG9tUgZjdXN0b20SPAoGb2JqZWN0GAUgASgLMhcuZ29vZ2xlL
  nByb3RvYnVmLlN0cnVjdEIL4j8IEgZvYmplY3RSBm9iamVjdBImCgdwcm90ZWN0GAYgASgIQgziPwkSB3Byb3RlY3RSB3Byb3RlY
  3QSNQoMZGVwZW5kZW5jaWVzGAcgAygJQhHiPw4SDGRlcGVuZGVuY2llc1IMZGVwZW5kZW5jaWVzEikKCHByb3ZpZGVyGAggASgJQ
  g3iPwoSCHByb3ZpZGVyUghwcm92aWRlchKLAQoUcHJvcGVydHlEZXBlbmRlbmNpZXMYCSADKAsyPC5wdWx1bWlycGMuUmVnaXN0Z
  XJSZXNvdXJjZVJlcXVlc3QuUHJvcGVydHlEZXBlbmRlbmNpZXNFbnRyeUIZ4j8WEhRwcm9wZXJ0eURlcGVuZGVuY2llc1IUcHJvc
  GVydHlEZXBlbmRlbmNpZXMSSgoTZGVsZXRlQmVmb3JlUmVwbGFjZRgKIAEoCEIY4j8VEhNkZWxldGVCZWZvcmVSZXBsYWNlUhNkZ
  WxldGVCZWZvcmVSZXBsYWNlEiYKB3ZlcnNpb24YCyABKAlCDOI/CRIHdmVyc2lvblIHdmVyc2lvbhI4Cg1pZ25vcmVDaGFuZ2VzG
  AwgAygJQhLiPw8SDWlnbm9yZUNoYW5nZXNSDWlnbm9yZUNoYW5nZXMSOAoNYWNjZXB0U2VjcmV0cxgNIAEoCEIS4j8PEg1hY2Nlc
  HRTZWNyZXRzUg1hY2NlcHRTZWNyZXRzElYKF2FkZGl0aW9uYWxTZWNyZXRPdXRwdXRzGA4gAygJQhziPxkSF2FkZGl0aW9uYWxTZ
  WNyZXRPdXRwdXRzUhdhZGRpdGlvbmFsU2VjcmV0T3V0cHV0cxIsCglhbGlhc1VSTnMYDyADKAlCDuI/CxIJYWxpYXNVUk5zUglhb
  Glhc1VSTnMSKQoIaW1wb3J0SWQYECABKAlCDeI/ChIIaW1wb3J0SWRSCGltcG9ydElkEm4KDmN1c3RvbVRpbWVvdXRzGBEgASgLM
  jEucHVsdW1pcnBjLlJlZ2lzdGVyUmVzb3VyY2VSZXF1ZXN0LkN1c3RvbVRpbWVvdXRzQhPiPxASDmN1c3RvbVRpbWVvdXRzUg5jd
  XN0b21UaW1lb3V0cxJfChpkZWxldGVCZWZvcmVSZXBsYWNlRGVmaW5lZBgSIAEoCEIf4j8cEhpkZWxldGVCZWZvcmVSZXBsYWNlR
  GVmaW5lZFIaZGVsZXRlQmVmb3JlUmVwbGFjZURlZmluZWQSUAoVc3VwcG9ydHNQYXJ0aWFsVmFsdWVzGBMgASgIQhriPxcSFXN1c
  HBvcnRzUGFydGlhbFZhbHVlc1IVc3VwcG9ydHNQYXJ0aWFsVmFsdWVzEiMKBnJlbW90ZRgUIAEoCEIL4j8IEgZyZW1vdGVSBnJlb
  W90ZRI+Cg9hY2NlcHRSZXNvdXJjZXMYFSABKAhCFOI/ERIPYWNjZXB0UmVzb3VyY2VzUg9hY2NlcHRSZXNvdXJjZXMSXwoJcHJvd
  mlkZXJzGBYgAygLMjEucHVsdW1pcnBjLlJlZ2lzdGVyUmVzb3VyY2VSZXF1ZXN0LlByb3ZpZGVyc0VudHJ5Qg7iPwsSCXByb3ZpZ
  GVyc1IJcHJvdmlkZXJzEkEKEHJlcGxhY2VPbkNoYW5nZXMYFyADKAlCFeI/EhIQcmVwbGFjZU9uQ2hhbmdlc1IQcmVwbGFjZU9uQ
  2hhbmdlcxJEChFwbHVnaW5Eb3dubG9hZFVSTBgYIAEoCUIW4j8TEhFwbHVnaW5Eb3dubG9hZFVSTFIRcGx1Z2luRG93bmxvYWRVU
  kwSdwoPcGx1Z2luQ2hlY2tzdW1zGB4gAygLMjcucHVsdW1pcnBjLlJlZ2lzdGVyUmVzb3VyY2VSZXF1ZXN0LlBsdWdpbkNoZWNrc
  3Vtc0VudHJ5QhTiPxESD3BsdWdpbkNoZWNrc3Vtc1IPcGx1Z2luQ2hlY2tzdW1zEjsKDnJldGFpbk9uRGVsZXRlGBkgASgIQhPiP
  xASDnJldGFpbk9uRGVsZXRlUg5yZXRhaW5PbkRlbGV0ZRI4CgdhbGlhc2VzGBogAygLMhAucHVsdW1pcnBjLkFsaWFzQgziPwkSB
  2FsaWFzZXNSB2FsaWFzZXMSMgoLZGVsZXRlZFdpdGgYGyABKAlCEOI/DRILZGVsZXRlZFdpdGhSC2RlbGV0ZWRXaXRoEi8KCmFsa
  WFzU3BlY3MYHCABKAhCD+I/DBIKYWxpYXNTcGVjc1IKYWxpYXNTcGVjcxJWCg5zb3VyY2VQb3NpdGlvbhgdIAEoCzIZLnB1bHVta
  XJwYy5Tb3VyY2VQb3NpdGlvbkIT4j8QEg5zb3VyY2VQb3NpdGlvblIOc291cmNlUG9zaXRpb24SRAoKdHJhbnNmb3JtcxgfIAMoC
  zITLnB1bHVtaXJwYy5DYWxsYmFja0IP4j8MEgp0cmFuc2Zvcm1zUgp0cmFuc2Zvcm1zElYKF3N1cHBvcnRzUmVzdWx0UmVwb3J0a
  W5nGCAgASgIQhziPxkSF3N1cHBvcnRzUmVzdWx0UmVwb3J0aW5nUhdzdXBwb3J0c1Jlc3VsdFJlcG9ydGluZxo1ChRQcm9wZXJ0e
  URlcGVuZGVuY2llcxIdCgR1cm5zGAEgAygJQgniPwYSBHVybnNSBHVybnMafwoOQ3VzdG9tVGltZW91dHMSIwoGY3JlYXRlGAEgA
  SgJQgviPwgSBmNyZWF0ZVIGY3JlYXRlEiMKBnVwZGF0ZRgCIAEoCUIL4j8IEgZ1cGRhdGVSBnVwZGF0ZRIjCgZkZWxldGUYAyABK
  AlCC+I/CBIGZGVsZXRlUgZkZWxldGUalgEKGVByb3BlcnR5RGVwZW5kZW5jaWVzRW50cnkSGgoDa2V5GAEgASgJQgjiPwUSA2tle
  VIDa2V5ElkKBXZhbHVlGAIgASgLMjcucHVsdW1pcnBjLlJlZ2lzdGVyUmVzb3VyY2VSZXF1ZXN0LlByb3BlcnR5RGVwZW5kZW5ja
  WVzQgriPwcSBXZhbHVlUgV2YWx1ZToCOAEaUgoOUHJvdmlkZXJzRW50cnkSGgoDa2V5GAEgASgJQgjiPwUSA2tleVIDa2V5EiAKB
  XZhbHVlGAIgASgJQgriPwcSBXZhbHVlUgV2YWx1ZToCOAEaWAoUUGx1Z2luQ2hlY2tzdW1zRW50cnkSGgoDa2V5GAEgASgJQgjiP
  wUSA2tleVIDa2V5EiAKBXZhbHVlGAIgASgMQgriPwcSBXZhbHVlUgV2YWx1ZToCOAEi8gQKGFJlZ2lzdGVyUmVzb3VyY2VSZXNwb
  25zZRIaCgN1cm4YASABKAlCCOI/BRIDdXJuUgN1cm4SFwoCaWQYAiABKAlCB+I/BBICaWRSAmlkEjwKBm9iamVjdBgDIAEoCzIXL
  mdvb2dsZS5wcm90b2J1Zi5TdHJ1Y3RCC+I/CBIGb2JqZWN0UgZvYmplY3QSIwoGc3RhYmxlGAQgASgIQgviPwgSBnN0YWJsZVIGc
  3RhYmxlEiYKB3N0YWJsZXMYBSADKAlCDOI/CRIHc3RhYmxlc1IHc3RhYmxlcxKMAQoUcHJvcGVydHlEZXBlbmRlbmNpZXMYBiADK
  AsyPS5wdWx1bWlycGMuUmVnaXN0ZXJSZXNvdXJjZVJlc3BvbnNlLlByb3BlcnR5RGVwZW5kZW5jaWVzRW50cnlCGeI/FhIUcHJvc
  GVydHlEZXBlbmRlbmNpZXNSFHByb3BlcnR5RGVwZW5kZW5jaWVzEjYKBnJlc3VsdBgHIAEoDjIRLnB1bHVtaXJwYy5SZXN1bHRCC
  +I/CBIGcmVzdWx0UgZyZXN1bHQaNQoUUHJvcGVydHlEZXBlbmRlbmNpZXMSHQoEdXJucxgBIAMoCUIJ4j8GEgR1cm5zUgR1cm5zG
  pcBChlQcm9wZXJ0eURlcGVuZGVuY2llc0VudHJ5EhoKA2tleRgBIAEoCUII4j8FEgNrZXlSA2tleRJaCgV2YWx1ZRgCIAEoCzI4L
  nB1bHVtaXJwYy5SZWdpc3RlclJlc291cmNlUmVzcG9uc2UuUHJvcGVydHlEZXBlbmRlbmNpZXNCCuI/BxIFdmFsdWVSBXZhbHVlO
  gI4ASJ9Ch5SZWdpc3RlclJlc291cmNlT3V0cHV0c1JlcXVlc3QSGgoDdXJuGAEgASgJQgjiPwUSA3VyblIDdXJuEj8KB291dHB1d
  HMYAiABKAsyFy5nb29nbGUucHJvdG9idWYuU3RydWN0QgziPwkSB291dHB1dHNSB291dHB1dHMi7QQKFVJlc291cmNlSW52b2tlU
  mVxdWVzdBIaCgN0b2sYASABKAlCCOI/BRIDdG9rUgN0b2sSNgoEYXJncxgCIAEoCzIXLmdvb2dsZS5wcm90b2J1Zi5TdHJ1Y3RCC
  eI/BhIEYXJnc1IEYXJncxIpCghwcm92aWRlchgDIAEoCUIN4j8KEghwcm92aWRlclIIcHJvdmlkZXISJgoHdmVyc2lvbhgEIAEoC
  UIM4j8JEgd2ZXJzaW9uUgd2ZXJzaW9uEj4KD2FjY2VwdFJlc291cmNlcxgFIAEoCEIU4j8REg9hY2NlcHRSZXNvdXJjZXNSD2FjY
  2VwdFJlc291cmNlcxJEChFwbHVnaW5Eb3dubG9hZFVSTBgGIAEoCUIW4j8TEhFwbHVnaW5Eb3dubG9hZFVSTFIRcGx1Z2luRG93b
  mxvYWRVUkwSdQoPcGx1Z2luQ2hlY2tzdW1zGAggAygLMjUucHVsdW1pcnBjLlJlc291cmNlSW52b2tlUmVxdWVzdC5QbHVnaW5Da
  GVja3N1bXNFbnRyeUIU4j8REg9wbHVnaW5DaGVja3N1bXNSD3BsdWdpbkNoZWNrc3VtcxJWCg5zb3VyY2VQb3NpdGlvbhgHIAEoC
  zIZLnB1bHVtaXJwYy5Tb3VyY2VQb3NpdGlvbkIT4j8QEg5zb3VyY2VQb3NpdGlvblIOc291cmNlUG9zaXRpb24aWAoUUGx1Z2luQ
  2hlY2tzdW1zRW50cnkSGgoDa2V5GAEgASgJQgjiPwUSA2tleVIDa2V5EiAKBXZhbHVlGAIgASgMQgriPwcSBXZhbHVlUgV2YWx1Z
  ToCOAEi8AcKE1Jlc291cmNlQ2FsbFJlcXVlc3QSGgoDdG9rGAEgASgJQgjiPwUSA3Rva1IDdG9rEjYKBGFyZ3MYAiABKAsyFy5nb
  29nbGUucHJvdG9idWYuU3RydWN0QgniPwYSBGFyZ3NSBGFyZ3MScwoPYXJnRGVwZW5kZW5jaWVzGAMgAygLMjMucHVsdW1pcnBjL
  lJlc291cmNlQ2FsbFJlcXVlc3QuQXJnRGVwZW5kZW5jaWVzRW50cnlCFOI/ERIPYXJnRGVwZW5kZW5jaWVzUg9hcmdEZXBlbmRlb
  mNpZXMSKQoIcHJvdmlkZXIYBCABKAlCDeI/ChIIcHJvdmlkZXJSCHByb3ZpZGVyEiYKB3ZlcnNpb24YBSABKAlCDOI/CRIHdmVyc
  2lvblIHdmVyc2lvbhJEChFwbHVnaW5Eb3dubG9hZFVSTBgNIAEoCUIW4j8TEhFwbHVnaW5Eb3dubG9hZFVSTFIRcGx1Z2luRG93b
  mxvYWRVUkwScwoPcGx1Z2luQ2hlY2tzdW1zGBAgAygLMjMucHVsdW1pcnBjLlJlc291cmNlQ2FsbFJlcXVlc3QuUGx1Z2luQ2hlY
  2tzdW1zRW50cnlCFOI/ERIPcGx1Z2luQ2hlY2tzdW1zUg9wbHVnaW5DaGVja3N1bXMSVgoOc291cmNlUG9zaXRpb24YDyABKAsyG
  S5wdWx1bWlycGMuU291cmNlUG9zaXRpb25CE+I/EBIOc291cmNlUG9zaXRpb25SDnNvdXJjZVBvc2l0aW9uGjUKFEFyZ3VtZW50R
  GVwZW5kZW5jaWVzEh0KBHVybnMYASADKAlCCeI/BhIEdXJuc1IEdXJucxqNAQoUQXJnRGVwZW5kZW5jaWVzRW50cnkSGgoDa2V5G
  AEgASgJQgjiPwUSA2tleVIDa2V5ElUKBXZhbHVlGAIgASgLMjMucHVsdW1pcnBjLlJlc291cmNlQ2FsbFJlcXVlc3QuQXJndW1lb
  nREZXBlbmRlbmNpZXNCCuI/BxIFdmFsdWVSBXZhbHVlOgI4ARpYChRQbHVnaW5DaGVja3N1bXNFbnRyeRIaCgNrZXkYASABKAlCC
  OI/BRIDa2V5UgNrZXkSIAoFdmFsdWUYAiABKAxCCuI/BxIFdmFsdWVSBXZhbHVlOgI4AUoECAYQB0oECAcQCEoECAgQCUoECAkQC
  koECAoQC0oECAsQDEoECAwQDUoECA4QD1IHcHJvamVjdFIFc3RhY2tSBmNvbmZpZ1IQY29uZmlnU2VjcmV0S2V5c1IGZHJ5UnVuU
  ghwYXJhbGxlbFIPbW9uaXRvckVuZHBvaW50Ugxvcmdhbml6YXRpb24i/QkKGFRyYW5zZm9ybVJlc291cmNlT3B0aW9ucxItCgpkZ
  XBlbmRzX29uGAEgAygJQg7iPwsSCWRlcGVuZHNPblIJZGVwZW5kc09uEiYKB3Byb3RlY3QYAiABKAhCDOI/CRIHcHJvdGVjdFIHc
  HJvdGVjdBI5Cg5pZ25vcmVfY2hhbmdlcxgDIAMoCUIS4j8PEg1pZ25vcmVDaGFuZ2VzUg1pZ25vcmVDaGFuZ2VzEkMKEnJlcGxhY
  2Vfb25fY2hhbmdlcxgEIAMoCUIV4j8SEhByZXBsYWNlT25DaGFuZ2VzUhByZXBsYWNlT25DaGFuZ2VzEiYKB3ZlcnNpb24YBSABK
  AlCDOI/CRIHdmVyc2lvblIHdmVyc2lvbhI4CgdhbGlhc2VzGAYgAygLMhAucHVsdW1pcnBjLkFsaWFzQgziPwkSB2FsaWFzZXNSB
  2FsaWFzZXMSKQoIcHJvdmlkZXIYByABKAlCDeI/ChIIcHJvdmlkZXJSCHByb3ZpZGVyEm8KD2N1c3RvbV90aW1lb3V0cxgIIAEoC
  zIxLnB1bHVtaXJwYy5SZWdpc3RlclJlc291cmNlUmVxdWVzdC5DdXN0b21UaW1lb3V0c0IT4j8QEg5jdXN0b21UaW1lb3V0c1IOY
  3VzdG9tVGltZW91dHMSRgoTcGx1Z2luX2Rvd25sb2FkX3VybBgJIAEoCUIW4j8TEhFwbHVnaW5Eb3dubG9hZFVybFIRcGx1Z2luR
  G93bmxvYWRVcmwSPQoQcmV0YWluX29uX2RlbGV0ZRgKIAEoCEIT4j8QEg5yZXRhaW5PbkRlbGV0ZVIOcmV0YWluT25EZWxldGUSM
  woMZGVsZXRlZF93aXRoGAsgASgJQhDiPw0SC2RlbGV0ZWRXaXRoUgtkZWxldGVkV2l0aBJRChVkZWxldGVfYmVmb3JlX3JlcGxhY
  2UYDCABKAhCGOI/FRITZGVsZXRlQmVmb3JlUmVwbGFjZUgAUhNkZWxldGVCZWZvcmVSZXBsYWNliAEBElgKGWFkZGl0aW9uYWxfc
  2VjcmV0X291dHB1dHMYDSADKAlCHOI/GRIXYWRkaXRpb25hbFNlY3JldE91dHB1dHNSF2FkZGl0aW9uYWxTZWNyZXRPdXRwdXRzE
  mAKCXByb3ZpZGVycxgOIAMoCzIyLnB1bHVtaXJwYy5UcmFuc2Zvcm1SZXNvdXJjZU9wdGlvbnMuUHJvdmlkZXJzRW50cnlCDuI/C
  xIJcHJvdmlkZXJzUglwcm92aWRlcnMSeQoQcGx1Z2luX2NoZWNrc3VtcxgPIAMoCzI4LnB1bHVtaXJwYy5UcmFuc2Zvcm1SZXNvd
  XJjZU9wdGlvbnMuUGx1Z2luQ2hlY2tzdW1zRW50cnlCFOI/ERIPcGx1Z2luQ2hlY2tzdW1zUg9wbHVnaW5DaGVja3N1bXMaUgoOU
  HJvdmlkZXJzRW50cnkSGgoDa2V5GAEgASgJQgjiPwUSA2tleVIDa2V5EiAKBXZhbHVlGAIgASgJQgriPwcSBXZhbHVlUgV2YWx1Z
  ToCOAEaWAoUUGx1Z2luQ2hlY2tzdW1zRW50cnkSGgoDa2V5GAEgASgJQgjiPwUSA2tleVIDa2V5EiAKBXZhbHVlGAIgASgMQgriP
  wcSBXZhbHVlUgV2YWx1ZToCOAFCGAoWX2RlbGV0ZV9iZWZvcmVfcmVwbGFjZSKxAgoQVHJhbnNmb3JtUmVxdWVzdBIdCgR0eXBlG
  AEgASgJQgniPwYSBHR5cGVSBHR5cGUSHQoEbmFtZRgCIAEoCUIJ4j8GEgRuYW1lUgRuYW1lEiMKBmN1c3RvbRgDIAEoCEIL4j8IE
  gZjdXN0b21SBmN1c3RvbRIjCgZwYXJlbnQYBCABKAlCC+I/CBIGcGFyZW50UgZwYXJlbnQSSAoKcHJvcGVydGllcxgFIAEoCzIXL
  mdvb2dsZS5wcm90b2J1Zi5TdHJ1Y3RCD+I/DBIKcHJvcGVydGllc1IKcHJvcGVydGllcxJLCgdvcHRpb25zGAYgASgLMiMucHVsd
  W1pcnBjLlRyYW5zZm9ybVJlc291cmNlT3B0aW9uc0IM4j8JEgdvcHRpb25zUgdvcHRpb25zIqoBChFUcmFuc2Zvcm1SZXNwb25zZ
  RJICgpwcm9wZXJ0aWVzGAEgASgLMhcuZ29vZ2xlLnByb3RvYnVmLlN0cnVjdEIP4j8MEgpwcm9wZXJ0aWVzUgpwcm9wZXJ0aWVzE
  ksKB29wdGlvbnMYAiABKAsyIy5wdWx1bWlycGMuVHJhbnNmb3JtUmVzb3VyY2VPcHRpb25zQgziPwkSB29wdGlvbnNSB29wdGlvb
  nMqTQoGUmVzdWx0EhkKB1NVQ0NFU1MQABoM4j8JEgdTVUNDRVNTEhMKBEZBSUwQARoJ4j8GEgRGQUlMEhMKBFNLSVAQAhoJ4j8GE
  gRTS0lQMqUFCg9SZXNvdXJjZU1vbml0b3ISWgoPU3VwcG9ydHNGZWF0dXJlEiEucHVsdW1pcnBjLlN1cHBvcnRzRmVhdHVyZVJlc
  XVlc3QaIi5wdWx1bWlycGMuU3VwcG9ydHNGZWF0dXJlUmVzcG9uc2UiABJHCgZJbnZva2USIC5wdWx1bWlycGMuUmVzb3VyY2VJb
  nZva2VSZXF1ZXN0GhkucHVsdW1pcnBjLkludm9rZVJlc3BvbnNlIgASTwoMU3RyZWFtSW52b2tlEiAucHVsdW1pcnBjLlJlc291c
  mNlSW52b2tlUmVxdWVzdBoZLnB1bHVtaXJwYy5JbnZva2VSZXNwb25zZSIAMAESQQoEQ2FsbBIeLnB1bHVtaXJwYy5SZXNvdXJjZ
  UNhbGxSZXF1ZXN0GhcucHVsdW1pcnBjLkNhbGxSZXNwb25zZSIAElEKDFJlYWRSZXNvdXJjZRIeLnB1bHVtaXJwYy5SZWFkUmVzb
  3VyY2VSZXF1ZXN0Gh8ucHVsdW1pcnBjLlJlYWRSZXNvdXJjZVJlc3BvbnNlIgASXQoQUmVnaXN0ZXJSZXNvdXJjZRIiLnB1bHVta
  XJwYy5SZWdpc3RlclJlc291cmNlUmVxdWVzdBojLnB1bHVtaXJwYy5SZWdpc3RlclJlc291cmNlUmVzcG9uc2UiABJeChdSZWdpc
  3RlclJlc291cmNlT3V0cHV0cxIpLnB1bHVtaXJwYy5SZWdpc3RlclJlc291cmNlT3V0cHV0c1JlcXVlc3QaFi5nb29nbGUucHJvd
  G9idWYuRW1wdHkiABJHChZSZWdpc3RlclN0YWNrVHJhbnNmb3JtEhMucHVsdW1pcnBjLkNhbGxiYWNrGhYuZ29vZ2xlLnByb3RvY
  nVmLkVtcHR5IgBCNFoyZ2l0aHViLmNvbS9wdWx1bWkvcHVsdW1pL3Nkay92My9wcm90by9nbztwdWx1bWlycGNiBnByb3RvMw=="""
      ).mkString)
  lazy val scalaDescriptor: _root_.scalapb.descriptors.FileDescriptor = {
    val scalaProto = com.google.protobuf.descriptor.FileDescriptorProto.parseFrom(ProtoBytes)
    _root_.scalapb.descriptors.FileDescriptor.buildFrom(scalaProto, dependencies.map(_.scalaDescriptor))
  }
  lazy val javaDescriptor: com.google.protobuf.Descriptors.FileDescriptor = {
    val javaProto = com.google.protobuf.DescriptorProtos.FileDescriptorProto.parseFrom(ProtoBytes)
    com.google.protobuf.Descriptors.FileDescriptor.buildFrom(javaProto, _root_.scala.Array(
      com.google.protobuf.empty.EmptyProto.javaDescriptor,
      com.google.protobuf.struct.StructProto.javaDescriptor,
      pulumirpc.provider.ProviderProto.javaDescriptor,
      pulumirpc.alias.AliasProto.javaDescriptor,
      pulumirpc.source.SourceProto.javaDescriptor,
      pulumirpc.callback.CallbackProto.javaDescriptor
    ))
  }
  @deprecated("Use javaDescriptor instead. In a future version this will refer to scalaDescriptor.", "ScalaPB 0.5.47")
  def descriptor: com.google.protobuf.Descriptors.FileDescriptor = javaDescriptor
}