// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package pulumirpc.provider

object ProviderProto extends _root_.scalapb.GeneratedFileObject {
  lazy val dependencies: Seq[_root_.scalapb.GeneratedFileObject] = Seq(
    pulumirpc.plugin.PluginProto,
    com.google.protobuf.empty.EmptyProto,
    com.google.protobuf.struct.StructProto,
    pulumirpc.source.SourceProto
  )
  lazy val messagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] =
    Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]](
      pulumirpc.provider.GetSchemaRequest,
      pulumirpc.provider.GetSchemaResponse,
      pulumirpc.provider.ConfigureRequest,
      pulumirpc.provider.ConfigureResponse,
      pulumirpc.provider.ConfigureErrorMissingKeys,
      pulumirpc.provider.InvokeRequest,
      pulumirpc.provider.InvokeResponse,
      pulumirpc.provider.CallRequest,
      pulumirpc.provider.CallResponse,
      pulumirpc.provider.CheckRequest,
      pulumirpc.provider.CheckResponse,
      pulumirpc.provider.CheckFailure,
      pulumirpc.provider.DiffRequest,
      pulumirpc.provider.PropertyDiff,
      pulumirpc.provider.DiffResponse,
      pulumirpc.provider.CreateRequest,
      pulumirpc.provider.CreateResponse,
      pulumirpc.provider.ReadRequest,
      pulumirpc.provider.ReadResponse,
      pulumirpc.provider.UpdateRequest,
      pulumirpc.provider.UpdateResponse,
      pulumirpc.provider.DeleteRequest,
      pulumirpc.provider.ConstructRequest,
      pulumirpc.provider.ConstructResponse,
      pulumirpc.provider.ErrorResourceInitFailed,
      pulumirpc.provider.GetMappingRequest,
      pulumirpc.provider.GetMappingResponse,
      pulumirpc.provider.GetMappingsRequest,
      pulumirpc.provider.GetMappingsResponse
    )
  private lazy val ProtoBytes: _root_.scala.Array[Byte] =
      scalapb.Encoding.fromBase64(scala.collection.immutable.Seq(
  """ChVwdWx1bWkvcHJvdmlkZXIucHJvdG8SCXB1bHVtaXJwYxoTcHVsdW1pL3BsdWdpbi5wcm90bxobZ29vZ2xlL3Byb3RvYnVmL
  2VtcHR5LnByb3RvGhxnb29nbGUvcHJvdG9idWYvc3RydWN0LnByb3RvGhNwdWx1bWkvc291cmNlLnByb3RvIjoKEEdldFNjaGVtY
  VJlcXVlc3QSJgoHdmVyc2lvbhgBIAEoBUIM4j8JEgd2ZXJzaW9uUgd2ZXJzaW9uIjgKEUdldFNjaGVtYVJlc3BvbnNlEiMKBnNja
  GVtYRgBIAEoCUIL4j8IEgZzY2hlbWFSBnNjaGVtYSKKBAoQQ29uZmlndXJlUmVxdWVzdBJYCgl2YXJpYWJsZXMYASADKAsyKi5wd
  Wx1bWlycGMuQ29uZmlndXJlUmVxdWVzdC5WYXJpYWJsZXNFbnRyeUIO4j8LEgl2YXJpYWJsZXNSCXZhcmlhYmxlcxI2CgRhcmdzG
  AIgASgLMhcuZ29vZ2xlLnByb3RvYnVmLlN0cnVjdEIJ4j8GEgRhcmdzUgRhcmdzEjgKDWFjY2VwdFNlY3JldHMYAyABKAhCEuI/D
  xINYWNjZXB0U2VjcmV0c1INYWNjZXB0U2VjcmV0cxI+Cg9hY2NlcHRSZXNvdXJjZXMYBCABKAhCFOI/ERIPYWNjZXB0UmVzb3VyY
  2VzUg9hY2NlcHRSZXNvdXJjZXMSPQoQc2VuZHNfb2xkX2lucHV0cxgFIAEoCEIT4j8QEg5zZW5kc09sZElucHV0c1IOc2VuZHNPb
  GRJbnB1dHMSVwoac2VuZHNfb2xkX2lucHV0c190b19kZWxldGUYBiABKAhCG+I/GBIWc2VuZHNPbGRJbnB1dHNUb0RlbGV0ZVIWc
  2VuZHNPbGRJbnB1dHNUb0RlbGV0ZRpSCg5WYXJpYWJsZXNFbnRyeRIaCgNrZXkYASABKAlCCOI/BRIDa2V5UgNrZXkSIAoFdmFsd
  WUYAiABKAlCCuI/BxIFdmFsdWVSBXZhbHVlOgI4ASKHAgoRQ29uZmlndXJlUmVzcG9uc2USOAoNYWNjZXB0U2VjcmV0cxgBIAEoC
  EIS4j8PEg1hY2NlcHRTZWNyZXRzUg1hY2NlcHRTZWNyZXRzEj4KD3N1cHBvcnRzUHJldmlldxgCIAEoCEIU4j8REg9zdXBwb3J0c
  1ByZXZpZXdSD3N1cHBvcnRzUHJldmlldxI+Cg9hY2NlcHRSZXNvdXJjZXMYAyABKAhCFOI/ERIPYWNjZXB0UmVzb3VyY2VzUg9hY
  2NlcHRSZXNvdXJjZXMSOAoNYWNjZXB0T3V0cHV0cxgEIAEoCEIS4j8PEg1hY2NlcHRPdXRwdXRzUg1hY2NlcHRPdXRwdXRzIuEBC
  hlDb25maWd1cmVFcnJvck1pc3NpbmdLZXlzEmMKC21pc3NpbmdLZXlzGAEgAygLMi8ucHVsdW1pcnBjLkNvbmZpZ3VyZUVycm9yT
  Wlzc2luZ0tleXMuTWlzc2luZ0tleUIQ4j8NEgttaXNzaW5nS2V5c1ILbWlzc2luZ0tleXMaXwoKTWlzc2luZ0tleRIdCgRuYW1lG
  AEgASgJQgniPwYSBG5hbWVSBG5hbWUSMgoLZGVzY3JpcHRpb24YAiABKAlCEOI/DRILZGVzY3JpcHRpb25SC2Rlc2NyaXB0aW9uI
  qABCg1JbnZva2VSZXF1ZXN0EhoKA3RvaxgBIAEoCUII4j8FEgN0b2tSA3RvaxI2CgRhcmdzGAIgASgLMhcuZ29vZ2xlLnByb3RvY
  nVmLlN0cnVjdEIJ4j8GEgRhcmdzUgRhcmdzSgQIAxAHUghwcm92aWRlclIHdmVyc2lvblIPYWNjZXB0UmVzb3VyY2VzUhFwbHVna
  W5Eb3dubG9hZFVSTCKSAQoOSW52b2tlUmVzcG9uc2USPAoGcmV0dXJuGAEgASgLMhcuZ29vZ2xlLnByb3RvYnVmLlN0cnVjdEIL4
  j8IEgZyZXR1cm5SBnJldHVybhJCCghmYWlsdXJlcxgCIAMoCzIXLnB1bHVtaXJwYy5DaGVja0ZhaWx1cmVCDeI/ChIIZmFpbHVyZ
  XNSCGZhaWx1cmVzIrMKCgtDYWxsUmVxdWVzdBIaCgN0b2sYASABKAlCCOI/BRIDdG9rUgN0b2sSNgoEYXJncxgCIAEoCzIXLmdvb
  2dsZS5wcm90b2J1Zi5TdHJ1Y3RCCeI/BhIEYXJnc1IEYXJncxJrCg9hcmdEZXBlbmRlbmNpZXMYAyADKAsyKy5wdWx1bWlycGMuQ
  2FsbFJlcXVlc3QuQXJnRGVwZW5kZW5jaWVzRW50cnlCFOI/ERIPYXJnRGVwZW5kZW5jaWVzUg9hcmdEZXBlbmRlbmNpZXMSKQoIc
  HJvdmlkZXIYBCABKAlCDeI/ChIIcHJvdmlkZXJSCHByb3ZpZGVyEiYKB3ZlcnNpb24YBSABKAlCDOI/CRIHdmVyc2lvblIHdmVyc
  2lvbhJEChFwbHVnaW5Eb3dubG9hZFVSTBgNIAEoCUIW4j8TEhFwbHVnaW5Eb3dubG9hZFVSTFIRcGx1Z2luRG93bmxvYWRVUkwSa
  woPcGx1Z2luQ2hlY2tzdW1zGBAgAygLMisucHVsdW1pcnBjLkNhbGxSZXF1ZXN0LlBsdWdpbkNoZWNrc3Vtc0VudHJ5QhTiPxESD
  3BsdWdpbkNoZWNrc3Vtc1IPcGx1Z2luQ2hlY2tzdW1zEiYKB3Byb2plY3QYBiABKAlCDOI/CRIHcHJvamVjdFIHcHJvamVjdBIgC
  gVzdGFjaxgHIAEoCUIK4j8HEgVzdGFja1IFc3RhY2sSRwoGY29uZmlnGAggAygLMiIucHVsdW1pcnBjLkNhbGxSZXF1ZXN0LkNvb
  mZpZ0VudHJ5QgviPwgSBmNvbmZpZ1IGY29uZmlnEkEKEGNvbmZpZ1NlY3JldEtleXMYCSADKAlCFeI/EhIQY29uZmlnU2VjcmV0S
  2V5c1IQY29uZmlnU2VjcmV0S2V5cxIjCgZkcnlSdW4YCiABKAhCC+I/CBIGZHJ5UnVuUgZkcnlSdW4SKQoIcGFyYWxsZWwYCyABK
  AVCDeI/ChIIcGFyYWxsZWxSCHBhcmFsbGVsEj4KD21vbml0b3JFbmRwb2ludBgMIAEoCUIU4j8REg9tb25pdG9yRW5kcG9pbnRSD
  21vbml0b3JFbmRwb2ludBI1Cgxvcmdhbml6YXRpb24YDiABKAlCEeI/DhIMb3JnYW5pemF0aW9uUgxvcmdhbml6YXRpb24SVgoOc
  291cmNlUG9zaXRpb24YDyABKAsyGS5wdWx1bWlycGMuU291cmNlUG9zaXRpb25CE+I/EBIOc291cmNlUG9zaXRpb25SDnNvdXJjZ
  VBvc2l0aW9uGjUKFEFyZ3VtZW50RGVwZW5kZW5jaWVzEh0KBHVybnMYASADKAlCCeI/BhIEdXJuc1IEdXJucxqFAQoUQXJnRGVwZ
  W5kZW5jaWVzRW50cnkSGgoDa2V5GAEgASgJQgjiPwUSA2tleVIDa2V5Ek0KBXZhbHVlGAIgASgLMisucHVsdW1pcnBjLkNhbGxSZ
  XF1ZXN0LkFyZ3VtZW50RGVwZW5kZW5jaWVzQgriPwcSBXZhbHVlUgV2YWx1ZToCOAEaWAoUUGx1Z2luQ2hlY2tzdW1zRW50cnkSG
  goDa2V5GAEgASgJQgjiPwUSA2tleVIDa2V5EiAKBXZhbHVlGAIgASgMQgriPwcSBXZhbHVlUgV2YWx1ZToCOAEaTwoLQ29uZmlnR
  W50cnkSGgoDa2V5GAEgASgJQgjiPwUSA2tleVIDa2V5EiAKBXZhbHVlGAIgASgJQgriPwcSBXZhbHVlUgV2YWx1ZToCOAEiyQMKD
  ENhbGxSZXNwb25zZRI8CgZyZXR1cm4YASABKAsyFy5nb29nbGUucHJvdG9idWYuU3RydWN0QgviPwgSBnJldHVyblIGcmV0dXJuE
  ngKEnJldHVybkRlcGVuZGVuY2llcxgCIAMoCzIvLnB1bHVtaXJwYy5DYWxsUmVzcG9uc2UuUmV0dXJuRGVwZW5kZW5jaWVzRW50c
  nlCF+I/FBIScmV0dXJuRGVwZW5kZW5jaWVzUhJyZXR1cm5EZXBlbmRlbmNpZXMSQgoIZmFpbHVyZXMYAyADKAsyFy5wdWx1bWlyc
  GMuQ2hlY2tGYWlsdXJlQg3iPwoSCGZhaWx1cmVzUghmYWlsdXJlcxozChJSZXR1cm5EZXBlbmRlbmNpZXMSHQoEdXJucxgBIAMoC
  UIJ4j8GEgR1cm5zUgR1cm5zGocBChdSZXR1cm5EZXBlbmRlbmNpZXNFbnRyeRIaCgNrZXkYASABKAlCCOI/BRIDa2V5UgNrZXkST
  AoFdmFsdWUYAiABKAsyKi5wdWx1bWlycGMuQ2FsbFJlc3BvbnNlLlJldHVybkRlcGVuZGVuY2llc0IK4j8HEgV2YWx1ZVIFdmFsd
  WU6AjgBIuEBCgxDaGVja1JlcXVlc3QSGgoDdXJuGAEgASgJQgjiPwUSA3VyblIDdXJuEjYKBG9sZHMYAiABKAsyFy5nb29nbGUuc
  HJvdG9idWYuU3RydWN0QgniPwYSBG9sZHNSBG9sZHMSNgoEbmV3cxgDIAEoCzIXLmdvb2dsZS5wcm90b2J1Zi5TdHJ1Y3RCCeI/B
  hIEbmV3c1IEbmV3cxIvCgpyYW5kb21TZWVkGAUgASgMQg/iPwwSCnJhbmRvbVNlZWRSCnJhbmRvbVNlZWRKBAgEEAVSDnNlcXVlb
  mNlTnVtYmVyIpEBCg1DaGVja1Jlc3BvbnNlEjwKBmlucHV0cxgBIAEoCzIXLmdvb2dsZS5wcm90b2J1Zi5TdHJ1Y3RCC+I/CBIGa
  W5wdXRzUgZpbnB1dHMSQgoIZmFpbHVyZXMYAiADKAsyFy5wdWx1bWlycGMuQ2hlY2tGYWlsdXJlQg3iPwoSCGZhaWx1cmVzUghmY
  WlsdXJlcyJeCgxDaGVja0ZhaWx1cmUSKQoIcHJvcGVydHkYASABKAlCDeI/ChIIcHJvcGVydHlSCHByb3BlcnR5EiMKBnJlYXNvb
  hgCIAEoCUIL4j8IEgZyZWFzb25SBnJlYXNvbiK0AgoLRGlmZlJlcXVlc3QSFwoCaWQYASABKAlCB+I/BBICaWRSAmlkEhoKA3Vyb
  hgCIAEoCUII4j8FEgN1cm5SA3VybhI2CgRvbGRzGAMgASgLMhcuZ29vZ2xlLnByb3RvYnVmLlN0cnVjdEIJ4j8GEgRvbGRzUgRvb
  GRzEjYKBG5ld3MYBCABKAsyFy5nb29nbGUucHJvdG9idWYuU3RydWN0QgniPwYSBG5ld3NSBG5ld3MSOAoNaWdub3JlQ2hhbmdlc
  xgFIAMoCUIS4j8PEg1pZ25vcmVDaGFuZ2VzUg1pZ25vcmVDaGFuZ2VzEkYKCm9sZF9pbnB1dHMYBiABKAsyFy5nb29nbGUucHJvd
  G9idWYuU3RydWN0Qg7iPwsSCW9sZElucHV0c1IJb2xkSW5wdXRzIrwCCgxQcm9wZXJ0eURpZmYSOwoEa2luZBgBIAEoDjIcLnB1b
  HVtaXJwYy5Qcm9wZXJ0eURpZmYuS2luZEIJ4j8GEgRraW5kUgRraW5kEiwKCWlucHV0RGlmZhgCIAEoCEIO4j8LEglpbnB1dERpZ
  mZSCWlucHV0RGlmZiLAAQoES2luZBIRCgNBREQQABoI4j8FEgNBREQSIQoLQUREX1JFUExBQ0UQARoQ4j8NEgtBRERfUkVQTEFDR
  RIXCgZERUxFVEUQAhoL4j8IEgZERUxFVEUSJwoOREVMRVRFX1JFUExBQ0UQAxoT4j8QEg5ERUxFVEVfUkVQTEFDRRIXCgZVUERBV
  EUQBBoL4j8IEgZVUERBVEUSJwoOVVBEQVRFX1JFUExBQ0UQBRoT4j8QEg5VUERBVEVfUkVQTEFDRSKgBQoMRGlmZlJlc3BvbnNlE
  ikKCHJlcGxhY2VzGAEgAygJQg3iPwoSCHJlcGxhY2VzUghyZXBsYWNlcxImCgdzdGFibGVzGAIgAygJQgziPwkSB3N0YWJsZXNSB
  3N0YWJsZXMSSgoTZGVsZXRlQmVmb3JlUmVwbGFjZRgDIAEoCEIY4j8VEhNkZWxldGVCZWZvcmVSZXBsYWNlUhNkZWxldGVCZWZvc
  mVSZXBsYWNlEksKB2NoYW5nZXMYBCABKA4yIy5wdWx1bWlycGMuRGlmZlJlc3BvbnNlLkRpZmZDaGFuZ2VzQgziPwkSB2NoYW5nZ
  XNSB2NoYW5nZXMSIAoFZGlmZnMYBSADKAlCCuI/BxIFZGlmZnNSBWRpZmZzEmAKDGRldGFpbGVkRGlmZhgGIAMoCzIpLnB1bHVta
  XJwYy5EaWZmUmVzcG9uc2UuRGV0YWlsZWREaWZmRW50cnlCEeI/DhIMZGV0YWlsZWREaWZmUgxkZXRhaWxlZERpZmYSPgoPaGFzR
  GV0YWlsZWREaWZmGAcgASgIQhTiPxESD2hhc0RldGFpbGVkRGlmZlIPaGFzRGV0YWlsZWREaWZmGm4KEURldGFpbGVkRGlmZkVud
  HJ5EhoKA2tleRgBIAEoCUII4j8FEgNrZXlSA2tleRI5CgV2YWx1ZRgCIAEoCzIXLnB1bHVtaXJwYy5Qcm9wZXJ0eURpZmZCCuI/B
  xIFdmFsdWVSBXZhbHVlOgI4ASJwCgtEaWZmQ2hhbmdlcxIjCgxESUZGX1VOS05PV04QABoR4j8OEgxESUZGX1VOS05PV04SHQoJR
  ElGRl9OT05FEAEaDuI/CxIJRElGRl9OT05FEh0KCURJRkZfU09NRRACGg7iPwsSCURJRkZfU09NRSLFAQoNQ3JlYXRlUmVxdWVzd
  BIaCgN1cm4YASABKAlCCOI/BRIDdXJuUgN1cm4SSAoKcHJvcGVydGllcxgCIAEoCzIXLmdvb2dsZS5wcm90b2J1Zi5TdHJ1Y3RCD
  +I/DBIKcHJvcGVydGllc1IKcHJvcGVydGllcxImCgd0aW1lb3V0GAMgASgBQgziPwkSB3RpbWVvdXRSB3RpbWVvdXQSJgoHcHJld
  mlldxgEIAEoCEIM4j8JEgdwcmV2aWV3UgdwcmV2aWV3InMKDkNyZWF0ZVJlc3BvbnNlEhcKAmlkGAEgASgJQgfiPwQSAmlkUgJpZ
  BJICgpwcm9wZXJ0aWVzGAIgASgLMhcuZ29vZ2xlLnByb3RvYnVmLlN0cnVjdEIP4j8MEgpwcm9wZXJ0aWVzUgpwcm9wZXJ0aWVzI
  soBCgtSZWFkUmVxdWVzdBIXCgJpZBgBIAEoCUIH4j8EEgJpZFICaWQSGgoDdXJuGAIgASgJQgjiPwUSA3VyblIDdXJuEkgKCnByb
  3BlcnRpZXMYAyABKAsyFy5nb29nbGUucHJvdG9idWYuU3RydWN0Qg/iPwwSCnByb3BlcnRpZXNSCnByb3BlcnRpZXMSPAoGaW5wd
  XRzGAQgASgLMhcuZ29vZ2xlLnByb3RvYnVmLlN0cnVjdEIL4j8IEgZpbnB1dHNSBmlucHV0cyKvAQoMUmVhZFJlc3BvbnNlEhcKA
  mlkGAEgASgJQgfiPwQSAmlkUgJpZBJICgpwcm9wZXJ0aWVzGAIgASgLMhcuZ29vZ2xlLnByb3RvYnVmLlN0cnVjdEIP4j8MEgpwc
  m9wZXJ0aWVzUgpwcm9wZXJ0aWVzEjwKBmlucHV0cxgDIAEoCzIXLmdvb2dsZS5wcm90b2J1Zi5TdHJ1Y3RCC+I/CBIGaW5wdXRzU
  gZpbnB1dHMihgMKDVVwZGF0ZVJlcXVlc3QSFwoCaWQYASABKAlCB+I/BBICaWRSAmlkEhoKA3VybhgCIAEoCUII4j8FEgN1cm5SA
  3VybhI2CgRvbGRzGAMgASgLMhcuZ29vZ2xlLnByb3RvYnVmLlN0cnVjdEIJ4j8GEgRvbGRzUgRvbGRzEjYKBG5ld3MYBCABKAsyF
  y5nb29nbGUucHJvdG9idWYuU3RydWN0QgniPwYSBG5ld3NSBG5ld3MSJgoHdGltZW91dBgFIAEoAUIM4j8JEgd0aW1lb3V0Ugd0a
  W1lb3V0EjgKDWlnbm9yZUNoYW5nZXMYBiADKAlCEuI/DxINaWdub3JlQ2hhbmdlc1INaWdub3JlQ2hhbmdlcxImCgdwcmV2aWV3G
  AcgASgIQgziPwkSB3ByZXZpZXdSB3ByZXZpZXcSRgoKb2xkX2lucHV0cxgIIAEoCzIXLmdvb2dsZS5wcm90b2J1Zi5TdHJ1Y3RCD
  uI/CxIJb2xkSW5wdXRzUglvbGRJbnB1dHMiWgoOVXBkYXRlUmVzcG9uc2USSAoKcHJvcGVydGllcxgBIAEoCzIXLmdvb2dsZS5wc
  m90b2J1Zi5TdHJ1Y3RCD+I/DBIKcHJvcGVydGllc1IKcHJvcGVydGllcyL+AQoNRGVsZXRlUmVxdWVzdBIXCgJpZBgBIAEoCUIH4
  j8EEgJpZFICaWQSGgoDdXJuGAIgASgJQgjiPwUSA3VyblIDdXJuEkgKCnByb3BlcnRpZXMYAyABKAsyFy5nb29nbGUucHJvdG9id
  WYuU3RydWN0Qg/iPwwSCnByb3BlcnRpZXNSCnByb3BlcnRpZXMSJgoHdGltZW91dBgEIAEoAUIM4j8JEgd0aW1lb3V0Ugd0aW1lb
  3V0EkYKCm9sZF9pbnB1dHMYBSABKAsyFy5nb29nbGUucHJvdG9idWYuU3RydWN0Qg7iPwsSCW9sZElucHV0c1IJb2xkSW5wdXRzI
  pcPChBDb25zdHJ1Y3RSZXF1ZXN0EiYKB3Byb2plY3QYASABKAlCDOI/CRIHcHJvamVjdFIHcHJvamVjdBIgCgVzdGFjaxgCIAEoC
  UIK4j8HEgVzdGFja1IFc3RhY2sSTAoGY29uZmlnGAMgAygLMicucHVsdW1pcnBjLkNvbnN0cnVjdFJlcXVlc3QuQ29uZmlnRW50c
  nlCC+I/CBIGY29uZmlnUgZjb25maWcSIwoGZHJ5UnVuGAQgASgIQgviPwgSBmRyeVJ1blIGZHJ5UnVuEikKCHBhcmFsbGVsGAUgA
  SgFQg3iPwoSCHBhcmFsbGVsUghwYXJhbGxlbBI+Cg9tb25pdG9yRW5kcG9pbnQYBiABKAlCFOI/ERIPbW9uaXRvckVuZHBvaW50U
  g9tb25pdG9yRW5kcG9pbnQSHQoEdHlwZRgHIAEoCUIJ4j8GEgR0eXBlUgR0eXBlEh0KBG5hbWUYCCABKAlCCeI/BhIEbmFtZVIEb
  mFtZRIjCgZwYXJlbnQYCSABKAlCC+I/CBIGcGFyZW50UgZwYXJlbnQSPAoGaW5wdXRzGAogASgLMhcuZ29vZ2xlLnByb3RvYnVmL
  lN0cnVjdEIL4j8IEgZpbnB1dHNSBmlucHV0cxJ4ChFpbnB1dERlcGVuZGVuY2llcxgLIAMoCzIyLnB1bHVtaXJwYy5Db25zdHJ1Y
  3RSZXF1ZXN0LklucHV0RGVwZW5kZW5jaWVzRW50cnlCFuI/ExIRaW5wdXREZXBlbmRlbmNpZXNSEWlucHV0RGVwZW5kZW5jaWVzE
  lgKCXByb3ZpZGVycxgNIAMoCzIqLnB1bHVtaXJwYy5Db25zdHJ1Y3RSZXF1ZXN0LlByb3ZpZGVyc0VudHJ5Qg7iPwsSCXByb3ZpZ
  GVyc1IJcHJvdmlkZXJzEjUKDGRlcGVuZGVuY2llcxgPIAMoCUIR4j8OEgxkZXBlbmRlbmNpZXNSDGRlcGVuZGVuY2llcxJBChBjb
  25maWdTZWNyZXRLZXlzGBAgAygJQhXiPxISEGNvbmZpZ1NlY3JldEtleXNSEGNvbmZpZ1NlY3JldEtleXMSNQoMb3JnYW5pemF0a
  W9uGBEgASgJQhHiPw4SDG9yZ2FuaXphdGlvblIMb3JnYW5pemF0aW9uEiYKB3Byb3RlY3QYDCABKAhCDOI/CRIHcHJvdGVjdFIHc
  HJvdGVjdBImCgdhbGlhc2VzGA4gAygJQgziPwkSB2FsaWFzZXNSB2FsaWFzZXMSVgoXYWRkaXRpb25hbFNlY3JldE91dHB1dHMYE
  iADKAlCHOI/GRIXYWRkaXRpb25hbFNlY3JldE91dHB1dHNSF2FkZGl0aW9uYWxTZWNyZXRPdXRwdXRzEmcKDmN1c3RvbVRpbWVvd
  XRzGBMgASgLMioucHVsdW1pcnBjLkNvbnN0cnVjdFJlcXVlc3QuQ3VzdG9tVGltZW91dHNCE+I/EBIOY3VzdG9tVGltZW91dHNSD
  mN1c3RvbVRpbWVvdXRzEjIKC2RlbGV0ZWRXaXRoGBQgASgJQhDiPw0SC2RlbGV0ZWRXaXRoUgtkZWxldGVkV2l0aBJKChNkZWxld
  GVCZWZvcmVSZXBsYWNlGBUgASgIQhjiPxUSE2RlbGV0ZUJlZm9yZVJlcGxhY2VSE2RlbGV0ZUJlZm9yZVJlcGxhY2USOAoNaWdub
  3JlQ2hhbmdlcxgWIAMoCUIS4j8PEg1pZ25vcmVDaGFuZ2VzUg1pZ25vcmVDaGFuZ2VzEkEKEHJlcGxhY2VPbkNoYW5nZXMYFyADK
  AlCFeI/EhIQcmVwbGFjZU9uQ2hhbmdlc1IQcmVwbGFjZU9uQ2hhbmdlcxI7Cg5yZXRhaW5PbkRlbGV0ZRgYIAEoCEIT4j8QEg5yZ
  XRhaW5PbkRlbGV0ZVIOcmV0YWluT25EZWxldGUaNQoUUHJvcGVydHlEZXBlbmRlbmNpZXMSHQoEdXJucxgBIAMoCUIJ4j8GEgR1c
  m5zUgR1cm5zGn8KDkN1c3RvbVRpbWVvdXRzEiMKBmNyZWF0ZRgBIAEoCUIL4j8IEgZjcmVhdGVSBmNyZWF0ZRIjCgZ1cGRhdGUYA
  iABKAlCC+I/CBIGdXBkYXRlUgZ1cGRhdGUSIwoGZGVsZXRlGAMgASgJQgviPwgSBmRlbGV0ZVIGZGVsZXRlGk8KC0NvbmZpZ0Vud
  HJ5EhoKA2tleRgBIAEoCUII4j8FEgNrZXlSA2tleRIgCgV2YWx1ZRgCIAEoCUIK4j8HEgV2YWx1ZVIFdmFsdWU6AjgBGowBChZJb
  nB1dERlcGVuZGVuY2llc0VudHJ5EhoKA2tleRgBIAEoCUII4j8FEgNrZXlSA2tleRJSCgV2YWx1ZRgCIAEoCzIwLnB1bHVtaXJwY
  y5Db25zdHJ1Y3RSZXF1ZXN0LlByb3BlcnR5RGVwZW5kZW5jaWVzQgriPwcSBXZhbHVlUgV2YWx1ZToCOAEaUgoOUHJvdmlkZXJzR
  W50cnkSGgoDa2V5GAEgASgJQgjiPwUSA2tleVIDa2V5EiAKBXZhbHVlGAIgASgJQgriPwcSBXZhbHVlUgV2YWx1ZToCOAEirAMKE
  UNvbnN0cnVjdFJlc3BvbnNlEhoKA3VybhgBIAEoCUII4j8FEgN1cm5SA3VybhI5CgVzdGF0ZRgCIAEoCzIXLmdvb2dsZS5wcm90b
  2J1Zi5TdHJ1Y3RCCuI/BxIFc3RhdGVSBXN0YXRlEnkKEXN0YXRlRGVwZW5kZW5jaWVzGAMgAygLMjMucHVsdW1pcnBjLkNvbnN0c
  nVjdFJlc3BvbnNlLlN0YXRlRGVwZW5kZW5jaWVzRW50cnlCFuI/ExIRc3RhdGVEZXBlbmRlbmNpZXNSEXN0YXRlRGVwZW5kZW5ja
  WVzGjUKFFByb3BlcnR5RGVwZW5kZW5jaWVzEh0KBHVybnMYASADKAlCCeI/BhIEdXJuc1IEdXJucxqNAQoWU3RhdGVEZXBlbmRlb
  mNpZXNFbnRyeRIaCgNrZXkYASABKAlCCOI/BRIDa2V5UgNrZXkSUwoFdmFsdWUYAiABKAsyMS5wdWx1bWlycGMuQ29uc3RydWN0U
  mVzcG9uc2UuUHJvcGVydHlEZXBlbmRlbmNpZXNCCuI/BxIFdmFsdWVSBXZhbHVlOgI4ASLiAQoXRXJyb3JSZXNvdXJjZUluaXRGY
  WlsZWQSFwoCaWQYASABKAlCB+I/BBICaWRSAmlkEkgKCnByb3BlcnRpZXMYAiABKAsyFy5nb29nbGUucHJvdG9idWYuU3RydWN0Q
  g/iPwwSCnByb3BlcnRpZXNSCnByb3BlcnRpZXMSJgoHcmVhc29ucxgDIAMoCUIM4j8JEgdyZWFzb25zUgdyZWFzb25zEjwKBmluc
  HV0cxgEIAEoCzIXLmdvb2dsZS5wcm90b2J1Zi5TdHJ1Y3RCC+I/CBIGaW5wdXRzUgZpbnB1dHMiWgoRR2V0TWFwcGluZ1JlcXVlc
  3QSGgoDa2V5GAEgASgJQgjiPwUSA2tleVIDa2V5EikKCHByb3ZpZGVyGAIgASgJQg3iPwoSCHByb3ZpZGVyUghwcm92aWRlciJeC
  hJHZXRNYXBwaW5nUmVzcG9uc2USKQoIcHJvdmlkZXIYASABKAlCDeI/ChIIcHJvdmlkZXJSCHByb3ZpZGVyEh0KBGRhdGEYAiABK
  AxCCeI/BhIEZGF0YVIEZGF0YSIwChJHZXRNYXBwaW5nc1JlcXVlc3QSGgoDa2V5GAEgASgJQgjiPwUSA2tleVIDa2V5IkMKE0dld
  E1hcHBpbmdzUmVzcG9uc2USLAoJcHJvdmlkZXJzGAEgAygJQg7iPwsSCXByb3ZpZGVyc1IJcHJvdmlkZXJzMoYKChBSZXNvdXJjZ
  VByb3ZpZGVyEkgKCUdldFNjaGVtYRIbLnB1bHVtaXJwYy5HZXRTY2hlbWFSZXF1ZXN0GhwucHVsdW1pcnBjLkdldFNjaGVtYVJlc
  3BvbnNlIgASQgoLQ2hlY2tDb25maWcSFy5wdWx1bWlycGMuQ2hlY2tSZXF1ZXN0GhgucHVsdW1pcnBjLkNoZWNrUmVzcG9uc2UiA
  BI/CgpEaWZmQ29uZmlnEhYucHVsdW1pcnBjLkRpZmZSZXF1ZXN0GhcucHVsdW1pcnBjLkRpZmZSZXNwb25zZSIAEkgKCUNvbmZpZ
  3VyZRIbLnB1bHVtaXJwYy5Db25maWd1cmVSZXF1ZXN0GhwucHVsdW1pcnBjLkNvbmZpZ3VyZVJlc3BvbnNlIgASPwoGSW52b2tlE
  hgucHVsdW1pcnBjLkludm9rZVJlcXVlc3QaGS5wdWx1bWlycGMuSW52b2tlUmVzcG9uc2UiABJHCgxTdHJlYW1JbnZva2USGC5wd
  Wx1bWlycGMuSW52b2tlUmVxdWVzdBoZLnB1bHVtaXJwYy5JbnZva2VSZXNwb25zZSIAMAESOQoEQ2FsbBIWLnB1bHVtaXJwYy5DY
  WxsUmVxdWVzdBoXLnB1bHVtaXJwYy5DYWxsUmVzcG9uc2UiABI8CgVDaGVjaxIXLnB1bHVtaXJwYy5DaGVja1JlcXVlc3QaGC5wd
  Wx1bWlycGMuQ2hlY2tSZXNwb25zZSIAEjkKBERpZmYSFi5wdWx1bWlycGMuRGlmZlJlcXVlc3QaFy5wdWx1bWlycGMuRGlmZlJlc
  3BvbnNlIgASPwoGQ3JlYXRlEhgucHVsdW1pcnBjLkNyZWF0ZVJlcXVlc3QaGS5wdWx1bWlycGMuQ3JlYXRlUmVzcG9uc2UiABI5C
  gRSZWFkEhYucHVsdW1pcnBjLlJlYWRSZXF1ZXN0GhcucHVsdW1pcnBjLlJlYWRSZXNwb25zZSIAEj8KBlVwZGF0ZRIYLnB1bHVta
  XJwYy5VcGRhdGVSZXF1ZXN0GhkucHVsdW1pcnBjLlVwZGF0ZVJlc3BvbnNlIgASPAoGRGVsZXRlEhgucHVsdW1pcnBjLkRlbGV0Z
  VJlcXVlc3QaFi5nb29nbGUucHJvdG9idWYuRW1wdHkiABJICglDb25zdHJ1Y3QSGy5wdWx1bWlycGMuQ29uc3RydWN0UmVxdWVzd
  BocLnB1bHVtaXJwYy5Db25zdHJ1Y3RSZXNwb25zZSIAEjoKBkNhbmNlbBIWLmdvb2dsZS5wcm90b2J1Zi5FbXB0eRoWLmdvb2dsZ
  S5wcm90b2J1Zi5FbXB0eSIAEkAKDUdldFBsdWdpbkluZm8SFi5nb29nbGUucHJvdG9idWYuRW1wdHkaFS5wdWx1bWlycGMuUGx1Z
  2luSW5mbyIAEjsKBkF0dGFjaBIXLnB1bHVtaXJwYy5QbHVnaW5BdHRhY2gaFi5nb29nbGUucHJvdG9idWYuRW1wdHkiABJLCgpHZ
  XRNYXBwaW5nEhwucHVsdW1pcnBjLkdldE1hcHBpbmdSZXF1ZXN0Gh0ucHVsdW1pcnBjLkdldE1hcHBpbmdSZXNwb25zZSIAEk4KC
  0dldE1hcHBpbmdzEh0ucHVsdW1pcnBjLkdldE1hcHBpbmdzUmVxdWVzdBoeLnB1bHVtaXJwYy5HZXRNYXBwaW5nc1Jlc3BvbnNlI
  gBCNFoyZ2l0aHViLmNvbS9wdWx1bWkvcHVsdW1pL3Nkay92My9wcm90by9nbztwdWx1bWlycGNiBnByb3RvMw=="""
      ).mkString)
  lazy val scalaDescriptor: _root_.scalapb.descriptors.FileDescriptor = {
    val scalaProto = com.google.protobuf.descriptor.FileDescriptorProto.parseFrom(ProtoBytes)
    _root_.scalapb.descriptors.FileDescriptor.buildFrom(scalaProto, dependencies.map(_.scalaDescriptor))
  }
  lazy val javaDescriptor: com.google.protobuf.Descriptors.FileDescriptor = {
    val javaProto = com.google.protobuf.DescriptorProtos.FileDescriptorProto.parseFrom(ProtoBytes)
    com.google.protobuf.Descriptors.FileDescriptor.buildFrom(javaProto, _root_.scala.Array(
      pulumirpc.plugin.PluginProto.javaDescriptor,
      com.google.protobuf.empty.EmptyProto.javaDescriptor,
      com.google.protobuf.struct.StructProto.javaDescriptor,
      pulumirpc.source.SourceProto.javaDescriptor
    ))
  }
  @deprecated("Use javaDescriptor instead. In a future version this will refer to scalaDescriptor.", "ScalaPB 0.5.47")
  def descriptor: com.google.protobuf.Descriptors.FileDescriptor = javaDescriptor
}