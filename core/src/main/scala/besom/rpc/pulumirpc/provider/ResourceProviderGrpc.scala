// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package pulumirpc.provider


object ResourceProviderGrpc {
  val METHOD_GET_SCHEMA: _root_.io.grpc.MethodDescriptor[pulumirpc.provider.GetSchemaRequest, pulumirpc.provider.GetSchemaResponse] =
    _root_.io.grpc.MethodDescriptor.newBuilder()
      .setType(_root_.io.grpc.MethodDescriptor.MethodType.UNARY)
      .setFullMethodName(_root_.io.grpc.MethodDescriptor.generateFullMethodName("pulumirpc.ResourceProvider", "GetSchema"))
      .setSampledToLocalTracing(true)
      .setRequestMarshaller(_root_.scalapb.grpc.Marshaller.forMessage[pulumirpc.provider.GetSchemaRequest])
      .setResponseMarshaller(_root_.scalapb.grpc.Marshaller.forMessage[pulumirpc.provider.GetSchemaResponse])
      .setSchemaDescriptor(_root_.scalapb.grpc.ConcreteProtoMethodDescriptorSupplier.fromMethodDescriptor(pulumirpc.provider.ProviderProto.javaDescriptor.getServices().get(0).getMethods().get(0)))
      .build()
  
  val METHOD_CHECK_CONFIG: _root_.io.grpc.MethodDescriptor[pulumirpc.provider.CheckRequest, pulumirpc.provider.CheckResponse] =
    _root_.io.grpc.MethodDescriptor.newBuilder()
      .setType(_root_.io.grpc.MethodDescriptor.MethodType.UNARY)
      .setFullMethodName(_root_.io.grpc.MethodDescriptor.generateFullMethodName("pulumirpc.ResourceProvider", "CheckConfig"))
      .setSampledToLocalTracing(true)
      .setRequestMarshaller(_root_.scalapb.grpc.Marshaller.forMessage[pulumirpc.provider.CheckRequest])
      .setResponseMarshaller(_root_.scalapb.grpc.Marshaller.forMessage[pulumirpc.provider.CheckResponse])
      .setSchemaDescriptor(_root_.scalapb.grpc.ConcreteProtoMethodDescriptorSupplier.fromMethodDescriptor(pulumirpc.provider.ProviderProto.javaDescriptor.getServices().get(0).getMethods().get(1)))
      .build()
  
  val METHOD_DIFF_CONFIG: _root_.io.grpc.MethodDescriptor[pulumirpc.provider.DiffRequest, pulumirpc.provider.DiffResponse] =
    _root_.io.grpc.MethodDescriptor.newBuilder()
      .setType(_root_.io.grpc.MethodDescriptor.MethodType.UNARY)
      .setFullMethodName(_root_.io.grpc.MethodDescriptor.generateFullMethodName("pulumirpc.ResourceProvider", "DiffConfig"))
      .setSampledToLocalTracing(true)
      .setRequestMarshaller(_root_.scalapb.grpc.Marshaller.forMessage[pulumirpc.provider.DiffRequest])
      .setResponseMarshaller(_root_.scalapb.grpc.Marshaller.forMessage[pulumirpc.provider.DiffResponse])
      .setSchemaDescriptor(_root_.scalapb.grpc.ConcreteProtoMethodDescriptorSupplier.fromMethodDescriptor(pulumirpc.provider.ProviderProto.javaDescriptor.getServices().get(0).getMethods().get(2)))
      .build()
  
  val METHOD_CONFIGURE: _root_.io.grpc.MethodDescriptor[pulumirpc.provider.ConfigureRequest, pulumirpc.provider.ConfigureResponse] =
    _root_.io.grpc.MethodDescriptor.newBuilder()
      .setType(_root_.io.grpc.MethodDescriptor.MethodType.UNARY)
      .setFullMethodName(_root_.io.grpc.MethodDescriptor.generateFullMethodName("pulumirpc.ResourceProvider", "Configure"))
      .setSampledToLocalTracing(true)
      .setRequestMarshaller(_root_.scalapb.grpc.Marshaller.forMessage[pulumirpc.provider.ConfigureRequest])
      .setResponseMarshaller(_root_.scalapb.grpc.Marshaller.forMessage[pulumirpc.provider.ConfigureResponse])
      .setSchemaDescriptor(_root_.scalapb.grpc.ConcreteProtoMethodDescriptorSupplier.fromMethodDescriptor(pulumirpc.provider.ProviderProto.javaDescriptor.getServices().get(0).getMethods().get(3)))
      .build()
  
  val METHOD_INVOKE: _root_.io.grpc.MethodDescriptor[pulumirpc.provider.InvokeRequest, pulumirpc.provider.InvokeResponse] =
    _root_.io.grpc.MethodDescriptor.newBuilder()
      .setType(_root_.io.grpc.MethodDescriptor.MethodType.UNARY)
      .setFullMethodName(_root_.io.grpc.MethodDescriptor.generateFullMethodName("pulumirpc.ResourceProvider", "Invoke"))
      .setSampledToLocalTracing(true)
      .setRequestMarshaller(_root_.scalapb.grpc.Marshaller.forMessage[pulumirpc.provider.InvokeRequest])
      .setResponseMarshaller(_root_.scalapb.grpc.Marshaller.forMessage[pulumirpc.provider.InvokeResponse])
      .setSchemaDescriptor(_root_.scalapb.grpc.ConcreteProtoMethodDescriptorSupplier.fromMethodDescriptor(pulumirpc.provider.ProviderProto.javaDescriptor.getServices().get(0).getMethods().get(4)))
      .build()
  
  val METHOD_STREAM_INVOKE: _root_.io.grpc.MethodDescriptor[pulumirpc.provider.InvokeRequest, pulumirpc.provider.InvokeResponse] =
    _root_.io.grpc.MethodDescriptor.newBuilder()
      .setType(_root_.io.grpc.MethodDescriptor.MethodType.SERVER_STREAMING)
      .setFullMethodName(_root_.io.grpc.MethodDescriptor.generateFullMethodName("pulumirpc.ResourceProvider", "StreamInvoke"))
      .setSampledToLocalTracing(true)
      .setRequestMarshaller(_root_.scalapb.grpc.Marshaller.forMessage[pulumirpc.provider.InvokeRequest])
      .setResponseMarshaller(_root_.scalapb.grpc.Marshaller.forMessage[pulumirpc.provider.InvokeResponse])
      .setSchemaDescriptor(_root_.scalapb.grpc.ConcreteProtoMethodDescriptorSupplier.fromMethodDescriptor(pulumirpc.provider.ProviderProto.javaDescriptor.getServices().get(0).getMethods().get(5)))
      .build()
  
  val METHOD_CALL: _root_.io.grpc.MethodDescriptor[pulumirpc.provider.CallRequest, pulumirpc.provider.CallResponse] =
    _root_.io.grpc.MethodDescriptor.newBuilder()
      .setType(_root_.io.grpc.MethodDescriptor.MethodType.UNARY)
      .setFullMethodName(_root_.io.grpc.MethodDescriptor.generateFullMethodName("pulumirpc.ResourceProvider", "Call"))
      .setSampledToLocalTracing(true)
      .setRequestMarshaller(_root_.scalapb.grpc.Marshaller.forMessage[pulumirpc.provider.CallRequest])
      .setResponseMarshaller(_root_.scalapb.grpc.Marshaller.forMessage[pulumirpc.provider.CallResponse])
      .setSchemaDescriptor(_root_.scalapb.grpc.ConcreteProtoMethodDescriptorSupplier.fromMethodDescriptor(pulumirpc.provider.ProviderProto.javaDescriptor.getServices().get(0).getMethods().get(6)))
      .build()
  
  val METHOD_CHECK: _root_.io.grpc.MethodDescriptor[pulumirpc.provider.CheckRequest, pulumirpc.provider.CheckResponse] =
    _root_.io.grpc.MethodDescriptor.newBuilder()
      .setType(_root_.io.grpc.MethodDescriptor.MethodType.UNARY)
      .setFullMethodName(_root_.io.grpc.MethodDescriptor.generateFullMethodName("pulumirpc.ResourceProvider", "Check"))
      .setSampledToLocalTracing(true)
      .setRequestMarshaller(_root_.scalapb.grpc.Marshaller.forMessage[pulumirpc.provider.CheckRequest])
      .setResponseMarshaller(_root_.scalapb.grpc.Marshaller.forMessage[pulumirpc.provider.CheckResponse])
      .setSchemaDescriptor(_root_.scalapb.grpc.ConcreteProtoMethodDescriptorSupplier.fromMethodDescriptor(pulumirpc.provider.ProviderProto.javaDescriptor.getServices().get(0).getMethods().get(7)))
      .build()
  
  val METHOD_DIFF: _root_.io.grpc.MethodDescriptor[pulumirpc.provider.DiffRequest, pulumirpc.provider.DiffResponse] =
    _root_.io.grpc.MethodDescriptor.newBuilder()
      .setType(_root_.io.grpc.MethodDescriptor.MethodType.UNARY)
      .setFullMethodName(_root_.io.grpc.MethodDescriptor.generateFullMethodName("pulumirpc.ResourceProvider", "Diff"))
      .setSampledToLocalTracing(true)
      .setRequestMarshaller(_root_.scalapb.grpc.Marshaller.forMessage[pulumirpc.provider.DiffRequest])
      .setResponseMarshaller(_root_.scalapb.grpc.Marshaller.forMessage[pulumirpc.provider.DiffResponse])
      .setSchemaDescriptor(_root_.scalapb.grpc.ConcreteProtoMethodDescriptorSupplier.fromMethodDescriptor(pulumirpc.provider.ProviderProto.javaDescriptor.getServices().get(0).getMethods().get(8)))
      .build()
  
  val METHOD_CREATE: _root_.io.grpc.MethodDescriptor[pulumirpc.provider.CreateRequest, pulumirpc.provider.CreateResponse] =
    _root_.io.grpc.MethodDescriptor.newBuilder()
      .setType(_root_.io.grpc.MethodDescriptor.MethodType.UNARY)
      .setFullMethodName(_root_.io.grpc.MethodDescriptor.generateFullMethodName("pulumirpc.ResourceProvider", "Create"))
      .setSampledToLocalTracing(true)
      .setRequestMarshaller(_root_.scalapb.grpc.Marshaller.forMessage[pulumirpc.provider.CreateRequest])
      .setResponseMarshaller(_root_.scalapb.grpc.Marshaller.forMessage[pulumirpc.provider.CreateResponse])
      .setSchemaDescriptor(_root_.scalapb.grpc.ConcreteProtoMethodDescriptorSupplier.fromMethodDescriptor(pulumirpc.provider.ProviderProto.javaDescriptor.getServices().get(0).getMethods().get(9)))
      .build()
  
  val METHOD_READ: _root_.io.grpc.MethodDescriptor[pulumirpc.provider.ReadRequest, pulumirpc.provider.ReadResponse] =
    _root_.io.grpc.MethodDescriptor.newBuilder()
      .setType(_root_.io.grpc.MethodDescriptor.MethodType.UNARY)
      .setFullMethodName(_root_.io.grpc.MethodDescriptor.generateFullMethodName("pulumirpc.ResourceProvider", "Read"))
      .setSampledToLocalTracing(true)
      .setRequestMarshaller(_root_.scalapb.grpc.Marshaller.forMessage[pulumirpc.provider.ReadRequest])
      .setResponseMarshaller(_root_.scalapb.grpc.Marshaller.forMessage[pulumirpc.provider.ReadResponse])
      .setSchemaDescriptor(_root_.scalapb.grpc.ConcreteProtoMethodDescriptorSupplier.fromMethodDescriptor(pulumirpc.provider.ProviderProto.javaDescriptor.getServices().get(0).getMethods().get(10)))
      .build()
  
  val METHOD_UPDATE: _root_.io.grpc.MethodDescriptor[pulumirpc.provider.UpdateRequest, pulumirpc.provider.UpdateResponse] =
    _root_.io.grpc.MethodDescriptor.newBuilder()
      .setType(_root_.io.grpc.MethodDescriptor.MethodType.UNARY)
      .setFullMethodName(_root_.io.grpc.MethodDescriptor.generateFullMethodName("pulumirpc.ResourceProvider", "Update"))
      .setSampledToLocalTracing(true)
      .setRequestMarshaller(_root_.scalapb.grpc.Marshaller.forMessage[pulumirpc.provider.UpdateRequest])
      .setResponseMarshaller(_root_.scalapb.grpc.Marshaller.forMessage[pulumirpc.provider.UpdateResponse])
      .setSchemaDescriptor(_root_.scalapb.grpc.ConcreteProtoMethodDescriptorSupplier.fromMethodDescriptor(pulumirpc.provider.ProviderProto.javaDescriptor.getServices().get(0).getMethods().get(11)))
      .build()
  
  val METHOD_DELETE: _root_.io.grpc.MethodDescriptor[pulumirpc.provider.DeleteRequest, com.google.protobuf.empty.Empty] =
    _root_.io.grpc.MethodDescriptor.newBuilder()
      .setType(_root_.io.grpc.MethodDescriptor.MethodType.UNARY)
      .setFullMethodName(_root_.io.grpc.MethodDescriptor.generateFullMethodName("pulumirpc.ResourceProvider", "Delete"))
      .setSampledToLocalTracing(true)
      .setRequestMarshaller(_root_.scalapb.grpc.Marshaller.forMessage[pulumirpc.provider.DeleteRequest])
      .setResponseMarshaller(_root_.scalapb.grpc.Marshaller.forMessage[com.google.protobuf.empty.Empty])
      .setSchemaDescriptor(_root_.scalapb.grpc.ConcreteProtoMethodDescriptorSupplier.fromMethodDescriptor(pulumirpc.provider.ProviderProto.javaDescriptor.getServices().get(0).getMethods().get(12)))
      .build()
  
  val METHOD_CONSTRUCT: _root_.io.grpc.MethodDescriptor[pulumirpc.provider.ConstructRequest, pulumirpc.provider.ConstructResponse] =
    _root_.io.grpc.MethodDescriptor.newBuilder()
      .setType(_root_.io.grpc.MethodDescriptor.MethodType.UNARY)
      .setFullMethodName(_root_.io.grpc.MethodDescriptor.generateFullMethodName("pulumirpc.ResourceProvider", "Construct"))
      .setSampledToLocalTracing(true)
      .setRequestMarshaller(_root_.scalapb.grpc.Marshaller.forMessage[pulumirpc.provider.ConstructRequest])
      .setResponseMarshaller(_root_.scalapb.grpc.Marshaller.forMessage[pulumirpc.provider.ConstructResponse])
      .setSchemaDescriptor(_root_.scalapb.grpc.ConcreteProtoMethodDescriptorSupplier.fromMethodDescriptor(pulumirpc.provider.ProviderProto.javaDescriptor.getServices().get(0).getMethods().get(13)))
      .build()
  
  val METHOD_CANCEL: _root_.io.grpc.MethodDescriptor[com.google.protobuf.empty.Empty, com.google.protobuf.empty.Empty] =
    _root_.io.grpc.MethodDescriptor.newBuilder()
      .setType(_root_.io.grpc.MethodDescriptor.MethodType.UNARY)
      .setFullMethodName(_root_.io.grpc.MethodDescriptor.generateFullMethodName("pulumirpc.ResourceProvider", "Cancel"))
      .setSampledToLocalTracing(true)
      .setRequestMarshaller(_root_.scalapb.grpc.Marshaller.forMessage[com.google.protobuf.empty.Empty])
      .setResponseMarshaller(_root_.scalapb.grpc.Marshaller.forMessage[com.google.protobuf.empty.Empty])
      .setSchemaDescriptor(_root_.scalapb.grpc.ConcreteProtoMethodDescriptorSupplier.fromMethodDescriptor(pulumirpc.provider.ProviderProto.javaDescriptor.getServices().get(0).getMethods().get(14)))
      .build()
  
  val METHOD_GET_PLUGIN_INFO: _root_.io.grpc.MethodDescriptor[com.google.protobuf.empty.Empty, pulumirpc.plugin.PluginInfo] =
    _root_.io.grpc.MethodDescriptor.newBuilder()
      .setType(_root_.io.grpc.MethodDescriptor.MethodType.UNARY)
      .setFullMethodName(_root_.io.grpc.MethodDescriptor.generateFullMethodName("pulumirpc.ResourceProvider", "GetPluginInfo"))
      .setSampledToLocalTracing(true)
      .setRequestMarshaller(_root_.scalapb.grpc.Marshaller.forMessage[com.google.protobuf.empty.Empty])
      .setResponseMarshaller(_root_.scalapb.grpc.Marshaller.forMessage[pulumirpc.plugin.PluginInfo])
      .setSchemaDescriptor(_root_.scalapb.grpc.ConcreteProtoMethodDescriptorSupplier.fromMethodDescriptor(pulumirpc.provider.ProviderProto.javaDescriptor.getServices().get(0).getMethods().get(15)))
      .build()
  
  val METHOD_ATTACH: _root_.io.grpc.MethodDescriptor[pulumirpc.plugin.PluginAttach, com.google.protobuf.empty.Empty] =
    _root_.io.grpc.MethodDescriptor.newBuilder()
      .setType(_root_.io.grpc.MethodDescriptor.MethodType.UNARY)
      .setFullMethodName(_root_.io.grpc.MethodDescriptor.generateFullMethodName("pulumirpc.ResourceProvider", "Attach"))
      .setSampledToLocalTracing(true)
      .setRequestMarshaller(_root_.scalapb.grpc.Marshaller.forMessage[pulumirpc.plugin.PluginAttach])
      .setResponseMarshaller(_root_.scalapb.grpc.Marshaller.forMessage[com.google.protobuf.empty.Empty])
      .setSchemaDescriptor(_root_.scalapb.grpc.ConcreteProtoMethodDescriptorSupplier.fromMethodDescriptor(pulumirpc.provider.ProviderProto.javaDescriptor.getServices().get(0).getMethods().get(16)))
      .build()
  
  val METHOD_GET_MAPPING: _root_.io.grpc.MethodDescriptor[pulumirpc.provider.GetMappingRequest, pulumirpc.provider.GetMappingResponse] =
    _root_.io.grpc.MethodDescriptor.newBuilder()
      .setType(_root_.io.grpc.MethodDescriptor.MethodType.UNARY)
      .setFullMethodName(_root_.io.grpc.MethodDescriptor.generateFullMethodName("pulumirpc.ResourceProvider", "GetMapping"))
      .setSampledToLocalTracing(true)
      .setRequestMarshaller(_root_.scalapb.grpc.Marshaller.forMessage[pulumirpc.provider.GetMappingRequest])
      .setResponseMarshaller(_root_.scalapb.grpc.Marshaller.forMessage[pulumirpc.provider.GetMappingResponse])
      .setSchemaDescriptor(_root_.scalapb.grpc.ConcreteProtoMethodDescriptorSupplier.fromMethodDescriptor(pulumirpc.provider.ProviderProto.javaDescriptor.getServices().get(0).getMethods().get(17)))
      .build()
  
  val METHOD_GET_MAPPINGS: _root_.io.grpc.MethodDescriptor[pulumirpc.provider.GetMappingsRequest, pulumirpc.provider.GetMappingsResponse] =
    _root_.io.grpc.MethodDescriptor.newBuilder()
      .setType(_root_.io.grpc.MethodDescriptor.MethodType.UNARY)
      .setFullMethodName(_root_.io.grpc.MethodDescriptor.generateFullMethodName("pulumirpc.ResourceProvider", "GetMappings"))
      .setSampledToLocalTracing(true)
      .setRequestMarshaller(_root_.scalapb.grpc.Marshaller.forMessage[pulumirpc.provider.GetMappingsRequest])
      .setResponseMarshaller(_root_.scalapb.grpc.Marshaller.forMessage[pulumirpc.provider.GetMappingsResponse])
      .setSchemaDescriptor(_root_.scalapb.grpc.ConcreteProtoMethodDescriptorSupplier.fromMethodDescriptor(pulumirpc.provider.ProviderProto.javaDescriptor.getServices().get(0).getMethods().get(18)))
      .build()
  
  val SERVICE: _root_.io.grpc.ServiceDescriptor =
    _root_.io.grpc.ServiceDescriptor.newBuilder("pulumirpc.ResourceProvider")
      .setSchemaDescriptor(new _root_.scalapb.grpc.ConcreteProtoFileDescriptorSupplier(pulumirpc.provider.ProviderProto.javaDescriptor))
      .addMethod(METHOD_GET_SCHEMA)
      .addMethod(METHOD_CHECK_CONFIG)
      .addMethod(METHOD_DIFF_CONFIG)
      .addMethod(METHOD_CONFIGURE)
      .addMethod(METHOD_INVOKE)
      .addMethod(METHOD_STREAM_INVOKE)
      .addMethod(METHOD_CALL)
      .addMethod(METHOD_CHECK)
      .addMethod(METHOD_DIFF)
      .addMethod(METHOD_CREATE)
      .addMethod(METHOD_READ)
      .addMethod(METHOD_UPDATE)
      .addMethod(METHOD_DELETE)
      .addMethod(METHOD_CONSTRUCT)
      .addMethod(METHOD_CANCEL)
      .addMethod(METHOD_GET_PLUGIN_INFO)
      .addMethod(METHOD_ATTACH)
      .addMethod(METHOD_GET_MAPPING)
      .addMethod(METHOD_GET_MAPPINGS)
      .build()
  
  /** ResourceProvider is a service that understands how to create, read, update, or delete resources for types defined
    * within a single package.  It is driven by the overall planning engine in response to resource diffs.
    */
  trait ResourceProvider extends _root_.scalapb.grpc.AbstractService {
    override def serviceCompanion: _root_.scalapb.grpc.ServiceCompanion[ResourceProvider] = ResourceProvider
    /** GetSchema fetches the schema for this resource provider.
      */
    def getSchema(request: pulumirpc.provider.GetSchemaRequest): scala.concurrent.Future[pulumirpc.provider.GetSchemaResponse]
    /** CheckConfig validates the configuration for this resource provider.
      */
    def checkConfig(request: pulumirpc.provider.CheckRequest): scala.concurrent.Future[pulumirpc.provider.CheckResponse]
    /** DiffConfig checks the impact a hypothetical change to this provider's configuration will have on the provider.
      */
    def diffConfig(request: pulumirpc.provider.DiffRequest): scala.concurrent.Future[pulumirpc.provider.DiffResponse]
    /** Configure configures the resource provider with "globals" that control its behavior.
      */
    def configure(request: pulumirpc.provider.ConfigureRequest): scala.concurrent.Future[pulumirpc.provider.ConfigureResponse]
    /** Invoke dynamically executes a built-in function in the provider.
      */
    def invoke(request: pulumirpc.provider.InvokeRequest): scala.concurrent.Future[pulumirpc.provider.InvokeResponse]
    /** StreamInvoke dynamically executes a built-in function in the provider, which returns a stream
      * of responses.
      */
    def streamInvoke(request: pulumirpc.provider.InvokeRequest, responseObserver: _root_.io.grpc.stub.StreamObserver[pulumirpc.provider.InvokeResponse]): _root_.scala.Unit
    /** Call dynamically executes a method in the provider associated with a component resource.
      */
    def call(request: pulumirpc.provider.CallRequest): scala.concurrent.Future[pulumirpc.provider.CallResponse]
    /** Check validates that the given property bag is valid for a resource of the given type and returns the inputs
      * that should be passed to successive calls to Diff, Create, or Update for this resource. As a rule, the provider
      * inputs returned by a call to Check should preserve the original representation of the properties as present in
      * the program inputs. Though this rule is not required for correctness, violations thereof can negatively impact
      * the end-user experience, as the provider inputs are using for detecting and rendering diffs.
      */
    def check(request: pulumirpc.provider.CheckRequest): scala.concurrent.Future[pulumirpc.provider.CheckResponse]
    /** Diff checks what impacts a hypothetical update will have on the resource's properties.
      */
    def diff(request: pulumirpc.provider.DiffRequest): scala.concurrent.Future[pulumirpc.provider.DiffResponse]
    /** Create allocates a new instance of the provided resource and returns its unique ID afterwards.  (The input ID
      * must be blank.)  If this call fails, the resource must not have been created (i.e., it is "transactional").
      */
    def create(request: pulumirpc.provider.CreateRequest): scala.concurrent.Future[pulumirpc.provider.CreateResponse]
    /** Read the current live state associated with a resource.  Enough state must be include in the inputs to uniquely
      * identify the resource; this is typically just the resource ID, but may also include some properties.
      */
    def read(request: pulumirpc.provider.ReadRequest): scala.concurrent.Future[pulumirpc.provider.ReadResponse]
    /** Update updates an existing resource with new values.
      */
    def update(request: pulumirpc.provider.UpdateRequest): scala.concurrent.Future[pulumirpc.provider.UpdateResponse]
    /** Delete tears down an existing resource with the given ID.  If it fails, the resource is assumed to still exist.
      */
    def delete(request: pulumirpc.provider.DeleteRequest): scala.concurrent.Future[com.google.protobuf.empty.Empty]
    /** Construct creates a new instance of the provided component resource and returns its state.
      */
    def construct(request: pulumirpc.provider.ConstructRequest): scala.concurrent.Future[pulumirpc.provider.ConstructResponse]
    /** Cancel signals the provider to gracefully shut down and abort any ongoing resource operations.
      * Operations aborted in this way will return an error (e.g., `Update` and `Create` will either return a
      * creation error or an initialization error). Since Cancel is advisory and non-blocking, it is up
      * to the host to decide how long to wait after Cancel is called before (e.g.)
      * hard-closing any gRPC connection.
      */
    def cancel(request: com.google.protobuf.empty.Empty): scala.concurrent.Future[com.google.protobuf.empty.Empty]
    /** GetPluginInfo returns generic information about this plugin, like its version.
      */
    def getPluginInfo(request: com.google.protobuf.empty.Empty): scala.concurrent.Future[pulumirpc.plugin.PluginInfo]
    /** Attach sends the engine address to an already running plugin.
      */
    def attach(request: pulumirpc.plugin.PluginAttach): scala.concurrent.Future[com.google.protobuf.empty.Empty]
    /** GetMapping fetches the mapping for this resource provider, if any. A provider should return an empty
      * response (not an error) if it doesn't have a mapping for the given key.
      */
    def getMapping(request: pulumirpc.provider.GetMappingRequest): scala.concurrent.Future[pulumirpc.provider.GetMappingResponse]
    /** GetMappings is an optional method that returns what mappings (if any) a provider supports. If a provider does not
      * implement this method the engine falls back to the old behaviour of just calling GetMapping without a name.
      * If this method is implemented than the engine will then call GetMapping only with the names returned from this method.
      */
    def getMappings(request: pulumirpc.provider.GetMappingsRequest): scala.concurrent.Future[pulumirpc.provider.GetMappingsResponse]
  }
  
  object ResourceProvider extends _root_.scalapb.grpc.ServiceCompanion[ResourceProvider] {
    implicit def serviceCompanion: _root_.scalapb.grpc.ServiceCompanion[ResourceProvider] = this
    def javaDescriptor: _root_.com.google.protobuf.Descriptors.ServiceDescriptor = pulumirpc.provider.ProviderProto.javaDescriptor.getServices().get(0)
    def scalaDescriptor: _root_.scalapb.descriptors.ServiceDescriptor = pulumirpc.provider.ProviderProto.scalaDescriptor.services(0)
    def bindService(serviceImpl: ResourceProvider, executionContext: scala.concurrent.ExecutionContext): _root_.io.grpc.ServerServiceDefinition =
      _root_.io.grpc.ServerServiceDefinition.builder(SERVICE)
      .addMethod(
        METHOD_GET_SCHEMA,
        _root_.io.grpc.stub.ServerCalls.asyncUnaryCall((request: pulumirpc.provider.GetSchemaRequest, observer: _root_.io.grpc.stub.StreamObserver[pulumirpc.provider.GetSchemaResponse]) => {
          serviceImpl.getSchema(request).onComplete(scalapb.grpc.Grpc.completeObserver(observer))(
            executionContext)
        }))
      .addMethod(
        METHOD_CHECK_CONFIG,
        _root_.io.grpc.stub.ServerCalls.asyncUnaryCall((request: pulumirpc.provider.CheckRequest, observer: _root_.io.grpc.stub.StreamObserver[pulumirpc.provider.CheckResponse]) => {
          serviceImpl.checkConfig(request).onComplete(scalapb.grpc.Grpc.completeObserver(observer))(
            executionContext)
        }))
      .addMethod(
        METHOD_DIFF_CONFIG,
        _root_.io.grpc.stub.ServerCalls.asyncUnaryCall((request: pulumirpc.provider.DiffRequest, observer: _root_.io.grpc.stub.StreamObserver[pulumirpc.provider.DiffResponse]) => {
          serviceImpl.diffConfig(request).onComplete(scalapb.grpc.Grpc.completeObserver(observer))(
            executionContext)
        }))
      .addMethod(
        METHOD_CONFIGURE,
        _root_.io.grpc.stub.ServerCalls.asyncUnaryCall((request: pulumirpc.provider.ConfigureRequest, observer: _root_.io.grpc.stub.StreamObserver[pulumirpc.provider.ConfigureResponse]) => {
          serviceImpl.configure(request).onComplete(scalapb.grpc.Grpc.completeObserver(observer))(
            executionContext)
        }))
      .addMethod(
        METHOD_INVOKE,
        _root_.io.grpc.stub.ServerCalls.asyncUnaryCall((request: pulumirpc.provider.InvokeRequest, observer: _root_.io.grpc.stub.StreamObserver[pulumirpc.provider.InvokeResponse]) => {
          serviceImpl.invoke(request).onComplete(scalapb.grpc.Grpc.completeObserver(observer))(
            executionContext)
        }))
      .addMethod(
        METHOD_STREAM_INVOKE,
        _root_.io.grpc.stub.ServerCalls.asyncServerStreamingCall((request: pulumirpc.provider.InvokeRequest, observer: _root_.io.grpc.stub.StreamObserver[pulumirpc.provider.InvokeResponse]) => {
          serviceImpl.streamInvoke(request, observer)
        }))
      .addMethod(
        METHOD_CALL,
        _root_.io.grpc.stub.ServerCalls.asyncUnaryCall((request: pulumirpc.provider.CallRequest, observer: _root_.io.grpc.stub.StreamObserver[pulumirpc.provider.CallResponse]) => {
          serviceImpl.call(request).onComplete(scalapb.grpc.Grpc.completeObserver(observer))(
            executionContext)
        }))
      .addMethod(
        METHOD_CHECK,
        _root_.io.grpc.stub.ServerCalls.asyncUnaryCall((request: pulumirpc.provider.CheckRequest, observer: _root_.io.grpc.stub.StreamObserver[pulumirpc.provider.CheckResponse]) => {
          serviceImpl.check(request).onComplete(scalapb.grpc.Grpc.completeObserver(observer))(
            executionContext)
        }))
      .addMethod(
        METHOD_DIFF,
        _root_.io.grpc.stub.ServerCalls.asyncUnaryCall((request: pulumirpc.provider.DiffRequest, observer: _root_.io.grpc.stub.StreamObserver[pulumirpc.provider.DiffResponse]) => {
          serviceImpl.diff(request).onComplete(scalapb.grpc.Grpc.completeObserver(observer))(
            executionContext)
        }))
      .addMethod(
        METHOD_CREATE,
        _root_.io.grpc.stub.ServerCalls.asyncUnaryCall((request: pulumirpc.provider.CreateRequest, observer: _root_.io.grpc.stub.StreamObserver[pulumirpc.provider.CreateResponse]) => {
          serviceImpl.create(request).onComplete(scalapb.grpc.Grpc.completeObserver(observer))(
            executionContext)
        }))
      .addMethod(
        METHOD_READ,
        _root_.io.grpc.stub.ServerCalls.asyncUnaryCall((request: pulumirpc.provider.ReadRequest, observer: _root_.io.grpc.stub.StreamObserver[pulumirpc.provider.ReadResponse]) => {
          serviceImpl.read(request).onComplete(scalapb.grpc.Grpc.completeObserver(observer))(
            executionContext)
        }))
      .addMethod(
        METHOD_UPDATE,
        _root_.io.grpc.stub.ServerCalls.asyncUnaryCall((request: pulumirpc.provider.UpdateRequest, observer: _root_.io.grpc.stub.StreamObserver[pulumirpc.provider.UpdateResponse]) => {
          serviceImpl.update(request).onComplete(scalapb.grpc.Grpc.completeObserver(observer))(
            executionContext)
        }))
      .addMethod(
        METHOD_DELETE,
        _root_.io.grpc.stub.ServerCalls.asyncUnaryCall((request: pulumirpc.provider.DeleteRequest, observer: _root_.io.grpc.stub.StreamObserver[com.google.protobuf.empty.Empty]) => {
          serviceImpl.delete(request).onComplete(scalapb.grpc.Grpc.completeObserver(observer))(
            executionContext)
        }))
      .addMethod(
        METHOD_CONSTRUCT,
        _root_.io.grpc.stub.ServerCalls.asyncUnaryCall((request: pulumirpc.provider.ConstructRequest, observer: _root_.io.grpc.stub.StreamObserver[pulumirpc.provider.ConstructResponse]) => {
          serviceImpl.construct(request).onComplete(scalapb.grpc.Grpc.completeObserver(observer))(
            executionContext)
        }))
      .addMethod(
        METHOD_CANCEL,
        _root_.io.grpc.stub.ServerCalls.asyncUnaryCall((request: com.google.protobuf.empty.Empty, observer: _root_.io.grpc.stub.StreamObserver[com.google.protobuf.empty.Empty]) => {
          serviceImpl.cancel(request).onComplete(scalapb.grpc.Grpc.completeObserver(observer))(
            executionContext)
        }))
      .addMethod(
        METHOD_GET_PLUGIN_INFO,
        _root_.io.grpc.stub.ServerCalls.asyncUnaryCall((request: com.google.protobuf.empty.Empty, observer: _root_.io.grpc.stub.StreamObserver[pulumirpc.plugin.PluginInfo]) => {
          serviceImpl.getPluginInfo(request).onComplete(scalapb.grpc.Grpc.completeObserver(observer))(
            executionContext)
        }))
      .addMethod(
        METHOD_ATTACH,
        _root_.io.grpc.stub.ServerCalls.asyncUnaryCall((request: pulumirpc.plugin.PluginAttach, observer: _root_.io.grpc.stub.StreamObserver[com.google.protobuf.empty.Empty]) => {
          serviceImpl.attach(request).onComplete(scalapb.grpc.Grpc.completeObserver(observer))(
            executionContext)
        }))
      .addMethod(
        METHOD_GET_MAPPING,
        _root_.io.grpc.stub.ServerCalls.asyncUnaryCall((request: pulumirpc.provider.GetMappingRequest, observer: _root_.io.grpc.stub.StreamObserver[pulumirpc.provider.GetMappingResponse]) => {
          serviceImpl.getMapping(request).onComplete(scalapb.grpc.Grpc.completeObserver(observer))(
            executionContext)
        }))
      .addMethod(
        METHOD_GET_MAPPINGS,
        _root_.io.grpc.stub.ServerCalls.asyncUnaryCall((request: pulumirpc.provider.GetMappingsRequest, observer: _root_.io.grpc.stub.StreamObserver[pulumirpc.provider.GetMappingsResponse]) => {
          serviceImpl.getMappings(request).onComplete(scalapb.grpc.Grpc.completeObserver(observer))(
            executionContext)
        }))
      .build()
  }
  
  /** ResourceProvider is a service that understands how to create, read, update, or delete resources for types defined
    * within a single package.  It is driven by the overall planning engine in response to resource diffs.
    */
  trait ResourceProviderBlockingClient {
    def serviceCompanion: _root_.scalapb.grpc.ServiceCompanion[ResourceProvider] = ResourceProvider
    /** GetSchema fetches the schema for this resource provider.
      */
    def getSchema(request: pulumirpc.provider.GetSchemaRequest): pulumirpc.provider.GetSchemaResponse
    /** CheckConfig validates the configuration for this resource provider.
      */
    def checkConfig(request: pulumirpc.provider.CheckRequest): pulumirpc.provider.CheckResponse
    /** DiffConfig checks the impact a hypothetical change to this provider's configuration will have on the provider.
      */
    def diffConfig(request: pulumirpc.provider.DiffRequest): pulumirpc.provider.DiffResponse
    /** Configure configures the resource provider with "globals" that control its behavior.
      */
    def configure(request: pulumirpc.provider.ConfigureRequest): pulumirpc.provider.ConfigureResponse
    /** Invoke dynamically executes a built-in function in the provider.
      */
    def invoke(request: pulumirpc.provider.InvokeRequest): pulumirpc.provider.InvokeResponse
    /** StreamInvoke dynamically executes a built-in function in the provider, which returns a stream
      * of responses.
      */
    def streamInvoke(request: pulumirpc.provider.InvokeRequest): scala.collection.Iterator[pulumirpc.provider.InvokeResponse]
    /** Call dynamically executes a method in the provider associated with a component resource.
      */
    def call(request: pulumirpc.provider.CallRequest): pulumirpc.provider.CallResponse
    /** Check validates that the given property bag is valid for a resource of the given type and returns the inputs
      * that should be passed to successive calls to Diff, Create, or Update for this resource. As a rule, the provider
      * inputs returned by a call to Check should preserve the original representation of the properties as present in
      * the program inputs. Though this rule is not required for correctness, violations thereof can negatively impact
      * the end-user experience, as the provider inputs are using for detecting and rendering diffs.
      */
    def check(request: pulumirpc.provider.CheckRequest): pulumirpc.provider.CheckResponse
    /** Diff checks what impacts a hypothetical update will have on the resource's properties.
      */
    def diff(request: pulumirpc.provider.DiffRequest): pulumirpc.provider.DiffResponse
    /** Create allocates a new instance of the provided resource and returns its unique ID afterwards.  (The input ID
      * must be blank.)  If this call fails, the resource must not have been created (i.e., it is "transactional").
      */
    def create(request: pulumirpc.provider.CreateRequest): pulumirpc.provider.CreateResponse
    /** Read the current live state associated with a resource.  Enough state must be include in the inputs to uniquely
      * identify the resource; this is typically just the resource ID, but may also include some properties.
      */
    def read(request: pulumirpc.provider.ReadRequest): pulumirpc.provider.ReadResponse
    /** Update updates an existing resource with new values.
      */
    def update(request: pulumirpc.provider.UpdateRequest): pulumirpc.provider.UpdateResponse
    /** Delete tears down an existing resource with the given ID.  If it fails, the resource is assumed to still exist.
      */
    def delete(request: pulumirpc.provider.DeleteRequest): com.google.protobuf.empty.Empty
    /** Construct creates a new instance of the provided component resource and returns its state.
      */
    def construct(request: pulumirpc.provider.ConstructRequest): pulumirpc.provider.ConstructResponse
    /** Cancel signals the provider to gracefully shut down and abort any ongoing resource operations.
      * Operations aborted in this way will return an error (e.g., `Update` and `Create` will either return a
      * creation error or an initialization error). Since Cancel is advisory and non-blocking, it is up
      * to the host to decide how long to wait after Cancel is called before (e.g.)
      * hard-closing any gRPC connection.
      */
    def cancel(request: com.google.protobuf.empty.Empty): com.google.protobuf.empty.Empty
    /** GetPluginInfo returns generic information about this plugin, like its version.
      */
    def getPluginInfo(request: com.google.protobuf.empty.Empty): pulumirpc.plugin.PluginInfo
    /** Attach sends the engine address to an already running plugin.
      */
    def attach(request: pulumirpc.plugin.PluginAttach): com.google.protobuf.empty.Empty
    /** GetMapping fetches the mapping for this resource provider, if any. A provider should return an empty
      * response (not an error) if it doesn't have a mapping for the given key.
      */
    def getMapping(request: pulumirpc.provider.GetMappingRequest): pulumirpc.provider.GetMappingResponse
    /** GetMappings is an optional method that returns what mappings (if any) a provider supports. If a provider does not
      * implement this method the engine falls back to the old behaviour of just calling GetMapping without a name.
      * If this method is implemented than the engine will then call GetMapping only with the names returned from this method.
      */
    def getMappings(request: pulumirpc.provider.GetMappingsRequest): pulumirpc.provider.GetMappingsResponse
  }
  
  class ResourceProviderBlockingStub(channel: _root_.io.grpc.Channel, options: _root_.io.grpc.CallOptions = _root_.io.grpc.CallOptions.DEFAULT) extends _root_.io.grpc.stub.AbstractStub[ResourceProviderBlockingStub](channel, options) with ResourceProviderBlockingClient {
    /** GetSchema fetches the schema for this resource provider.
      */
    override def getSchema(request: pulumirpc.provider.GetSchemaRequest): pulumirpc.provider.GetSchemaResponse = {
      _root_.scalapb.grpc.ClientCalls.blockingUnaryCall(channel, METHOD_GET_SCHEMA, options, request)
    }
    
    /** CheckConfig validates the configuration for this resource provider.
      */
    override def checkConfig(request: pulumirpc.provider.CheckRequest): pulumirpc.provider.CheckResponse = {
      _root_.scalapb.grpc.ClientCalls.blockingUnaryCall(channel, METHOD_CHECK_CONFIG, options, request)
    }
    
    /** DiffConfig checks the impact a hypothetical change to this provider's configuration will have on the provider.
      */
    override def diffConfig(request: pulumirpc.provider.DiffRequest): pulumirpc.provider.DiffResponse = {
      _root_.scalapb.grpc.ClientCalls.blockingUnaryCall(channel, METHOD_DIFF_CONFIG, options, request)
    }
    
    /** Configure configures the resource provider with "globals" that control its behavior.
      */
    override def configure(request: pulumirpc.provider.ConfigureRequest): pulumirpc.provider.ConfigureResponse = {
      _root_.scalapb.grpc.ClientCalls.blockingUnaryCall(channel, METHOD_CONFIGURE, options, request)
    }
    
    /** Invoke dynamically executes a built-in function in the provider.
      */
    override def invoke(request: pulumirpc.provider.InvokeRequest): pulumirpc.provider.InvokeResponse = {
      _root_.scalapb.grpc.ClientCalls.blockingUnaryCall(channel, METHOD_INVOKE, options, request)
    }
    
    /** StreamInvoke dynamically executes a built-in function in the provider, which returns a stream
      * of responses.
      */
    override def streamInvoke(request: pulumirpc.provider.InvokeRequest): scala.collection.Iterator[pulumirpc.provider.InvokeResponse] = {
      _root_.scalapb.grpc.ClientCalls.blockingServerStreamingCall(channel, METHOD_STREAM_INVOKE, options, request)
    }
    
    /** Call dynamically executes a method in the provider associated with a component resource.
      */
    override def call(request: pulumirpc.provider.CallRequest): pulumirpc.provider.CallResponse = {
      _root_.scalapb.grpc.ClientCalls.blockingUnaryCall(channel, METHOD_CALL, options, request)
    }
    
    /** Check validates that the given property bag is valid for a resource of the given type and returns the inputs
      * that should be passed to successive calls to Diff, Create, or Update for this resource. As a rule, the provider
      * inputs returned by a call to Check should preserve the original representation of the properties as present in
      * the program inputs. Though this rule is not required for correctness, violations thereof can negatively impact
      * the end-user experience, as the provider inputs are using for detecting and rendering diffs.
      */
    override def check(request: pulumirpc.provider.CheckRequest): pulumirpc.provider.CheckResponse = {
      _root_.scalapb.grpc.ClientCalls.blockingUnaryCall(channel, METHOD_CHECK, options, request)
    }
    
    /** Diff checks what impacts a hypothetical update will have on the resource's properties.
      */
    override def diff(request: pulumirpc.provider.DiffRequest): pulumirpc.provider.DiffResponse = {
      _root_.scalapb.grpc.ClientCalls.blockingUnaryCall(channel, METHOD_DIFF, options, request)
    }
    
    /** Create allocates a new instance of the provided resource and returns its unique ID afterwards.  (The input ID
      * must be blank.)  If this call fails, the resource must not have been created (i.e., it is "transactional").
      */
    override def create(request: pulumirpc.provider.CreateRequest): pulumirpc.provider.CreateResponse = {
      _root_.scalapb.grpc.ClientCalls.blockingUnaryCall(channel, METHOD_CREATE, options, request)
    }
    
    /** Read the current live state associated with a resource.  Enough state must be include in the inputs to uniquely
      * identify the resource; this is typically just the resource ID, but may also include some properties.
      */
    override def read(request: pulumirpc.provider.ReadRequest): pulumirpc.provider.ReadResponse = {
      _root_.scalapb.grpc.ClientCalls.blockingUnaryCall(channel, METHOD_READ, options, request)
    }
    
    /** Update updates an existing resource with new values.
      */
    override def update(request: pulumirpc.provider.UpdateRequest): pulumirpc.provider.UpdateResponse = {
      _root_.scalapb.grpc.ClientCalls.blockingUnaryCall(channel, METHOD_UPDATE, options, request)
    }
    
    /** Delete tears down an existing resource with the given ID.  If it fails, the resource is assumed to still exist.
      */
    override def delete(request: pulumirpc.provider.DeleteRequest): com.google.protobuf.empty.Empty = {
      _root_.scalapb.grpc.ClientCalls.blockingUnaryCall(channel, METHOD_DELETE, options, request)
    }
    
    /** Construct creates a new instance of the provided component resource and returns its state.
      */
    override def construct(request: pulumirpc.provider.ConstructRequest): pulumirpc.provider.ConstructResponse = {
      _root_.scalapb.grpc.ClientCalls.blockingUnaryCall(channel, METHOD_CONSTRUCT, options, request)
    }
    
    /** Cancel signals the provider to gracefully shut down and abort any ongoing resource operations.
      * Operations aborted in this way will return an error (e.g., `Update` and `Create` will either return a
      * creation error or an initialization error). Since Cancel is advisory and non-blocking, it is up
      * to the host to decide how long to wait after Cancel is called before (e.g.)
      * hard-closing any gRPC connection.
      */
    override def cancel(request: com.google.protobuf.empty.Empty): com.google.protobuf.empty.Empty = {
      _root_.scalapb.grpc.ClientCalls.blockingUnaryCall(channel, METHOD_CANCEL, options, request)
    }
    
    /** GetPluginInfo returns generic information about this plugin, like its version.
      */
    override def getPluginInfo(request: com.google.protobuf.empty.Empty): pulumirpc.plugin.PluginInfo = {
      _root_.scalapb.grpc.ClientCalls.blockingUnaryCall(channel, METHOD_GET_PLUGIN_INFO, options, request)
    }
    
    /** Attach sends the engine address to an already running plugin.
      */
    override def attach(request: pulumirpc.plugin.PluginAttach): com.google.protobuf.empty.Empty = {
      _root_.scalapb.grpc.ClientCalls.blockingUnaryCall(channel, METHOD_ATTACH, options, request)
    }
    
    /** GetMapping fetches the mapping for this resource provider, if any. A provider should return an empty
      * response (not an error) if it doesn't have a mapping for the given key.
      */
    override def getMapping(request: pulumirpc.provider.GetMappingRequest): pulumirpc.provider.GetMappingResponse = {
      _root_.scalapb.grpc.ClientCalls.blockingUnaryCall(channel, METHOD_GET_MAPPING, options, request)
    }
    
    /** GetMappings is an optional method that returns what mappings (if any) a provider supports. If a provider does not
      * implement this method the engine falls back to the old behaviour of just calling GetMapping without a name.
      * If this method is implemented than the engine will then call GetMapping only with the names returned from this method.
      */
    override def getMappings(request: pulumirpc.provider.GetMappingsRequest): pulumirpc.provider.GetMappingsResponse = {
      _root_.scalapb.grpc.ClientCalls.blockingUnaryCall(channel, METHOD_GET_MAPPINGS, options, request)
    }
    
    override def build(channel: _root_.io.grpc.Channel, options: _root_.io.grpc.CallOptions): ResourceProviderBlockingStub = new ResourceProviderBlockingStub(channel, options)
  }
  
  class ResourceProviderStub(channel: _root_.io.grpc.Channel, options: _root_.io.grpc.CallOptions = _root_.io.grpc.CallOptions.DEFAULT) extends _root_.io.grpc.stub.AbstractStub[ResourceProviderStub](channel, options) with ResourceProvider {
    /** GetSchema fetches the schema for this resource provider.
      */
    override def getSchema(request: pulumirpc.provider.GetSchemaRequest): scala.concurrent.Future[pulumirpc.provider.GetSchemaResponse] = {
      _root_.scalapb.grpc.ClientCalls.asyncUnaryCall(channel, METHOD_GET_SCHEMA, options, request)
    }
    
    /** CheckConfig validates the configuration for this resource provider.
      */
    override def checkConfig(request: pulumirpc.provider.CheckRequest): scala.concurrent.Future[pulumirpc.provider.CheckResponse] = {
      _root_.scalapb.grpc.ClientCalls.asyncUnaryCall(channel, METHOD_CHECK_CONFIG, options, request)
    }
    
    /** DiffConfig checks the impact a hypothetical change to this provider's configuration will have on the provider.
      */
    override def diffConfig(request: pulumirpc.provider.DiffRequest): scala.concurrent.Future[pulumirpc.provider.DiffResponse] = {
      _root_.scalapb.grpc.ClientCalls.asyncUnaryCall(channel, METHOD_DIFF_CONFIG, options, request)
    }
    
    /** Configure configures the resource provider with "globals" that control its behavior.
      */
    override def configure(request: pulumirpc.provider.ConfigureRequest): scala.concurrent.Future[pulumirpc.provider.ConfigureResponse] = {
      _root_.scalapb.grpc.ClientCalls.asyncUnaryCall(channel, METHOD_CONFIGURE, options, request)
    }
    
    /** Invoke dynamically executes a built-in function in the provider.
      */
    override def invoke(request: pulumirpc.provider.InvokeRequest): scala.concurrent.Future[pulumirpc.provider.InvokeResponse] = {
      _root_.scalapb.grpc.ClientCalls.asyncUnaryCall(channel, METHOD_INVOKE, options, request)
    }
    
    /** StreamInvoke dynamically executes a built-in function in the provider, which returns a stream
      * of responses.
      */
    override def streamInvoke(request: pulumirpc.provider.InvokeRequest, responseObserver: _root_.io.grpc.stub.StreamObserver[pulumirpc.provider.InvokeResponse]): _root_.scala.Unit = {
      _root_.scalapb.grpc.ClientCalls.asyncServerStreamingCall(channel, METHOD_STREAM_INVOKE, options, request, responseObserver)
    }
    
    /** Call dynamically executes a method in the provider associated with a component resource.
      */
    override def call(request: pulumirpc.provider.CallRequest): scala.concurrent.Future[pulumirpc.provider.CallResponse] = {
      _root_.scalapb.grpc.ClientCalls.asyncUnaryCall(channel, METHOD_CALL, options, request)
    }
    
    /** Check validates that the given property bag is valid for a resource of the given type and returns the inputs
      * that should be passed to successive calls to Diff, Create, or Update for this resource. As a rule, the provider
      * inputs returned by a call to Check should preserve the original representation of the properties as present in
      * the program inputs. Though this rule is not required for correctness, violations thereof can negatively impact
      * the end-user experience, as the provider inputs are using for detecting and rendering diffs.
      */
    override def check(request: pulumirpc.provider.CheckRequest): scala.concurrent.Future[pulumirpc.provider.CheckResponse] = {
      _root_.scalapb.grpc.ClientCalls.asyncUnaryCall(channel, METHOD_CHECK, options, request)
    }
    
    /** Diff checks what impacts a hypothetical update will have on the resource's properties.
      */
    override def diff(request: pulumirpc.provider.DiffRequest): scala.concurrent.Future[pulumirpc.provider.DiffResponse] = {
      _root_.scalapb.grpc.ClientCalls.asyncUnaryCall(channel, METHOD_DIFF, options, request)
    }
    
    /** Create allocates a new instance of the provided resource and returns its unique ID afterwards.  (The input ID
      * must be blank.)  If this call fails, the resource must not have been created (i.e., it is "transactional").
      */
    override def create(request: pulumirpc.provider.CreateRequest): scala.concurrent.Future[pulumirpc.provider.CreateResponse] = {
      _root_.scalapb.grpc.ClientCalls.asyncUnaryCall(channel, METHOD_CREATE, options, request)
    }
    
    /** Read the current live state associated with a resource.  Enough state must be include in the inputs to uniquely
      * identify the resource; this is typically just the resource ID, but may also include some properties.
      */
    override def read(request: pulumirpc.provider.ReadRequest): scala.concurrent.Future[pulumirpc.provider.ReadResponse] = {
      _root_.scalapb.grpc.ClientCalls.asyncUnaryCall(channel, METHOD_READ, options, request)
    }
    
    /** Update updates an existing resource with new values.
      */
    override def update(request: pulumirpc.provider.UpdateRequest): scala.concurrent.Future[pulumirpc.provider.UpdateResponse] = {
      _root_.scalapb.grpc.ClientCalls.asyncUnaryCall(channel, METHOD_UPDATE, options, request)
    }
    
    /** Delete tears down an existing resource with the given ID.  If it fails, the resource is assumed to still exist.
      */
    override def delete(request: pulumirpc.provider.DeleteRequest): scala.concurrent.Future[com.google.protobuf.empty.Empty] = {
      _root_.scalapb.grpc.ClientCalls.asyncUnaryCall(channel, METHOD_DELETE, options, request)
    }
    
    /** Construct creates a new instance of the provided component resource and returns its state.
      */
    override def construct(request: pulumirpc.provider.ConstructRequest): scala.concurrent.Future[pulumirpc.provider.ConstructResponse] = {
      _root_.scalapb.grpc.ClientCalls.asyncUnaryCall(channel, METHOD_CONSTRUCT, options, request)
    }
    
    /** Cancel signals the provider to gracefully shut down and abort any ongoing resource operations.
      * Operations aborted in this way will return an error (e.g., `Update` and `Create` will either return a
      * creation error or an initialization error). Since Cancel is advisory and non-blocking, it is up
      * to the host to decide how long to wait after Cancel is called before (e.g.)
      * hard-closing any gRPC connection.
      */
    override def cancel(request: com.google.protobuf.empty.Empty): scala.concurrent.Future[com.google.protobuf.empty.Empty] = {
      _root_.scalapb.grpc.ClientCalls.asyncUnaryCall(channel, METHOD_CANCEL, options, request)
    }
    
    /** GetPluginInfo returns generic information about this plugin, like its version.
      */
    override def getPluginInfo(request: com.google.protobuf.empty.Empty): scala.concurrent.Future[pulumirpc.plugin.PluginInfo] = {
      _root_.scalapb.grpc.ClientCalls.asyncUnaryCall(channel, METHOD_GET_PLUGIN_INFO, options, request)
    }
    
    /** Attach sends the engine address to an already running plugin.
      */
    override def attach(request: pulumirpc.plugin.PluginAttach): scala.concurrent.Future[com.google.protobuf.empty.Empty] = {
      _root_.scalapb.grpc.ClientCalls.asyncUnaryCall(channel, METHOD_ATTACH, options, request)
    }
    
    /** GetMapping fetches the mapping for this resource provider, if any. A provider should return an empty
      * response (not an error) if it doesn't have a mapping for the given key.
      */
    override def getMapping(request: pulumirpc.provider.GetMappingRequest): scala.concurrent.Future[pulumirpc.provider.GetMappingResponse] = {
      _root_.scalapb.grpc.ClientCalls.asyncUnaryCall(channel, METHOD_GET_MAPPING, options, request)
    }
    
    /** GetMappings is an optional method that returns what mappings (if any) a provider supports. If a provider does not
      * implement this method the engine falls back to the old behaviour of just calling GetMapping without a name.
      * If this method is implemented than the engine will then call GetMapping only with the names returned from this method.
      */
    override def getMappings(request: pulumirpc.provider.GetMappingsRequest): scala.concurrent.Future[pulumirpc.provider.GetMappingsResponse] = {
      _root_.scalapb.grpc.ClientCalls.asyncUnaryCall(channel, METHOD_GET_MAPPINGS, options, request)
    }
    
    override def build(channel: _root_.io.grpc.Channel, options: _root_.io.grpc.CallOptions): ResourceProviderStub = new ResourceProviderStub(channel, options)
  }
  
  object ResourceProviderStub extends _root_.io.grpc.stub.AbstractStub.StubFactory[ResourceProviderStub] {
    override def newStub(channel: _root_.io.grpc.Channel, options: _root_.io.grpc.CallOptions): ResourceProviderStub = new ResourceProviderStub(channel, options)
    
    implicit val stubFactory: _root_.io.grpc.stub.AbstractStub.StubFactory[ResourceProviderStub] = this
  }
  
  def bindService(serviceImpl: ResourceProvider, executionContext: scala.concurrent.ExecutionContext): _root_.io.grpc.ServerServiceDefinition = ResourceProvider.bindService(serviceImpl, executionContext)
  
  def blockingStub(channel: _root_.io.grpc.Channel): ResourceProviderBlockingStub = new ResourceProviderBlockingStub(channel)
  
  def stub(channel: _root_.io.grpc.Channel): ResourceProviderStub = new ResourceProviderStub(channel)
  
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.ServiceDescriptor = pulumirpc.provider.ProviderProto.javaDescriptor.getServices().get(0)
  
}