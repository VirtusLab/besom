// Copyright 2016-2023, Pulumi Corporation.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package pulumirpc.codegen;

option go_package = "github.com/pulumi/pulumi/sdk/v3/proto/go/codegen";

// Pos represents a single position in a source file, by addressing the start byte of a unicode character
// encoded in UTF-8.
message Pos {
	// Line is the source code line where this position points. Lines are counted starting at 1 and
	// incremented for each newline character encountered.
	int64 line = 1;

	// Column is the source code column where this position points, in unicode characters, with counting
	// starting at 1.
	//
	// Column counts characters as they appear visually, so for example a latin letter with a combining
	// diacritic mark counts as one character. This is intended for rendering visual markers against source
	// code in contexts where these diacritics would be rendered in a single character cell. Technically
	// speaking, Column is counting grapheme clusters as used in unicode normalization.
	int64 column = 2;

	// Byte is the byte offset into the file where the indicated character begins. This is a zero-based offset
	// to the first byte of the first UTF-8 codepoint sequence in the character, and thus gives a position
	// that can be resolved _without_ awareness of Unicode characters.
	int64 byte = 3;
}

// Range represents a span of characters between two positions in a source file.
message Range {
	// Filename is the name of the file into which this range's positions point.
	string filename = 1;

	// Start and End represent the bounds of this range. Start is inclusive and End is exclusive.
	Pos start = 2;
	Pos end = 3;
}

// DiagnosticSeverity is the severity level of a diagnostic message.
enum DiagnosticSeverity {
	// DIAG_INVALID is the invalid zero value of DiagnosticSeverity
	DIAG_INVALID = 0;
	// DIAG_ERROR indicates that the problem reported by a diagnostic prevents
	// further progress in parsing and/or evaluating the subject.
	DIAG_ERROR = 1;
	// DIAG_WARNING indicates that the problem reported by a diagnostic warrants
	// user attention but does not prevent further progress. It is most
	// commonly used for showing deprecation notices.
	DIAG_WARNING = 2;
}

// Diagnostic represents information to be presented to a user about an error or anomaly in parsing or evaluating configuration.
message Diagnostic {
	DiagnosticSeverity severity = 1;

	// Summary and Detail contain the English-language description of the
	// problem. Summary is a terse description of the general problem and
	// detail is a more elaborate, often-multi-sentence description of
	// the problem and what might be done to solve it.
	string summary = 2;
	string detail = 3;

	// Subject and Context are both source ranges relating to the diagnostic.
	//
	// Subject is a tight range referring to exactly the construct that
	// is problematic, while Context is an optional broader range (which should
	// fully contain Subject) that ought to be shown around Subject when
	// generating isolated source-code snippets in diagnostic messages.
	// If Context is nil, the Subject is also the Context.
	//
	// Some diagnostics have no source ranges at all. If Context is set then
	// Subject should always also be set.
	Range subject = 4;
	Range context = 5;
}